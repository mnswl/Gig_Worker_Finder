{"version":3,"file":"static/js/125.0276f590.chunk.js","mappings":"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","sources":["pages/Chat.jsx"],"sourcesContent":["import { useEffect, useState, useMemo, useRef } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { socket } from '../socket';\r\nimport api from '../api';\r\nimport '../styles/Chat.css';\r\n\r\nfunction Chat() {\r\n  const navigate = useNavigate();\r\n  const { t } = useTranslation();\r\n  const location = useLocation();\r\n  const params = new URLSearchParams(location.search);\r\n  const initialUserId = params.get('user');\r\n  const initialJobId = params.get('job');\r\n\r\n  const [conversations, setConversations] = useState([]); // [{user:{_id,name,email,avatar}, lastMessage, unread}]\r\n  const [selected, setSelected] = useState(null); // user object\r\n  const [messages, setMessages] = useState([]); // [{_id,sender,receiver,content,createdAt}]\r\n  const [newMsg, setNewMsg] = useState('');\r\n  const [typing, setTyping] = useState(false);\r\n  const typingTimeoutRef = useRef(null);\r\n  const [myId, setMyId] = useState('');\r\n  const [jobRef, setJobRef] = useState(null);\r\n  const messagesRef = useRef(null);\r\n  // Conversations sorted: unread first, then most recent\r\n  const sortedConversations = useMemo(() => {\r\n    const arr = [...conversations];\r\n    arr.sort((a,b)=>{\r\n      if(a.unread && !b.unread) return -1;\r\n      if(!a.unread && b.unread) return 1;\r\n      const ta = new Date(a.updatedAt || a.lastMessageAt || 0);\r\n      const tb = new Date(b.updatedAt || b.lastMessageAt || 0);\r\n      return tb - ta; // recent first\r\n    });\r\n    return arr;\r\n  }, [conversations]);\r\n  // Helper to fire native notification\r\n  const showNativeNotification = (title, body) => {\r\n    if (!('Notification' in window)) return;\r\n    if (Notification.permission === 'granted') {\r\n      try {\r\n        console.log('Firing notification', title, body);\r\n        new Notification(title, { body });\r\n      } catch (err) {\r\n        console.error('Notification error', err);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Request browser notification permission once\r\n  useEffect(() => {\r\n    if ('Notification' in window && Notification.permission === 'default') {\r\n      Notification.requestPermission();\r\n    }\r\n  }, []);\r\n\r\n  // Fetch my profile to know my id\r\n  useEffect(() => {\r\n    if(messagesRef.current){\r\n      messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\r\n    }\r\n  }, [messages, selected]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const me = await api.get('/auth/me');\r\n        setMyId(me.data.id);\r\n      } catch (err) {}\r\n    })();\r\n  }, []);\r\n\r\n  \r\n\r\n  // ensure joined after myId available\r\n  useEffect(() => {\r\n    if (socket.connected && myId) {\r\n      socket.emit('join', myId);\r\n    }\r\n  }, [myId]);\r\n\r\n  // Handle incoming message and typing\r\n  useEffect(() => {\r\n    socket.on('newMessage', msg => {\r\n      const senderId = msg.sender._id || msg.sender;\r\n      const receiverId = msg.receiver?._id || msg.receiver;\r\n      const isCurrentThread = selected && (senderId === selected._id || receiverId === selected._id);\r\n      const isToMe = receiverId === myId;\r\n      // Update conversation list\r\n      setConversations(prev => {\r\n        const idx = prev.findIndex(c => (c.user._id || c.user) === (msg.sender._id || msg.sender));\r\n        const isUnread = !isCurrentThread;\r\n        let updated = [...prev];\r\n        if (idx !== -1) {\r\n          updated[idx] = { ...updated[idx], lastMessage: msg.content, unread: isUnread, updatedAt: msg.createdAt };\r\n        } else {\r\n          updated.push({ user: msg.sender, lastMessage: msg.content, unread: isUnread, updatedAt: msg.createdAt });\r\n        }\r\n        return updated;\r\n      });\r\n      // If current convo open, append\r\n      if (isCurrentThread) {\r\n        setMessages(prev => prev.some(m => m._id === msg._id) ? prev : [...prev, msg]);\r\n      } else {\r\n        const shouldNotify = !document.hasFocus() || !isCurrentThread;\r\n        if (shouldNotify) {\r\n          toast.info(`New message from ${msg.sender.name || 'Someone'}: ${msg.content.slice(0,60)}`);\r\n          showNativeNotification(msg.sender.name || 'New message', msg.content);\r\n        }\r\n      }\r\n    });\r\n          socket.on('typing', ({ from }) => {\r\n        if (selected && from === selected._id) {\r\n          setTyping(true);\r\n          if (typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);\r\n          typingTimeoutRef.current = setTimeout(() => setTyping(false), 1500);\r\n        }\r\n      });\r\n      return () => {\r\n        socket.off('newMessage');\r\n        socket.off('typing');\r\n      };\r\n  }, [socket, selected]);\r\n\r\n  // Fetch conversations\r\n  const loadConversations = async () => {\r\n    try {\r\n      const res = await api.get('/chat/conversations');\r\n      setConversations(res.data);\r\n      // If initial user specified, open that convo\r\n      if (initialUserId) {\r\n        const found = res.data.find(c => (c.user._id || c.user) === initialUserId);\r\n        if (found) {\r\n          openConversation(found.user, initialJobId);\r\n        } else {\r\n          // fetch user info\r\n          const userRes = await api.get(`/users/${initialUserId}`);\r\n          openConversation(userRes.data, initialJobId);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      toast.error('Failed to load conversations');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadConversations();\r\n\r\n  }, []);\r\n\r\n  const openConversation = async (user, jobId = null) => {\r\n    setSelected(user);\r\n    // mark as read in list\r\n    setConversations(prev => prev.map(c => ((c.user._id || c.user) === user._id) ? { ...c, unread: false } : c));\r\n    setJobRef(null);\r\n    navigate(`/chat?user=${user._id}${jobId ? `&job=${jobId}` : ''}`);\r\n    try {\r\n      if (jobId) {\r\n        try {\r\n          const jobRes = await api.get(`/jobs/${jobId}`);\r\n          setJobRef({ _id: jobId, title: jobRes.data.title });\r\n        } catch (_) {}\r\n      }\r\n      const res = await api.get(`/chat/with/${user._id}`);\r\n      setMessages(res.data);\r\n    } catch (err) {\r\n      toast.error('Failed to load messages');\r\n    }\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (!newMsg.trim()) return;\r\n    try {\r\n      const res = await api.post('/chat', {\r\n        receiverId: selected._id,\r\n        subject: '',\r\n        content: newMsg.trim(),\r\n        jobId: jobRef ? jobRef._id : null,\r\n      });\r\n      // Optimistic UI handled via socket echo; just clear input.\r\n      setNewMsg('');\r\n    } catch (err) {\r\n      toast.error('Send failed');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <div className=\"chat-sidebar\">\r\n        <h5 className=\"p-3 border-bottom\">Conversations</h5>\r\n        <ul className=\"list-group list-group-flush conversation-list\">\r\n          {sortedConversations.map(c => (\r\n            <li\r\n              key={c.user._id || c.user}\r\n              className={`list-group-item d-flex align-items-center gap-2 pointer ${selected && (selected._id === (c.user._id || c.user) ? 'active' : '')}`}\r\n              onClick={() => openConversation(c.user)}\r\n            >\r\n              <div className=\"avatar-circle bg-primary text-white fw-bold\">\r\n                {c.user.name ? c.user.name.charAt(0).toUpperCase() : '?'}\r\n              </div>\r\n              <div className=\"flex-grow-1\">\r\n                <div className=\"fw-semibold\">{c.user.name || 'Unknown'}</div>\r\n                <small className=\"text-muted text-truncate d-block\" style={{maxWidth: '160px'}}>{c.lastMessage}</small>\r\n              </div>{c.unread && <span className=\"badge bg-danger ms-auto\">●</span>}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"chat-main d-flex flex-column\">\r\n        {selected ? (\r\n          <>\r\n            <div className=\"d-flex justify-content-between align-items-center border-bottom p-3\">\r\n              <div>\r\n                <div className=\"fw-semibold\">{selected.name}</div>\r\n                {jobRef && <small className=\"text-muted\">{t('jobLabel')}: {jobRef.title}</small>}\r\n              </div>\r\n              <button className=\"btn btn-sm btn-outline-secondary\" onClick={() => navigate('/dashboard')}>&times;</button>\r\n            </div>\r\n            <div ref={messagesRef} className=\"flex-grow-1 overflow-auto p-3 messages-container\">\r\n               {typing && <small className=\"text-muted mb-2\">{selected.name} is typing...</small>}\r\n              {messages.map(m => (\r\n                <div key={m._id} className={`d-flex mb-2 ${m.sender._id === selected._id || m.sender === selected._id ? 'align-start' : 'justify-content-end'}`}>\r\n                  <div className={`chat-bubble ${m.sender._id === selected._id || m.sender === selected._id ? 'incoming' : 'outgoing'}`}>{m.content}</div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"p-3 border-top d-flex gap-2\">\r\n              <input\r\n                className=\"form-control\"\r\n                value={newMsg}\r\n                onChange={e => {\r\n                  setNewMsg(e.target.value);\r\n                  if (selected) {\r\n                    socket.emit('typing', { to: selected._id });\r\n                  }\r\n                }}\r\n                placeholder={t('typeMessage')}\r\n                onKeyDown={e => {\r\n                  if (e.key === 'Enter' && !e.shiftKey) {\r\n                    e.preventDefault();\r\n                    handleSend();\r\n                  }\r\n                }}\r\n              />\r\n              <button className=\"btn btn-primary\" onClick={handleSend}>{t('send')}</button>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"h-100 position-relative\">\r\n            <button\r\n              className=\"btn btn-sm btn-outline-secondary position-absolute top-0 end-0 m-3\"\r\n              onClick={() => navigate('/dashboard')}\r\n            >\r\n              &times;\r\n            </button>\r\n            <div className=\"h-100 d-flex align-items-center justify-content-center\">\r\n              <p className=\"text-muted\">{t('selectConversation')}</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"names":["navigate","useNavigate","t","useTranslation","location","useLocation","params","URLSearchParams","search","initialUserId","get","initialJobId","conversations","setConversations","useState","selected","setSelected","messages","setMessages","newMsg","setNewMsg","typing","setTyping","typingTimeoutRef","useRef","myId","setMyId","jobRef","setJobRef","messagesRef","sortedConversations","useMemo","arr","sort","a","b","unread","ta","Date","updatedAt","lastMessageAt","useEffect","window","Notification","permission","requestPermission","current","scrollTop","scrollHeight","me","api","data","id","err","socket","connected","emit","on","msg","_msg$receiver","senderId","sender","_id","receiverId","receiver","isCurrentThread","prev","idx","findIndex","c","user","isUnread","updated","lastMessage","content","createdAt","push","some","m","document","hasFocus","toast","info","name","slice","showNativeNotification","title","body","console","log","error","_ref","from","clearTimeout","setTimeout","off","async","res","found","find","openConversation","userRes","loadConversations","jobId","arguments","length","undefined","map","jobRes","_","handleSend","trim","post","subject","_jsxs","className","children","_jsx","onClick","charAt","toUpperCase","style","maxWidth","_Fragment","ref","value","onChange","e","target","to","placeholder","onKeyDown","key","shiftKey","preventDefault"],"sourceRoot":""}