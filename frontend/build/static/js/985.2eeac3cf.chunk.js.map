{"version":3,"file":"static/js/985.2eeac3cf.chunk.js","mappings":"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","sources":["../node_modules/animejs/lib/anime.esm.js"],"sourcesContent":["/**\n * anime.js - ESM\n * @version v4.1.2\n * @author Julian Garnier\n * @license MIT\n * @copyright (c) 2025 Julian Garnier\n * @see https://animejs.com\n */\n\n// Global types ///////////////////////////////////////////////////////////////\n\n/**\n * @typedef {Object} DefaultsParams\n * @property {Number|String} [id]\n * @property {PercentageKeyframes|DurationKeyframes} [keyframes]\n * @property {EasingParam} [playbackEase]\n * @property {Number} [playbackRate]\n * @property {Number} [frameRate]\n * @property {Number|Boolean} [loop]\n * @property {Boolean} [reversed]\n * @property {Boolean} [alternate]\n * @property {Boolean|ScrollObserver} [autoplay]\n * @property {Number|FunctionValue} [duration]\n * @property {Number|FunctionValue} [delay]\n * @property {Number} [loopDelay]\n * @property {EasingParam} [ease]\n * @property {'none'|'replace'|'blend'|compositionTypes} [composition]\n * @property {(v: any) => any} [modifier]\n * @property {(tickable: Tickable) => void} [onBegin]\n * @property {(tickable: Tickable) => void} [onBeforeUpdate]\n * @property {(tickable: Tickable) => void} [onUpdate]\n * @property {(tickable: Tickable) => void} [onLoop]\n * @property {(tickable: Tickable) => void} [onPause]\n * @property {(tickable: Tickable) => void} [onComplete]\n * @property {(renderable: Renderable) => void} [onRender]\n */\n\n/** @typedef {JSAnimation|Timeline} Renderable */\n/** @typedef {Timer|Renderable} Tickable */\n/** @typedef {Timer&JSAnimation&Timeline} CallbackArgument */\n/** @typedef {Animatable|Tickable|Draggable|ScrollObserver|TextSplitter|Scope} Revertible */\n\n// Stagger types //////////////////////////////////////////////////////////////\n\n/**\n * @callback StaggerFunction\n * @param {Target} [target]\n * @param {Number} [index]\n * @param {Number} [length]\n * @param {Timeline} [tl]\n * @return {Number|String}\n */\n\n/**\n * @typedef  {Object} StaggerParams\n * @property {Number|String} [start]\n * @property {Number|'first'|'center'|'last'|'random'} [from]\n * @property {Boolean} [reversed]\n * @property {Array.<Number>} [grid]\n * @property {('x'|'y')} [axis]\n * @property {String|StaggerFunction} [use]\n * @property {Number} [total]\n * @property {EasingParam} [ease]\n * @property {TweenModifier} [modifier]\n */\n\n// Eases types ////////////////////////////////////////////////////////////////\n\n/**\n * @callback EasingFunction\n * @param {Number} time\n * @return {Number}\n */\n\n/**\n * @typedef {('linear'|'linear(x1, x2 25%, x3)'|'in'|'out'|'inOut'|'inQuad'|'outQuad'|'inOutQuad'|'inCubic'|'outCubic'|'inOutCubic'|'inQuart'|'outQuart'|'inOutQuart'|'inQuint'|'outQuint'|'inOutQuint'|'inSine'|'outSine'|'inOutSine'|'inCirc'|'outCirc'|'inOutCirc'|'inExpo'|'outExpo'|'inOutExpo'|'inBounce'|'outBounce'|'inOutBounce'|'inBack'|'outBack'|'inOutBack'|'inElastic'|'outElastic'|'inOutElastic'|'irregular'|'cubicBezier'|'steps'|'in(p = 1.675)'|'out(p = 1.675)'|'inOut(p = 1.675)'|'inBack(overshoot = 1.70158)'|'outBack(overshoot = 1.70158)'|'inOutBack(overshoot = 1.70158)'|'inElastic(amplitude = 1, period = .3)'|'outElastic(amplitude = 1, period = .3)'|'inOutElastic(amplitude = 1, period = .3)'|'irregular(length = 10, randomness = 1)'|'cubicBezier(x1, y1, x2, y2)'|'steps(steps = 10)')} EaseStringParamNames\n */\n\n// A hack to get both ease names suggestions AND allow any strings\n// https://github.com/microsoft/TypeScript/issues/29729#issuecomment-460346421\n/** @typedef {(String & {})|EaseStringParamNames|EasingFunction|Spring} EasingParam */\n\n/** @typedef {HTMLElement|SVGElement} DOMTarget */\n/** @typedef {Record<String, any>} JSTarget */\n/** @typedef {DOMTarget|JSTarget} Target */\n/** @typedef {Target|NodeList|String} TargetSelector */\n/** @typedef {DOMTarget|NodeList|String} DOMTargetSelector */\n/** @typedef {Array.<DOMTargetSelector>|DOMTargetSelector} DOMTargetsParam */\n/** @typedef {Array.<DOMTarget>} DOMTargetsArray */\n/** @typedef {Array.<JSTarget>|JSTarget} JSTargetsParam */\n/** @typedef {Array.<JSTarget>} JSTargetsArray */\n/** @typedef {Array.<TargetSelector>|TargetSelector} TargetsParam */\n/** @typedef {Array.<Target>} TargetsArray */\n\n // Callback types ////////////////////////////////////////////////////////////\n\n/**\n * @template T\n * @callback Callback\n * @param {T} self - Returns itself\n * @param {PointerEvent} [e]\n * @return {*}\n */\n\n/**\n * @template {object} T\n * @typedef {Object} TickableCallbacks\n * @property {Callback<T>} [onBegin]\n * @property {Callback<T>} [onBeforeUpdate]\n * @property {Callback<T>} [onUpdate]\n * @property {Callback<T>} [onLoop]\n * @property {Callback<T>} [onPause]\n * @property {Callback<T>} [onComplete]\n */\n\n/**\n * @template {object} T\n * @typedef {Object} RenderableCallbacks\n * @property {Callback<T>} [onRender]\n */\n\n// Timer types ////////////////////////////////////////////////////////////////\n\n/**\n * @typedef {Object} TimerOptions\n * @property {Number|String} [id]\n * @property {TweenParamValue} [duration]\n * @property {TweenParamValue} [delay]\n * @property {Number} [loopDelay]\n * @property {Boolean} [reversed]\n * @property {Boolean} [alternate]\n * @property {Boolean|Number} [loop]\n * @property {Boolean|ScrollObserver} [autoplay]\n * @property {Number} [frameRate]\n * @property {Number} [playbackRate]\n */\n\n/**\n\n/**\n * @typedef {TimerOptions & TickableCallbacks<Timer>} TimerParams\n */\n\n// Tween types ////////////////////////////////////////////////////////////////\n\n/**\n * @callback FunctionValue\n * @param {Target} target - The animated target\n * @param {Number} index - The target index\n * @param {Number} length - The total number of animated targets\n * @return {Number|String|TweenObjectValue|Array.<Number|String|TweenObjectValue>}\n */\n\n/**\n * @callback TweenModifier\n * @param {Number} value - The animated value\n * @return {Number|String}\n */\n\n/** @typedef {[Number, Number, Number, Number]} ColorArray */\n\n/**\n * @typedef {Object} Tween\n * @property {Number} id\n * @property {JSAnimation} parent\n * @property {String} property\n * @property {Target} target\n * @property {String|Number} _value\n * @property {Function|null} _func\n * @property {EasingFunction} _ease\n * @property {Array.<Number>} _fromNumbers\n * @property {Array.<Number>} _toNumbers\n * @property {Array.<String>} _strings\n * @property {Number} _fromNumber\n * @property {Number} _toNumber\n * @property {Array.<Number>} _numbers\n * @property {Number} _number\n * @property {String} _unit\n * @property {TweenModifier} _modifier\n * @property {Number} _currentTime\n * @property {Number} _delay\n * @property {Number} _updateDuration\n * @property {Number} _startTime\n * @property {Number} _changeDuration\n * @property {Number} _absoluteStartTime\n * @property {tweenTypes} _tweenType\n * @property {valueTypes} _valueType\n * @property {Number} _composition\n * @property {Number} _isOverlapped\n * @property {Number} _isOverridden\n * @property {Number} _renderTransforms\n * @property {Tween} _prevRep\n * @property {Tween} _nextRep\n * @property {Tween} _prevAdd\n * @property {Tween} _nextAdd\n * @property {Tween} _prev\n * @property {Tween} _next\n */\n\n/**\n * @typedef TweenDecomposedValue\n * @property {Number} t - Type\n * @property {Number} n - Single number value\n * @property {String} u - Value unit\n * @property {String} o - Value operator\n * @property {Array.<Number>} d - Array of Numbers (in case of complex value type)\n * @property {Array.<String>} s - Strings (in case of complex value type)\n */\n\n/** @typedef {{_head: null|Tween, _tail: null|Tween}} TweenPropertySiblings */\n/** @typedef {Record<String, TweenPropertySiblings>} TweenLookups */\n/** @typedef {WeakMap.<Target, TweenLookups>} TweenReplaceLookups */\n/** @typedef {Map.<Target, TweenLookups>} TweenAdditiveLookups */\n\n// Animation types ////////////////////////////////////////////////////////////\n\n/**\n * @typedef {Number|String|FunctionValue} TweenParamValue\n */\n\n/**\n * @typedef {TweenParamValue|[TweenParamValue, TweenParamValue]} TweenPropValue\n */\n\n/**\n * @typedef {(String & {})|'none'|'replace'|'blend'|compositionTypes} TweenComposition\n */\n\n/**\n * @typedef {Object} TweenParamsOptions\n * @property {TweenParamValue} [duration]\n * @property {TweenParamValue} [delay]\n * @property {EasingParam} [ease]\n * @property {TweenModifier} [modifier]\n * @property {TweenComposition} [composition]\n */\n\n/**\n * @typedef {Object} TweenValues\n * @property {TweenParamValue} [from]\n * @property {TweenPropValue} [to]\n * @property {TweenPropValue} [fromTo]\n */\n\n/**\n * @typedef {TweenParamsOptions & TweenValues} TweenKeyValue\n */\n\n/**\n * @typedef {Array.<TweenKeyValue|TweenPropValue>} ArraySyntaxValue\n */\n\n/**\n * @typedef {TweenParamValue|ArraySyntaxValue|TweenKeyValue} TweenOptions\n */\n\n/**\n * @typedef {Partial<{to: TweenParamValue|Array.<TweenParamValue>; from: TweenParamValue|Array.<TweenParamValue>; fromTo: TweenParamValue|Array.<TweenParamValue>;}>} TweenObjectValue\n */\n\n/**\n * @typedef {Object} PercentageKeyframeOptions\n * @property {EasingParam} [ease]\n */\n\n/**\n * @typedef {Record<String, TweenParamValue>} PercentageKeyframeParams\n */\n\n/**\n * @typedef {Record<String, PercentageKeyframeParams & PercentageKeyframeOptions>} PercentageKeyframes\n */\n\n/**\n * @typedef {Array<Record<String, TweenOptions | TweenModifier | boolean> & TweenParamsOptions>} DurationKeyframes\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {PercentageKeyframes|DurationKeyframes} [keyframes]\n * @property {EasingParam} [playbackEase]\n */\n\n// TODO: Currently setting TweenModifier to the intersected Record<> makes the FunctionValue type target param any if only one parameter is set\n/**\n * @typedef {Record<String, TweenOptions | Callback<JSAnimation> | TweenModifier | boolean | PercentageKeyframes | DurationKeyframes | ScrollObserver> & TimerOptions & AnimationOptions & TweenParamsOptions & TickableCallbacks<JSAnimation> & RenderableCallbacks<JSAnimation>} AnimationParams\n */\n\n// Timeline types /////////////////////////////////////////////////////////////\n\n/**\n * @typedef {Object} TimelineOptions\n * @property {DefaultsParams} [defaults]\n * @property {EasingParam} [playbackEase]\n */\n\n/**\n * @typedef {TimerOptions & TimelineOptions & TickableCallbacks<Timeline> & RenderableCallbacks<Timeline>} TimelineParams\n */\n\n// Animatable types ///////////////////////////////////////////////////////////\n\n/**\n * @callback AnimatablePropertySetter\n * @param  {Number|Array.<Number>} to\n * @param  {Number} [duration]\n * @param  {EasingParam} [ease]\n * @return {AnimatableObject}\n */\n\n/**\n * @callback AnimatablePropertyGetter\n * @return {Number|Array.<Number>}\n */\n\n/**\n * @typedef {AnimatablePropertySetter & AnimatablePropertyGetter} AnimatableProperty\n */\n\n/**\n * @typedef {Animatable & Record<String, AnimatableProperty>} AnimatableObject\n */\n\n/**\n * @typedef {Object} AnimatablePropertyParamsOptions\n * @property {String} [unit]\n * @property {TweenParamValue} [duration]\n * @property {EasingParam} [ease]\n * @property {TweenModifier} [modifier]\n * @property {TweenComposition} [composition]\n */\n\n/**\n * @typedef {Record<String, TweenParamValue | EasingParam | TweenModifier | TweenComposition | AnimatablePropertyParamsOptions> & AnimatablePropertyParamsOptions} AnimatableParams\n */\n\n// Scope types ////////////////////////////////////////////////////////////////\n\n/**\n * @typedef {Object} ReactRef\n * @property {HTMLElement|SVGElement|null} [current]\n */\n\n/**\n * @typedef {Object} AngularRef\n * @property {HTMLElement|SVGElement} [nativeElement]\n */\n\n/**\n * @typedef {Object} ScopeParams\n * @property {DOMTargetSelector|ReactRef|AngularRef} [root]\n * @property {DefaultsParams} [defaults]\n * @property {Record<String, String>} [mediaQueries]\n */\n\n/**\n * @template T\n * @callback ScopedCallback\n * @param {Scope} scope\n * @return {T}\n */\n\n/**\n * @callback ScopeCleanupCallback\n * @param {Scope} [scope]\n */\n\n/**\n * @callback ScopeConstructorCallback\n * @param {Scope} [scope]\n * @return {ScopeCleanupCallback|void}\n */\n\n/**\n * @callback ScopeMethod\n * @param {...*} args\n * @return {ScopeCleanupCallback|void}\n */\n\n// Draggable types ////////////////////////////////////////////////////////////\n\n/**\n * @typedef {Object} DraggableAxisParam\n * @property {String} [mapTo]\n * @property {TweenModifier} [modifier]\n * @property {TweenComposition} [composition]\n * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [snap]\n */\n\n/**\n * @typedef {Object} DraggableCursorParams\n * @property {String} [onHover]\n * @property {String} [onGrab]\n */\n\n/**\n * @typedef {Object} DraggableParams\n * @property {DOMTargetSelector} [trigger]\n * @property {DOMTargetSelector|Array<Number>|((draggable: Draggable) => DOMTargetSelector|Array<Number>)} [container]\n * @property {Boolean|DraggableAxisParam} [x]\n * @property {Boolean|DraggableAxisParam} [y]\n * @property {TweenModifier} [modifier]\n * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [snap]\n * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [containerPadding]\n * @property {Number|((draggable: Draggable) => Number)} [containerFriction]\n * @property {Number|((draggable: Draggable) => Number)} [releaseContainerFriction]\n * @property {Number|((draggable: Draggable) => Number)} [dragSpeed]\n * @property {Number|((draggable: Draggable) => Number)} [scrollSpeed]\n * @property {Number|((draggable: Draggable) => Number)} [scrollThreshold]\n * @property {Number|((draggable: Draggable) => Number)} [minVelocity]\n * @property {Number|((draggable: Draggable) => Number)} [maxVelocity]\n * @property {Number|((draggable: Draggable) => Number)} [velocityMultiplier]\n * @property {Number} [releaseMass]\n * @property {Number} [releaseStiffness]\n * @property {Number} [releaseDamping]\n * @property {Boolean} [releaseDamping]\n * @property {EasingParam} [releaseEase]\n * @property {Boolean|DraggableCursorParams|((draggable: Draggable) => Boolean|DraggableCursorParams)} [cursor]\n * @property {Callback<Draggable>} [onGrab]\n * @property {Callback<Draggable>} [onDrag]\n * @property {Callback<Draggable>} [onRelease]\n * @property {Callback<Draggable>} [onUpdate]\n * @property {Callback<Draggable>} [onSettle]\n * @property {Callback<Draggable>} [onSnap]\n * @property {Callback<Draggable>} [onResize]\n * @property {Callback<Draggable>} [onAfterResize]\n */\n\n// Text types /////////////////////////////////////////////////////////////////\n\n/**\n * @typedef {Object} splitTemplateParams\n * @property {false|String} [class]\n * @property {Boolean|'hidden'|'clip'|'visible'|'scroll'|'auto'} [wrap]\n * @property {Boolean|'top'|'right'|'bottom'|'left'|'center'} [clone]\n */\n\n/**\n * @typedef {Boolean|String} SplitValue\n */\n\n/**\n * @callback SplitFunctionValue\n * @param {Node|HTMLElement} [value]\n * @return String\n */\n\n/**\n * @typedef {Object} TextSplitterParams\n * @property {SplitValue|splitTemplateParams|SplitFunctionValue} [lines]\n * @property {SplitValue|splitTemplateParams|SplitFunctionValue} [words]\n * @property {SplitValue|splitTemplateParams|SplitFunctionValue} [chars]\n * @property {Boolean} [accessible]\n * @property {Boolean} [includeSpaces]\n * @property {Boolean} [debug]\n */\n\n// SVG types //////////////////////////////////////////////////////////////////\n\n/**\n * @typedef {SVGGeometryElement & {\n *   setAttribute(name: 'draw', value: `${number} ${number}`): void;\n *   draw: `${number} ${number}`;\n * }} DrawableSVGGeometry\n */\n\n\n// Environments\n\n// TODO: Do we need to check if we're running inside a worker ?\nconst isBrowser = typeof window !== 'undefined';\n\n/** @type {Window & {AnimeJS: Array}|null} */\nconst win = isBrowser ? /** @type {Window & {AnimeJS: Array}} */(/** @type {unknown} */(window)) : null;\n\n/** @type {Document|null} */\nconst doc = isBrowser ? document : null;\n\n// Enums\n\n/** @enum {Number} */\nconst tweenTypes = {\n  OBJECT: 0,\n  ATTRIBUTE: 1,\n  CSS: 2,\n  TRANSFORM: 3,\n  CSS_VAR: 4,\n};\n\n/** @enum {Number} */\nconst valueTypes = {\n  NUMBER: 0,\n  UNIT: 1,\n  COLOR: 2,\n  COMPLEX: 3,\n};\n\n/** @enum {Number} */\nconst tickModes = {\n  NONE: 0,\n  AUTO: 1,\n  FORCE: 2,\n};\n\n/** @enum {Number} */\nconst compositionTypes = {\n  replace: 0,\n  none: 1,\n  blend: 2,\n};\n\n// Cache symbols\n\nconst isRegisteredTargetSymbol = Symbol();\nconst isDomSymbol = Symbol();\nconst isSvgSymbol = Symbol();\nconst transformsSymbol = Symbol();\nconst morphPointsSymbol = Symbol();\nconst proxyTargetSymbol = Symbol();\n\n// Numbers\n\nconst minValue = 1e-11;\nconst maxValue = 1e12;\nconst K = 1e3;\nconst maxFps = 120;\n\n// Strings\n\nconst emptyString = '';\nconst shortTransforms = /*#__PURE__*/ (() => {\n  const map = new Map();\n  map.set('x', 'translateX');\n  map.set('y', 'translateY');\n  map.set('z', 'translateZ');\n  return map;\n})();\n\nconst validTransforms = [\n  'translateX',\n  'translateY',\n  'translateZ',\n  'rotate',\n  'rotateX',\n  'rotateY',\n  'rotateZ',\n  'scale',\n  'scaleX',\n  'scaleY',\n  'scaleZ',\n  'skew',\n  'skewX',\n  'skewY',\n  'perspective',\n  'matrix',\n  'matrix3d',\n];\n\nconst transformsFragmentStrings = /*#__PURE__*/ validTransforms.reduce((a, v) => ({...a, [v]: v + '('}), {});\n\n// Functions\n\n/** @return {void} */\nconst noop = () => {};\n\n// Regex\n\nconst hexTestRgx = /(^#([\\da-f]{3}){1,2}$)|(^#([\\da-f]{4}){1,2}$)/i;\nconst rgbExecRgx = /rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/i;\nconst rgbaExecRgx = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)/i;\nconst hslExecRgx = /hsl\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*\\)/i;\nconst hslaExecRgx = /hsla\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)/i;\n// export const digitWithExponentRgx = /[-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?/g;\nconst digitWithExponentRgx = /[-+]?\\d*\\.?\\d+(?:e[-+]?\\d)?/gi;\n// export const unitsExecRgx = /^([-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?)+([a-z]+|%)$/i;\nconst unitsExecRgx = /^([-+]?\\d*\\.?\\d+(?:e[-+]?\\d+)?)([a-z]+|%)$/i;\nconst lowerCaseRgx = /([a-z])([A-Z])/g;\nconst transformsExecRgx = /(\\w+)(\\([^)]+\\)+)/g; // Match inline transforms with cacl() values, returns the value wrapped in ()\nconst relativeValuesExecRgx = /(\\*=|\\+=|-=)/;\n\n\n\n\n/** @type {DefaultsParams} */\nconst defaults = {\n  id: null,\n  keyframes: null,\n  playbackEase: null,\n  playbackRate: 1,\n  frameRate: maxFps,\n  loop: 0,\n  reversed: false,\n  alternate: false,\n  autoplay: true,\n  duration: K,\n  delay: 0,\n  loopDelay: 0,\n  ease: 'out(2)',\n  composition: compositionTypes.replace,\n  modifier: v => v,\n  onBegin: noop,\n  onBeforeUpdate: noop,\n  onUpdate: noop,\n  onLoop: noop,\n  onPause: noop,\n  onComplete: noop,\n  onRender: noop,\n};\n\nconst scope = {\n  /** @type {Scope} */\n  current: null,\n  /** @type {Document|DOMTarget} */\n  root: doc,\n};\n\nconst globals = {\n  /** @type {DefaultsParams} */\n  defaults,\n  /** @type {Number} */\n  precision: 4,\n  /** @type {Number} */\n  timeScale: 1,\n  /** @type {Number} */\n  tickThreshold: 200,\n};\n\nconst globalVersions = { version: '4.1.2', engine: null };\n\nif (isBrowser) {\n  if (!win.AnimeJS) win.AnimeJS = [];\n  win.AnimeJS.push(globalVersions);\n}\n\n// Strings\n\n/**\n * @param  {String} str\n * @return {String}\n */\nconst toLowerCase = str => str.replace(lowerCaseRgx, '$1-$2').toLowerCase();\n\n/**\n * Prioritize this method instead of regex when possible\n * @param  {String} str\n * @param  {String} sub\n * @return {Boolean}\n */\nconst stringStartsWith = (str, sub) => str.indexOf(sub) === 0;\n\n// Time\n// Note: Date.now is used instead of performance.now since it is precise enough for timings calculations, performs slightly faster and works in Node.js environement.\nconst now = Date.now;\n\n// Types checkers\n\nconst isArr = Array.isArray;\n/**@param {any} a @return {a is Record<String, any>} */\nconst isObj = a => a && a.constructor === Object;\n/**@param {any} a @return {a is Number} */\nconst isNum = a => typeof a === 'number' && !isNaN(a);\n/**@param {any} a @return {a is String} */\nconst isStr = a => typeof a === 'string';\n/**@param {any} a @return {a is Function} */\nconst isFnc = a => typeof a === 'function';\n/**@param {any} a @return {a is undefined} */\nconst isUnd = a => typeof a === 'undefined';\n/**@param {any} a @return {a is null | undefined} */\nconst isNil = a => isUnd(a) || a === null;\n/**@param {any} a @return {a is SVGElement} */\nconst isSvg = a => isBrowser && a instanceof SVGElement;\n/**@param {any} a @return {Boolean} */\nconst isHex = a => hexTestRgx.test(a);\n/**@param {any} a @return {Boolean} */\nconst isRgb = a => stringStartsWith(a, 'rgb');\n/**@param {any} a @return {Boolean} */\nconst isHsl = a => stringStartsWith(a, 'hsl');\n/**@param {any} a @return {Boolean} */\nconst isCol = a => isHex(a) || isRgb(a) || isHsl(a);\n/**@param {any} a @return {Boolean} */\nconst isKey = a => !globals.defaults.hasOwnProperty(a);\n\n// Number\n\n/**\n * @param  {Number|String} str\n * @return {Number}\n */\nconst parseNumber = str => isStr(str) ?\n  parseFloat(/** @type {String} */(str)) :\n  /** @type {Number} */(str);\n\n// Math\n\nconst pow = Math.pow;\nconst sqrt = Math.sqrt;\nconst sin = Math.sin;\nconst cos = Math.cos;\nconst abs = Math.abs;\nconst exp = Math.exp;\nconst ceil = Math.ceil;\nconst floor = Math.floor;\nconst asin = Math.asin;\nconst max = Math.max;\nconst atan2 = Math.atan2;\nconst PI = Math.PI;\nconst _round = Math.round;\n\n/**\n * @param  {Number} v\n * @param  {Number} min\n * @param  {Number} max\n * @return {Number}\n */\nconst clamp = (v, min, max) => v < min ? min : v > max ? max : v;\n\nconst powCache = {};\n\n/**\n * @param  {Number} v\n * @param  {Number} decimalLength\n * @return {Number}\n */\nconst round = (v, decimalLength) => {\n  if (decimalLength < 0) return v;\n  if (!decimalLength) return _round(v);\n  let p = powCache[decimalLength];\n  if (!p) p = powCache[decimalLength] = 10 ** decimalLength;\n  return _round(v * p) / p;\n};\n\n/**\n * @param  {Number} v\n * @param  {Number|Array<Number>} increment\n * @return {Number}\n */\nconst snap = (v, increment) => isArr(increment) ? increment.reduce((closest, cv) => (abs(cv - v) < abs(closest - v) ? cv : closest)) : increment ? _round(v / increment) * increment : v;\n\n/**\n * @param  {Number} start\n * @param  {Number} end\n * @param  {Number} progress\n * @return {Number}\n */\nconst interpolate = (start, end, progress) => start + (end - start) * progress;\n\n/**\n * @param  {Number} min\n * @param  {Number} max\n * @param  {Number} [decimalLength]\n * @return {Number}\n */\nconst random = (min, max, decimalLength) => { const m = 10 ** (decimalLength || 0); return floor((Math.random() * (max - min + (1 / m)) + min) * m) / m };\n\n/**\n * Adapted from https://bost.ocks.org/mike/shuffle/\n * @param  {Array} items\n * @return {Array}\n */\nconst shuffle = items => {\n  let m = items.length, t, i;\n  while (m) { i = random(0, --m); t = items[m]; items[m] = items[i]; items[i] = t; }\n  return items;\n};\n\n/**\n * @param  {Number} v\n * @return {Number}\n */\nconst clampInfinity = v => v === Infinity ? maxValue : v === -Infinity ? -1e12 : v;\n\n/**\n * @param  {Number} v\n * @return {Number}\n */\nconst normalizeTime = v => v <= minValue ? minValue : clampInfinity(round(v, 11));\n\n// Arrays\n\n/**\n * @template T\n * @param {T[]} a\n * @return {T[]}\n */\nconst cloneArray = a => isArr(a) ? [ ...a ] : a;\n\n// Objects\n\n/**\n * @template T\n * @template U\n * @param {T} o1\n * @param {U} o2\n * @return {T & U}\n */\nconst mergeObjects = (o1, o2) => {\n  const merged = /** @type {T & U} */({ ...o1 });\n  for (let p in o2) {\n    const o1p = /** @type {T & U} */(o1)[p];\n    merged[p] = isUnd(o1p) ? /** @type {T & U} */(o2)[p] : o1p;\n  }  return merged;\n};\n\n// Linked lists\n\n/**\n * @param {Object} parent\n * @param {Function} callback\n * @param {Boolean} [reverse]\n * @param {String} [prevProp]\n * @param {String} [nextProp]\n * @return {void}\n */\nconst forEachChildren = (parent, callback, reverse, prevProp = '_prev', nextProp = '_next') => {\n  let next = parent._head;\n  let adjustedNextProp = nextProp;\n  if (reverse) {\n    next = parent._tail;\n    adjustedNextProp = prevProp;\n  }\n  while (next) {\n    const currentNext = next[adjustedNextProp];\n    callback(next);\n    next = currentNext;\n  }\n};\n\n/**\n * @param  {Object} parent\n * @param  {Object} child\n * @param  {String} [prevProp]\n * @param  {String} [nextProp]\n * @return {void}\n */\nconst removeChild = (parent, child, prevProp = '_prev', nextProp = '_next') => {\n  const prev = child[prevProp];\n  const next = child[nextProp];\n  prev ? prev[nextProp] = next : parent._head = next;\n  next ? next[prevProp] = prev : parent._tail = prev;\n  child[prevProp] = null;\n  child[nextProp] = null;\n};\n\n/**\n * @param  {Object} parent\n * @param  {Object} child\n * @param  {Function} [sortMethod]\n * @param  {String} prevProp\n * @param  {String} nextProp\n * @return {void}\n */\nconst addChild = (parent, child, sortMethod, prevProp = '_prev', nextProp = '_next') => {\n  let prev = parent._tail;\n  while (prev && sortMethod && sortMethod(prev, child)) prev = prev[prevProp];\n  const next = prev ? prev[nextProp] : parent._head;\n  prev ? prev[nextProp] = child : parent._head = child;\n  next ? next[prevProp] = child : parent._tail = child;\n  child[prevProp] = prev;\n  child[nextProp] = next;\n};\n\n/**\n * @param  {(...args: any[]) => Tickable | ((...args: any[]) => void)} constructor\n * @return {(...args: any[]) => Tickable | ((...args: any[]) => void)}\n */\nconst createRefreshable = constructor => {\n  /** @type {Tickable} */\n  let tracked;\n  return (...args) => {\n    let currentIteration, currentIterationProgress, reversed, alternate;\n    if (tracked) {\n      currentIteration = tracked.currentIteration;\n      currentIterationProgress = tracked.iterationProgress;\n      reversed = tracked.reversed;\n      alternate = tracked._alternate;\n      tracked.revert();\n    }\n    const cleanup = constructor(...args);\n    if (cleanup && !isFnc(cleanup) && cleanup.revert) tracked = cleanup;\n    if (!isUnd(currentIterationProgress)) {\n      /** @type {Tickable} */(tracked).currentIteration = currentIteration;\n      /** @type {Tickable} */(tracked).iterationProgress = (alternate ? !(currentIteration % 2) ? reversed : !reversed : reversed) ? 1 - currentIterationProgress : currentIterationProgress;\n    }\n    return cleanup || noop;\n  }\n};\n\n/*\n * Base class to control framerate and playback rate.\n * Inherited by Engine, Timer, Animation and Timeline.\n */\nclass Clock {\n\n  /** @param {Number} [initTime] */\n  constructor(initTime = 0) {\n    /** @type {Number} */\n    this.deltaTime = 0;\n    /** @type {Number} */\n    this._currentTime = initTime;\n    /** @type {Number} */\n    this._elapsedTime = initTime;\n    /** @type {Number} */\n    this._startTime = initTime;\n    /** @type {Number} */\n    this._lastTime = initTime;\n    /** @type {Number} */\n    this._scheduledTime = 0;\n    /** @type {Number} */\n    this._frameDuration = round(K / maxFps, 0);\n    /** @type {Number} */\n    this._fps = maxFps;\n    /** @type {Number} */\n    this._speed = 1;\n    /** @type {Boolean} */\n    this._hasChildren = false;\n    /** @type {Tickable|Tween} */\n    this._head = null;\n    /** @type {Tickable|Tween} */\n    this._tail = null;\n  }\n\n  get fps() {\n    return this._fps;\n  }\n\n  set fps(frameRate) {\n    const previousFrameDuration = this._frameDuration;\n    const fr = +frameRate;\n    const fps = fr < minValue ? minValue : fr;\n    const frameDuration = round(K / fps, 0);\n    this._fps = fps;\n    this._frameDuration = frameDuration;\n    this._scheduledTime += frameDuration - previousFrameDuration;\n  }\n\n  get speed() {\n    return this._speed;\n  }\n\n  set speed(playbackRate) {\n    const pbr = +playbackRate;\n    this._speed = pbr < minValue ? minValue : pbr;\n  }\n\n  /**\n   * @param  {Number} time\n   * @return {tickModes}\n   */\n  requestTick(time) {\n    const scheduledTime = this._scheduledTime;\n    const elapsedTime = this._elapsedTime;\n    this._elapsedTime += (time - elapsedTime);\n    // If the elapsed time is lower than the scheduled time\n    // this means not enough time has passed to hit one frameDuration\n    // so skip that frame\n    if (elapsedTime < scheduledTime) return tickModes.NONE;\n    const frameDuration = this._frameDuration;\n    const frameDelta = elapsedTime - scheduledTime;\n    // Ensures that _scheduledTime progresses in steps of at least 1 frameDuration.\n    // Skips ahead if the actual elapsed time is higher.\n    this._scheduledTime += frameDelta < frameDuration ? frameDuration : frameDelta;\n    return tickModes.AUTO;\n  }\n\n  /**\n   * @param  {Number} time\n   * @return {Number}\n   */\n  computeDeltaTime(time) {\n    const delta = time - this._lastTime;\n    this.deltaTime = delta;\n    this._lastTime = time;\n    return delta;\n  }\n\n}\n\n\n\n\n/**\n * @param  {Tickable} tickable\n * @param  {Number} time\n * @param  {Number} muteCallbacks\n * @param  {Number} internalRender\n * @param  {tickModes} tickMode\n * @return {Number}\n */\nconst render = (tickable, time, muteCallbacks, internalRender, tickMode) => {\n\n  const parent = tickable.parent;\n  const duration = tickable.duration;\n  const completed = tickable.completed;\n  const iterationDuration = tickable.iterationDuration;\n  const iterationCount = tickable.iterationCount;\n  const _currentIteration = tickable._currentIteration;\n  const _loopDelay = tickable._loopDelay;\n  const _reversed = tickable._reversed;\n  const _alternate = tickable._alternate;\n  const _hasChildren = tickable._hasChildren;\n  const tickableDelay = tickable._delay;\n  const tickablePrevAbsoluteTime = tickable._currentTime; // TODO: rename ._currentTime to ._absoluteCurrentTime\n\n  const tickableEndTime = tickableDelay + iterationDuration;\n  const tickableAbsoluteTime = time - tickableDelay;\n  const tickablePrevTime = clamp(tickablePrevAbsoluteTime, -tickableDelay, duration);\n  const tickableCurrentTime = clamp(tickableAbsoluteTime, -tickableDelay, duration);\n  const deltaTime = tickableAbsoluteTime - tickablePrevAbsoluteTime;\n  const isCurrentTimeAboveZero = tickableCurrentTime > 0;\n  const isCurrentTimeEqualOrAboveDuration = tickableCurrentTime >= duration;\n  const isSetter = duration <= minValue;\n  const forcedTick = tickMode === tickModes.FORCE;\n\n  let isOdd = 0;\n  let iterationElapsedTime = tickableAbsoluteTime;\n  // Render checks\n  // Used to also check if the children have rendered in order to trigger the onRender callback on the parent timer\n  let hasRendered = 0;\n\n  // Execute the \"expensive\" iterations calculations only when necessary\n  if (iterationCount > 1) {\n    // bitwise NOT operator seems to be generally faster than Math.floor() across browsers\n    const currentIteration = ~~(tickableCurrentTime / (iterationDuration + (isCurrentTimeEqualOrAboveDuration ? 0 : _loopDelay)));\n    tickable._currentIteration = clamp(currentIteration, 0, iterationCount);\n    // Prevent the iteration count to go above the max iterations when reaching the end of the animation\n    if (isCurrentTimeEqualOrAboveDuration) tickable._currentIteration--;\n    isOdd = tickable._currentIteration % 2;\n    iterationElapsedTime = tickableCurrentTime % (iterationDuration + _loopDelay) || 0;\n  }\n\n  // Checks if exactly one of _reversed and (_alternate && isOdd) is true\n  const isReversed = _reversed ^ (_alternate && isOdd);\n  const _ease = /** @type {Renderable} */(tickable)._ease;\n  let iterationTime = isCurrentTimeEqualOrAboveDuration ? isReversed ? 0 : duration : isReversed ? iterationDuration - iterationElapsedTime : iterationElapsedTime;\n  if (_ease) iterationTime = iterationDuration * _ease(iterationTime / iterationDuration) || 0;\n  const isRunningBackwards = (parent ? parent.backwards : tickableAbsoluteTime < tickablePrevAbsoluteTime) ? !isReversed : !!isReversed;\n\n  tickable._currentTime = tickableAbsoluteTime;\n  tickable._iterationTime = iterationTime;\n  tickable.backwards = isRunningBackwards;\n\n  if (isCurrentTimeAboveZero && !tickable.began) {\n    tickable.began = true;\n    if (!muteCallbacks && !(parent && (isRunningBackwards || !parent.began))) {\n      tickable.onBegin(/** @type {CallbackArgument} */(tickable));\n    }\n  } else if (tickableAbsoluteTime <= 0) {\n    tickable.began = false;\n  }\n\n  // Only triggers onLoop for tickable without children, otherwise call the the onLoop callback in the tick function\n  // Make sure to trigger the onLoop before rendering to allow .refresh() to pickup the current values\n  if (!muteCallbacks && !_hasChildren && isCurrentTimeAboveZero && tickable._currentIteration !== _currentIteration) {\n    tickable.onLoop(/** @type {CallbackArgument} */(tickable));\n  }\n\n  if (\n    forcedTick ||\n    tickMode === tickModes.AUTO && (\n      time >= tickableDelay && time <= tickableEndTime || // Normal render\n      time <= tickableDelay && tickablePrevTime > tickableDelay || // Playhead is before the animation start time so make sure the animation is at its initial state\n      time >= tickableEndTime && tickablePrevTime !== duration // Playhead is after the animation end time so make sure the animation is at its end state\n    ) ||\n    iterationTime >= tickableEndTime && tickablePrevTime !== duration ||\n    iterationTime <= tickableDelay && tickablePrevTime > 0 ||\n    time <= tickablePrevTime && tickablePrevTime === duration && completed || // Force a render if a seek occurs on an completed animation\n    isCurrentTimeEqualOrAboveDuration && !completed && isSetter // This prevents 0 duration tickables to be skipped\n  ) {\n\n    if (isCurrentTimeAboveZero) {\n      // Trigger onUpdate callback before rendering\n      tickable.computeDeltaTime(tickablePrevTime);\n      if (!muteCallbacks) tickable.onBeforeUpdate(/** @type {CallbackArgument} */(tickable));\n    }\n\n    // Start tweens rendering\n    if (!_hasChildren) {\n\n      // Time has jumped more than globals.tickThreshold so consider this tick manual\n      const forcedRender = forcedTick || (isRunningBackwards ? deltaTime * -1 : deltaTime) >= globals.tickThreshold;\n      const absoluteTime = tickable._offset + (parent ? parent._offset : 0) + tickableDelay + iterationTime;\n\n      // Only Animation can have tweens, Timer returns undefined\n      let tween = /** @type {Tween} */(/** @type {JSAnimation} */(tickable)._head);\n      let tweenTarget;\n      let tweenStyle;\n      let tweenTargetTransforms;\n      let tweenTargetTransformsProperties;\n      let tweenTransformsNeedUpdate = 0;\n\n      while (tween) {\n\n        const tweenComposition = tween._composition;\n        const tweenCurrentTime = tween._currentTime;\n        const tweenChangeDuration = tween._changeDuration;\n        const tweenAbsEndTime = tween._absoluteStartTime + tween._changeDuration;\n        const tweenNextRep = tween._nextRep;\n        const tweenPrevRep = tween._prevRep;\n        const tweenHasComposition = tweenComposition !== compositionTypes.none;\n\n        if ((forcedRender || (\n            (tweenCurrentTime !== tweenChangeDuration || absoluteTime <= tweenAbsEndTime + (tweenNextRep ? tweenNextRep._delay : 0)) &&\n            (tweenCurrentTime !== 0 || absoluteTime >= tween._absoluteStartTime)\n          )) && (!tweenHasComposition || (\n            !tween._isOverridden &&\n            (!tween._isOverlapped || absoluteTime <= tweenAbsEndTime) &&\n            (!tweenNextRep || (tweenNextRep._isOverridden || absoluteTime <= tweenNextRep._absoluteStartTime)) &&\n            (!tweenPrevRep || (tweenPrevRep._isOverridden || (absoluteTime >= (tweenPrevRep._absoluteStartTime + tweenPrevRep._changeDuration) + tween._delay)))\n          ))\n        ) {\n\n          const tweenNewTime = tween._currentTime = clamp(iterationTime - tween._startTime, 0, tweenChangeDuration);\n          const tweenProgress = tween._ease(tweenNewTime / tween._updateDuration);\n          const tweenModifier = tween._modifier;\n          const tweenValueType = tween._valueType;\n          const tweenType = tween._tweenType;\n          const tweenIsObject = tweenType === tweenTypes.OBJECT;\n          const tweenIsNumber = tweenValueType === valueTypes.NUMBER;\n          // Only round the in-between frames values if the final value is a string\n          const tweenPrecision = (tweenIsNumber && tweenIsObject) || tweenProgress === 0 || tweenProgress === 1 ? -1 : globals.precision;\n\n          // Recompose tween value\n          /** @type {String|Number} */\n          let value;\n          /** @type {Number} */\n          let number;\n\n          if (tweenIsNumber) {\n            value = number = /** @type {Number} */(tweenModifier(round(interpolate(tween._fromNumber, tween._toNumber,  tweenProgress), tweenPrecision )));\n          } else if (tweenValueType === valueTypes.UNIT) {\n            // Rounding the values speed up string composition\n            number = /** @type {Number} */(tweenModifier(round(interpolate(tween._fromNumber, tween._toNumber,  tweenProgress), tweenPrecision)));\n            value = `${number}${tween._unit}`;\n          } else if (tweenValueType === valueTypes.COLOR) {\n            const fn = tween._fromNumbers;\n            const tn = tween._toNumbers;\n            const r = round(clamp(/** @type {Number} */(tweenModifier(interpolate(fn[0], tn[0], tweenProgress))), 0, 255), 0);\n            const g = round(clamp(/** @type {Number} */(tweenModifier(interpolate(fn[1], tn[1], tweenProgress))), 0, 255), 0);\n            const b = round(clamp(/** @type {Number} */(tweenModifier(interpolate(fn[2], tn[2], tweenProgress))), 0, 255), 0);\n            const a = clamp(/** @type {Number} */(tweenModifier(round(interpolate(fn[3], tn[3], tweenProgress), tweenPrecision))), 0, 1);\n            value = `rgba(${r},${g},${b},${a})`;\n            if (tweenHasComposition) {\n              const ns = tween._numbers;\n              ns[0] = r;\n              ns[1] = g;\n              ns[2] = b;\n              ns[3] = a;\n            }\n          } else if (tweenValueType === valueTypes.COMPLEX) {\n            value = tween._strings[0];\n            for (let j = 0, l = tween._toNumbers.length; j < l; j++) {\n              const n = /** @type {Number} */(tweenModifier(round(interpolate(tween._fromNumbers[j], tween._toNumbers[j], tweenProgress), tweenPrecision)));\n              const s = tween._strings[j + 1];\n              value += `${s ? n + s : n}`;\n              if (tweenHasComposition) {\n                tween._numbers[j] = n;\n              }\n            }\n          }\n\n          // For additive tweens and Animatables\n          if (tweenHasComposition) {\n            tween._number = number;\n          }\n\n          if (!internalRender && tweenComposition !== compositionTypes.blend) {\n\n            const tweenProperty = tween.property;\n            tweenTarget = tween.target;\n\n            if (tweenIsObject) {\n              tweenTarget[tweenProperty] = value;\n            } else if (tweenType === tweenTypes.ATTRIBUTE) {\n              /** @type {DOMTarget} */(tweenTarget).setAttribute(tweenProperty, /** @type {String} */(value));\n            } else {\n              tweenStyle = /** @type {DOMTarget} */(tweenTarget).style;\n              if (tweenType === tweenTypes.TRANSFORM) {\n                if (tweenTarget !== tweenTargetTransforms) {\n                  tweenTargetTransforms = tweenTarget;\n                  // NOTE: Referencing the cachedTransforms in the tween property directly can be a little bit faster but appears to increase memory usage.\n                  tweenTargetTransformsProperties = tweenTarget[transformsSymbol];\n                }\n                tweenTargetTransformsProperties[tweenProperty] = value;\n                tweenTransformsNeedUpdate = 1;\n              } else if (tweenType === tweenTypes.CSS) {\n                tweenStyle[tweenProperty] = value;\n              } else if (tweenType === tweenTypes.CSS_VAR) {\n                tweenStyle.setProperty(tweenProperty,/** @type {String} */(value));\n              }\n            }\n\n            if (isCurrentTimeAboveZero) hasRendered = 1;\n\n          } else {\n            // Used for composing timeline tweens without having to do a real render\n            tween._value = value;\n          }\n\n        }\n\n        // NOTE: Possible improvement: Use translate(x,y) / translate3d(x,y,z) syntax\n        // to reduce memory usage on string composition\n        if (tweenTransformsNeedUpdate && tween._renderTransforms) {\n          let str = emptyString;\n          for (let key in tweenTargetTransformsProperties) {\n            str += `${transformsFragmentStrings[key]}${tweenTargetTransformsProperties[key]}) `;\n          }\n          tweenStyle.transform = str;\n          tweenTransformsNeedUpdate = 0;\n        }\n\n        tween = tween._next;\n      }\n\n      if (!muteCallbacks && hasRendered) {\n        /** @type {JSAnimation} */(tickable).onRender(/** @type {JSAnimation} */(tickable));\n      }\n    }\n\n    if (!muteCallbacks && isCurrentTimeAboveZero) {\n      tickable.onUpdate(/** @type {CallbackArgument} */(tickable));\n    }\n\n  }\n\n  // End tweens rendering\n\n  // Handle setters on timeline differently and allow re-trigering the onComplete callback when seeking backwards\n  if (parent && isSetter) {\n    if (!muteCallbacks && (\n      (parent.began && !isRunningBackwards && tickableAbsoluteTime >= duration && !completed) ||\n      (isRunningBackwards && tickableAbsoluteTime <= minValue && completed)\n    )) {\n      tickable.onComplete(/** @type {CallbackArgument} */(tickable));\n      tickable.completed = !isRunningBackwards;\n    }\n  // If currentTime is both above 0 and at least equals to duration, handles normal onComplete or infinite loops\n  } else if (isCurrentTimeAboveZero && isCurrentTimeEqualOrAboveDuration) {\n    if (iterationCount === Infinity) {\n      // Offset the tickable _startTime with its duration to reset _currentTime to 0 and continue the infinite timer\n      tickable._startTime += tickable.duration;\n    } else if (tickable._currentIteration >= iterationCount - 1) {\n      // By setting paused to true, we tell the engine loop to not render this tickable and removes it from the list on the next tick\n      tickable.paused = true;\n      if (!completed && !_hasChildren) {\n        // If the tickable has children, triggers onComplete() only when all children have completed in the tick function\n        tickable.completed = true;\n        if (!muteCallbacks && !(parent && (isRunningBackwards || !parent.began))) {\n          tickable.onComplete(/** @type {CallbackArgument} */(tickable));\n          tickable._resolve(/** @type {CallbackArgument} */(tickable));\n        }\n      }\n    }\n  // Otherwise set the completed flag to false\n  } else {\n    tickable.completed = false;\n  }\n\n  // NOTE: hasRendered * direction (negative for backwards) this way we can remove the tickable.backwards property completly ?\n  return hasRendered;\n};\n\n/**\n * @param  {Tickable} tickable\n * @param  {Number} time\n * @param  {Number} muteCallbacks\n * @param  {Number} internalRender\n * @param  {Number} tickMode\n * @return {void}\n */\nconst tick = (tickable, time, muteCallbacks, internalRender, tickMode) => {\n  const _currentIteration = tickable._currentIteration;\n  render(tickable, time, muteCallbacks, internalRender, tickMode);\n  if (tickable._hasChildren) {\n    const tl = /** @type {Timeline} */(tickable);\n    const tlIsRunningBackwards = tl.backwards;\n    const tlChildrenTime = internalRender ? time : tl._iterationTime;\n    const tlCildrenTickTime = now();\n\n    let tlChildrenHasRendered = 0;\n    let tlChildrenHaveCompleted = true;\n\n    // If the timeline has looped forward, we need to manually triggers children skipped callbacks\n    if (!internalRender && tl._currentIteration !== _currentIteration) {\n      const tlIterationDuration = tl.iterationDuration;\n      forEachChildren(tl, (/** @type {JSAnimation} */child) => {\n        if (!tlIsRunningBackwards) {\n          // Force an internal render to trigger the callbacks if the child has not completed on loop\n          if (!child.completed && !child.backwards && child._currentTime < child.iterationDuration) {\n            render(child, tlIterationDuration, muteCallbacks, 1, tickModes.FORCE);\n          }\n          // Reset their began and completed flags to allow retrigering callbacks on the next iteration\n          child.began = false;\n          child.completed = false;\n        } else {\n          const childDuration = child.duration;\n          const childStartTime = child._offset + child._delay;\n          const childEndTime = childStartTime + childDuration;\n          // Triggers the onComplete callback on reverse for children on the edges of the timeline\n          if (!muteCallbacks && childDuration <= minValue && (!childStartTime || childEndTime === tlIterationDuration)) {\n            child.onComplete(child);\n          }\n        }\n      });\n      if (!muteCallbacks) tl.onLoop(/** @type {CallbackArgument} */(tl));\n    }\n\n    forEachChildren(tl, (/** @type {JSAnimation} */child) => {\n      const childTime = round((tlChildrenTime - child._offset) * child._speed, 12); // Rounding is needed when using seconds\n      const childTickMode = child._fps < tl._fps ? child.requestTick(tlCildrenTickTime) : tickMode;\n      tlChildrenHasRendered += render(child, childTime, muteCallbacks, internalRender, childTickMode);\n      if (!child.completed && tlChildrenHaveCompleted) tlChildrenHaveCompleted = false;\n    }, tlIsRunningBackwards);\n\n    // Renders on timeline are triggered by its children so it needs to be set after rendering the children\n    if (!muteCallbacks && tlChildrenHasRendered) tl.onRender(/** @type {CallbackArgument} */(tl));\n\n    // Triggers the timeline onComplete() once all chindren all completed and the current time has reached the end\n    if ((tlChildrenHaveCompleted || tlIsRunningBackwards) && tl._currentTime >= tl.duration) {\n      // Make sure the paused flag is false in case it has been skipped in the render function\n      tl.paused = true;\n      if (!tl.completed) {\n        tl.completed = true;\n        if (!muteCallbacks) {\n          tl.onComplete(/** @type {CallbackArgument} */(tl));\n          tl._resolve(/** @type {CallbackArgument} */(tl));\n        }\n      }\n    }\n  }\n};\n\n\n\n\nconst additive = {\n  animation: null,\n  update: noop,\n};\n\n/**\n * @typedef AdditiveAnimation\n * @property {Number} duration\n * @property {Number} _offset\n * @property {Number} _delay\n * @property {Tween} _head\n * @property {Tween} _tail\n */\n\n/**\n * @param  {TweenAdditiveLookups} lookups\n * @return {AdditiveAnimation}\n */\nconst addAdditiveAnimation = lookups => {\n  let animation = additive.animation;\n  if (!animation) {\n    animation = {\n      duration: minValue,\n      computeDeltaTime: noop,\n      _offset: 0,\n      _delay: 0,\n      _head: null,\n      _tail: null,\n    };\n    additive.animation = animation;\n    additive.update = () => {\n      lookups.forEach(propertyAnimation => {\n        for (let propertyName in propertyAnimation) {\n          const tweens = propertyAnimation[propertyName];\n          const lookupTween = tweens._head;\n          if (lookupTween) {\n            const valueType = lookupTween._valueType;\n            const additiveValues = valueType === valueTypes.COMPLEX || valueType === valueTypes.COLOR ? cloneArray(lookupTween._fromNumbers) : null;\n            let additiveValue = lookupTween._fromNumber;\n            let tween = tweens._tail;\n            while (tween && tween !== lookupTween) {\n              if (additiveValues) {\n                for (let i = 0, l = tween._numbers.length; i < l; i++) additiveValues[i] += tween._numbers[i];\n              } else {\n                additiveValue += tween._number;\n              }\n              tween = tween._prevAdd;\n            }\n            lookupTween._toNumber = additiveValue;\n            lookupTween._toNumbers = additiveValues;\n          }\n        }\n      });\n      // TODO: Avoid polymorphism here, idealy the additive animation should be a regular animation with a higher priority in the render loop\n      render(animation, 1, 1, 0, tickModes.FORCE);\n    };\n  }\n  return animation;\n};\n\nconst engineTickMethod = /*#__PURE__*/ (() => isBrowser ? requestAnimationFrame : setImmediate)();\nconst engineCancelMethod = /*#__PURE__*/ (() => isBrowser ? cancelAnimationFrame : clearImmediate)();\n\nclass Engine extends Clock {\n\n  /** @param {Number} [initTime] */\n  constructor(initTime) {\n    super(initTime);\n    this.useDefaultMainLoop = true;\n    this.pauseOnDocumentHidden = true;\n    /** @type {DefaultsParams} */\n    this.defaults = defaults;\n    this.paused = isBrowser && doc.hidden ? true  : false;\n    /** @type {Number|NodeJS.Immediate} */\n    this.reqId = null;\n  }\n\n  update() {\n    const time = this._currentTime = now();\n    if (this.requestTick(time)) {\n      this.computeDeltaTime(time);\n      const engineSpeed = this._speed;\n      const engineFps = this._fps;\n      let activeTickable = /** @type {Tickable} */(this._head);\n      while (activeTickable) {\n        const nextTickable = activeTickable._next;\n        if (!activeTickable.paused) {\n          tick(\n            activeTickable,\n            (time - activeTickable._startTime) * activeTickable._speed * engineSpeed,\n            0, // !muteCallbacks\n            0, // !internalRender\n            activeTickable._fps < engineFps ? activeTickable.requestTick(time) : tickModes.AUTO\n          );\n        } else {\n          removeChild(this, activeTickable);\n          this._hasChildren = !!this._tail;\n          activeTickable._running = false;\n          if (activeTickable.completed && !activeTickable._cancelled) {\n            activeTickable.cancel();\n          }\n        }\n        activeTickable = nextTickable;\n      }\n      additive.update();\n    }\n  }\n\n  wake() {\n    if (this.useDefaultMainLoop && !this.reqId && !this.paused) {\n      this.reqId = engineTickMethod(tickEngine);\n    }\n    return this;\n  }\n\n  pause() {\n    this.paused = true;\n    return killEngine();\n  }\n\n  resume() {\n    if (!this.paused) return;\n    this.paused = false;\n    forEachChildren(this, (/** @type {Tickable} */child) => child.resetTime());\n    return this.wake();\n  }\n\n  // Getter and setter for speed\n  get speed() {\n    return this._speed * (globals.timeScale === 1 ? 1 : K);\n  }\n\n  set speed(playbackRate) {\n    this._speed = playbackRate * globals.timeScale;\n    forEachChildren(this, (/** @type {Tickable} */child) => child.speed = child._speed);\n  }\n\n  // Getter and setter for timeUnit\n  get timeUnit() {\n    return globals.timeScale === 1 ? 'ms' : 's';\n  };\n\n  set timeUnit(unit) {\n    const secondsScale = 0.001;\n    const isSecond = unit === 's';\n    const newScale = isSecond ? secondsScale : 1;\n    if (globals.timeScale !== newScale) {\n      globals.timeScale = newScale;\n      globals.tickThreshold = 200 * newScale;\n      const scaleFactor = isSecond ? secondsScale : K;\n      /** @type {Number} */\n      (this.defaults.duration) *= scaleFactor;\n      this._speed *= scaleFactor;\n    }\n  }\n\n  // Getter and setter for precision\n  get precision() {\n    return globals.precision;\n  }\n\n  set precision(precision) {\n    globals.precision = precision;\n  }\n\n}\nconst engine = /*#__PURE__*/(() => {\n  const engine = new Engine(now());\n  if (isBrowser) {\n    globalVersions.engine = engine;\n    doc.addEventListener('visibilitychange', () => {\n      if (!engine.pauseOnDocumentHidden) return;\n      doc.hidden ? engine.pause() : engine.resume();\n    });\n  }\n  return engine;\n})();\n\n\nconst tickEngine = () => {\n  if (engine._head) {\n    engine.reqId = engineTickMethod(tickEngine);\n    engine.update();\n  } else {\n    engine.reqId = 0;\n  }\n};\n\nconst killEngine = () => {\n  engineCancelMethod(/** @type {NodeJS.Immediate & Number} */(engine.reqId));\n  engine.reqId = 0;\n  return engine;\n};\n\n\n\n\n/**\n * @param  {DOMTarget} target\n * @param  {String} propName\n * @param  {Object} animationInlineStyles\n * @return {String}\n */\nconst parseInlineTransforms = (target, propName, animationInlineStyles) => {\n  const inlineTransforms = target.style.transform;\n  let inlinedStylesPropertyValue;\n  if (inlineTransforms) {\n    const cachedTransforms = target[transformsSymbol];\n    let t; while (t = transformsExecRgx.exec(inlineTransforms)) {\n      const inlinePropertyName = t[1];\n      // const inlinePropertyValue = t[2];\n      const inlinePropertyValue = t[2].slice(1, -1);\n      cachedTransforms[inlinePropertyName] = inlinePropertyValue;\n      if (inlinePropertyName === propName) {\n        inlinedStylesPropertyValue = inlinePropertyValue;\n        // Store the new parsed inline styles if animationInlineStyles is provided\n        if (animationInlineStyles) {\n          animationInlineStyles[propName] = inlinePropertyValue;\n        }\n      }\n    }\n  }\n  return inlineTransforms && !isUnd(inlinedStylesPropertyValue) ? inlinedStylesPropertyValue :\n    stringStartsWith(propName, 'scale') ? '1' :\n    stringStartsWith(propName, 'rotate') || stringStartsWith(propName, 'skew') ? '0deg' : '0px';\n};\n\n\n\n\n/**\n * @param  {DOMTargetsParam|TargetsParam} v\n * @return {NodeList|HTMLCollection}\n */\nfunction getNodeList(v) {\n  const n = isStr(v) ? scope.root.querySelectorAll(v) : v;\n  if (n instanceof NodeList || n instanceof HTMLCollection) return n;\n}\n\n/**\n * @overload\n * @param  {DOMTargetsParam} targets\n * @return {DOMTargetsArray}\n *\n * @overload\n * @param  {JSTargetsParam} targets\n * @return {JSTargetsArray}\n *\n * @overload\n * @param  {TargetsParam} targets\n * @return {TargetsArray}\n *\n * @param  {DOMTargetsParam|JSTargetsParam|TargetsParam} targets\n */\nfunction parseTargets(targets) {\n  if (isNil(targets)) return /** @type {TargetsArray} */([]);\n  if (isArr(targets)) {\n    const flattened = targets.flat(Infinity);\n    /** @type {TargetsArray} */\n    const parsed = [];\n    for (let i = 0, l = flattened.length; i < l; i++) {\n      const item = flattened[i];\n      if (!isNil(item)) {\n        const nodeList = getNodeList(item);\n        if (nodeList) {\n          for (let j = 0, jl = nodeList.length; j < jl; j++) {\n            const subItem = nodeList[j];\n            if (!isNil(subItem)) {\n              let isDuplicate = false;\n              for (let k = 0, kl = parsed.length; k < kl; k++) {\n                if (parsed[k] === subItem) {\n                  isDuplicate = true;\n                  break;\n                }\n              }\n              if (!isDuplicate) {\n                parsed.push(subItem);\n              }\n            }\n          }\n        } else {\n          let isDuplicate = false;\n          for (let j = 0, jl = parsed.length; j < jl; j++) {\n            if (parsed[j] === item) {\n              isDuplicate = true;\n              break;\n            }\n          }\n          if (!isDuplicate) {\n            parsed.push(item);\n          }\n        }\n      }\n    }\n    return parsed;\n  }\n  if (!isBrowser) return /** @type {JSTargetsArray} */([targets]);\n  const nodeList = getNodeList(targets);\n  if (nodeList) return /** @type {DOMTargetsArray} */(Array.from(nodeList));\n  return /** @type {TargetsArray} */([targets]);\n}\n\n/**\n * @overload\n * @param  {DOMTargetsParam} targets\n * @return {DOMTargetsArray}\n *\n * @overload\n * @param  {JSTargetsParam} targets\n * @return {JSTargetsArray}\n *\n * @overload\n * @param  {TargetsParam} targets\n * @return {TargetsArray}\n *\n * @param  {DOMTargetsParam|JSTargetsParam|TargetsParam} targets\n */\nfunction registerTargets(targets) {\n  const parsedTargetsArray = parseTargets(targets);\n  const parsedTargetsLength = parsedTargetsArray.length;\n  if (parsedTargetsLength) {\n    for (let i = 0; i < parsedTargetsLength; i++) {\n      const target = parsedTargetsArray[i];\n      if (!target[isRegisteredTargetSymbol]) {\n        target[isRegisteredTargetSymbol] = true;\n        const isSvgType = isSvg(target);\n        const isDom = /** @type {DOMTarget} */(target).nodeType || isSvgType;\n        if (isDom) {\n          target[isDomSymbol] = true;\n          target[isSvgSymbol] = isSvgType;\n          target[transformsSymbol] = {};\n        }\n      }\n    }\n  }\n  return parsedTargetsArray;\n}\n\n\n\n\n/**\n * @param  {TargetsParam} path\n * @return {SVGGeometryElement|undefined}\n */\nconst getPath = path => {\n  const parsedTargets = parseTargets(path);\n  const $parsedSvg = /** @type {SVGGeometryElement} */(parsedTargets[0]);\n  if (!$parsedSvg || !isSvg($parsedSvg)) return;\n  return $parsedSvg;\n};\n\n/**\n * @param  {TargetsParam} path2\n * @param  {Number} [precision]\n * @return {FunctionValue}\n */\nconst morphTo = (path2, precision = .33) => ($path1) => {\n  const $path2 = /** @type {SVGGeometryElement} */(getPath(path2));\n  if (!$path2) return;\n  const isPath = $path1.tagName === 'path';\n  const separator = isPath ? ' ' : ',';\n  const previousPoints = $path1[morphPointsSymbol];\n  if (previousPoints) $path1.setAttribute(isPath ? 'd' : 'points', previousPoints);\n\n  let v1 = '', v2 = '';\n\n  if (!precision) {\n    v1 = $path1.getAttribute(isPath ? 'd' : 'points');\n    v2 = $path2.getAttribute(isPath ? 'd' : 'points');\n  } else {\n    const length1 = /** @type {SVGGeometryElement} */($path1).getTotalLength();\n    const length2 = $path2.getTotalLength();\n    const maxPoints = Math.max(Math.ceil(length1 * precision), Math.ceil(length2 * precision));\n    for (let i = 0; i < maxPoints; i++) {\n      const t = i / (maxPoints - 1);\n      const pointOnPath1 = /** @type {SVGGeometryElement} */($path1).getPointAtLength(length1 * t);\n      const pointOnPath2 = $path2.getPointAtLength(length2 * t);\n      const prefix = isPath ? (i === 0 ? 'M' : 'L') : '';\n      v1 += prefix + round(pointOnPath1.x, 3) + separator + pointOnPath1.y + ' ';\n      v2 += prefix + round(pointOnPath2.x, 3) + separator + pointOnPath2.y + ' ';\n    }\n  }\n\n  $path1[morphPointsSymbol] = v2;\n\n  return [v1, v2];\n};\n\n/**\n * @param {SVGGeometryElement} [$el]\n * @return {Number}\n */\nconst getScaleFactor = $el => {\n  let scaleFactor = 1;\n  if ($el && $el.getCTM) {\n    const ctm = $el.getCTM();\n    if (ctm) {\n      const scaleX = sqrt(ctm.a * ctm.a + ctm.b * ctm.b);\n      const scaleY = sqrt(ctm.c * ctm.c + ctm.d * ctm.d);\n      scaleFactor = (scaleX + scaleY) / 2;\n    }\n  }\n  return scaleFactor;\n};\n\n/**\n * Creates a proxy that wraps an SVGGeometryElement and adds drawing functionality.\n * @param {SVGGeometryElement} $el - The SVG element to transform into a drawable\n * @param {number} start - Starting position (0-1)\n * @param {number} end - Ending position (0-1)\n * @return {DrawableSVGGeometry} - Returns a proxy that preserves the original element's type with additional 'draw' attribute functionality\n */\nconst createDrawableProxy = ($el, start, end) => {\n  const pathLength = K;\n  const computedStyles = getComputedStyle($el);\n  const strokeLineCap = computedStyles.strokeLinecap;\n  // @ts-ignore\n  const $scalled = computedStyles.vectorEffect === 'non-scaling-stroke' ? $el : null;\n  let currentCap = strokeLineCap;\n\n  const proxy = new Proxy($el, {\n    get(target, property) {\n      const value = target[property];\n      if (property === proxyTargetSymbol) return target;\n      if (property === 'setAttribute') {\n        return (...args) => {\n          if (args[0] === 'draw') {\n            const value = args[1];\n            const values = value.split(' ');\n            const v1 = +values[0];\n            const v2 = +values[1];\n            // TOTO: Benchmark if performing two slices is more performant than one split\n            // const spaceIndex = value.indexOf(' ');\n            // const v1 = round(+value.slice(0, spaceIndex), precision);\n            // const v2 = round(+value.slice(spaceIndex + 1), precision);\n            const scaleFactor = getScaleFactor($scalled);\n            const os = v1 * -1e3 * scaleFactor;\n            const d1 = (v2 * pathLength * scaleFactor) + os;\n            const d2 = (pathLength * scaleFactor +\n                      ((v1 === 0 && v2 === 1) || (v1 === 1 && v2 === 0) ? 0 : 10 * scaleFactor) - d1);\n            if (strokeLineCap !== 'butt') {\n              const newCap = v1 === v2 ? 'butt' : strokeLineCap;\n              if (currentCap !== newCap) {\n                target.style.strokeLinecap = `${newCap}`;\n                currentCap = newCap;\n              }\n            }\n            target.setAttribute('stroke-dashoffset', `${os}`);\n            target.setAttribute('stroke-dasharray', `${d1} ${d2}`);\n          }\n          return Reflect.apply(value, target, args);\n        };\n      }\n\n      if (isFnc(value)) {\n        return (...args) => Reflect.apply(value, target, args);\n      } else {\n        return value;\n      }\n    }\n  });\n\n  if ($el.getAttribute('pathLength') !== `${pathLength}`) {\n    $el.setAttribute('pathLength', `${pathLength}`);\n    proxy.setAttribute('draw', `${start} ${end}`);\n  }\n\n  return /** @type {DrawableSVGGeometry} */(proxy);\n};\n\n/**\n * Creates drawable proxies for multiple SVG elements.\n * @param {TargetsParam} selector - CSS selector, SVG element, or array of elements and selectors\n * @param {number} [start=0] - Starting position (0-1)\n * @param {number} [end=0] - Ending position (0-1)\n * @return {Array<DrawableSVGGeometry>} - Array of proxied elements with drawing functionality\n */\nconst createDrawable = (selector, start = 0, end = 0) => {\n  const els = parseTargets(selector);\n  return els.map($el => createDrawableProxy(\n    /** @type {SVGGeometryElement} */($el),\n    start,\n    end\n  ));\n};\n\n// Motion path animation\n\n/**\n * @param {SVGGeometryElement} $path\n * @param {Number} progress\n * @param {Number}lookup\n * @return {DOMPoint}\n */\nconst getPathPoint = ($path, progress, lookup = 0) => {\n  return $path.getPointAtLength(progress + lookup >= 1 ? progress + lookup : 0);\n};\n\n/**\n * @param {SVGGeometryElement} $path\n * @param {String} pathProperty\n * @return {FunctionValue}\n */\nconst getPathProgess = ($path, pathProperty) => {\n  return $el => {\n    const totalLength = +($path.getTotalLength());\n    const inSvg = $el[isSvgSymbol];\n    const ctm = $path.getCTM();\n    /** @type {TweenObjectValue} */\n    return {\n      from: 0,\n      to: totalLength,\n      /** @type {TweenModifier} */\n      modifier: progress => {\n        if (pathProperty === 'a') {\n          const p0 = getPathPoint($path, progress, -1);\n          const p1 = getPathPoint($path, progress, 1);\n          return atan2(p1.y - p0.y, p1.x - p0.x) * 180 / PI;\n        } else {\n          const p = getPathPoint($path, progress, 0);\n          return pathProperty === 'x' ?\n            inSvg || !ctm ? p.x : p.x * ctm.a + p.y * ctm.c + ctm.e :\n            inSvg || !ctm ? p.y : p.x * ctm.b + p.y * ctm.d + ctm.f\n        }\n      }\n    }\n  }\n};\n\n/**\n * @param {TargetsParam} path\n */\nconst createMotionPath = path => {\n  const $path = getPath(path);\n  if (!$path) return;\n  return {\n    translateX: getPathProgess($path, 'x'),\n    translateY: getPathProgess($path, 'y'),\n    rotate: getPathProgess($path, 'a'),\n  }\n};\n\n// Check for valid SVG attribute\n\nconst cssReservedProperties = ['opacity', 'rotate', 'overflow', 'color'];\n\n/**\n * @param  {Target} el\n * @param  {String} propertyName\n * @return {Boolean}\n */\nconst isValidSVGAttribute = (el, propertyName) => {\n  // Return early and use CSS opacity animation instead (already better default values (opacity: 1 instead of 0)) and rotate should be considered a transform\n  if (cssReservedProperties.includes(propertyName)) return false;\n  if (el.getAttribute(propertyName) || propertyName in el) {\n    if (propertyName === 'scale') { // Scale\n      const elParentNode = /** @type {SVGGeometryElement} */(/** @type {DOMTarget} */(el).parentNode);\n      // Only consider scale as a valid SVG attribute on filter element\n      return elParentNode && elParentNode.tagName === 'filter';\n    }\n    return true;\n  }\n};\n\nconst svg = {\n  morphTo,\n  createMotionPath,\n  createDrawable,\n};\n\n\n\n\n/**\n * RGB / RGBA Color value string -> RGBA values array\n * @param  {String} rgbValue\n * @return {ColorArray}\n */\nconst rgbToRgba = rgbValue => {\n  const rgba = rgbExecRgx.exec(rgbValue) || rgbaExecRgx.exec(rgbValue);\n  const a = !isUnd(rgba[4]) ? +rgba[4] : 1;\n  return [\n    +rgba[1],\n    +rgba[2],\n    +rgba[3],\n    a\n  ]\n};\n\n/**\n * HEX3 / HEX3A / HEX6 / HEX6A Color value string -> RGBA values array\n * @param  {String} hexValue\n * @return {ColorArray}\n */\nconst hexToRgba = hexValue => {\n  const hexLength = hexValue.length;\n  const isShort = hexLength === 4 || hexLength === 5;\n  return [\n    +('0x' + hexValue[1] + hexValue[isShort ? 1 : 2]),\n    +('0x' + hexValue[isShort ? 2 : 3] + hexValue[isShort ? 2 : 4]),\n    +('0x' + hexValue[isShort ? 3 : 5] + hexValue[isShort ? 3 : 6]),\n    ((hexLength === 5 || hexLength === 9) ? +(+('0x' + hexValue[isShort ? 4 : 7] + hexValue[isShort ? 4 : 8]) / 255).toFixed(3) : 1)\n  ]\n};\n\n/**\n * @param  {Number} p\n * @param  {Number} q\n * @param  {Number} t\n * @return {Number}\n */\nconst hue2rgb = (p, q, t) => {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  return t < 1 / 6 ? p + (q - p) * 6 * t :\n         t < 1 / 2 ? q :\n         t < 2 / 3 ? p + (q - p) * (2 / 3 - t) * 6 :\n         p;\n};\n\n/**\n * HSL / HSLA Color value string -> RGBA values array\n * @param  {String} hslValue\n * @return {ColorArray}\n */\nconst hslToRgba = hslValue => {\n  const hsla = hslExecRgx.exec(hslValue) || hslaExecRgx.exec(hslValue);\n  const h = +hsla[1] / 360;\n  const s = +hsla[2] / 100;\n  const l = +hsla[3] / 100;\n  const a = !isUnd(hsla[4]) ? +hsla[4] : 1;\n  let r, g, b;\n  if (s === 0) {\n    r = g = b = l;\n  } else {\n    const q = l < .5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = round(hue2rgb(p, q, h + 1 / 3) * 255, 0);\n    g = round(hue2rgb(p, q, h) * 255, 0);\n    b = round(hue2rgb(p, q, h - 1 / 3) * 255, 0);\n  }\n  return [r, g, b, a];\n};\n\n/**\n * All in one color converter that converts a color string value into an array of RGBA values\n * @param  {String} colorString\n * @return {ColorArray}\n */\nconst convertColorStringValuesToRgbaArray = colorString => {\n  return isRgb(colorString) ? rgbToRgba(colorString) :\n         isHex(colorString) ? hexToRgba(colorString) :\n         isHsl(colorString) ? hslToRgba(colorString) :\n         [0, 0, 0, 1];\n};\n\n\n\n\n/**\n * @template T, D\n * @param {T|undefined} targetValue\n * @param {D} defaultValue\n * @return {T|D}\n */\nconst setValue = (targetValue, defaultValue) => {\n  return isUnd(targetValue) ? defaultValue : targetValue;\n};\n\n/**\n * @param  {TweenPropValue} value\n * @param  {Target} target\n * @param  {Number} index\n * @param  {Number} total\n * @param  {Object} [store]\n * @return {any}\n */\nconst getFunctionValue = (value, target, index, total, store) => {\n  if (isFnc(value)) {\n    const func = () => {\n      const computed = /** @type {Function} */(value)(target, index, total);\n      // Fallback to 0 if the function returns undefined / NaN / null / false / 0\n      return !isNaN(+computed) ? +computed : computed || 0;\n    };\n    if (store) {\n      store.func = func;\n    }\n    return func();\n  } else {\n    return value;\n  }\n};\n\n/**\n * @param  {Target} target\n * @param  {String} prop\n * @return {tweenTypes}\n */\nconst getTweenType = (target, prop) => {\n  return !target[isDomSymbol] ? tweenTypes.OBJECT :\n    // Handle SVG attributes\n    target[isSvgSymbol] && isValidSVGAttribute(target, prop) ? tweenTypes.ATTRIBUTE :\n    // Handle CSS Transform properties differently than CSS to allow individual animations\n    validTransforms.includes(prop) || shortTransforms.get(prop) ? tweenTypes.TRANSFORM :\n    // CSS variables\n    stringStartsWith(prop, '--') ? tweenTypes.CSS_VAR :\n    // All other CSS properties\n    prop in /** @type {DOMTarget} */(target).style ? tweenTypes.CSS :\n    // Handle other DOM Attributes\n    prop in target ? tweenTypes.OBJECT :\n    tweenTypes.ATTRIBUTE;\n};\n\n/**\n * @param  {DOMTarget} target\n * @param  {String} propName\n * @param  {Object} animationInlineStyles\n * @return {String}\n */\nconst getCSSValue = (target, propName, animationInlineStyles) => {\n  const inlineStyles = target.style[propName];\n  if (inlineStyles && animationInlineStyles) {\n    animationInlineStyles[propName] = inlineStyles;\n  }\n  const value = inlineStyles || getComputedStyle(target[proxyTargetSymbol] || target).getPropertyValue(propName);\n  return value === 'auto' ? '0' : value;\n};\n\n/**\n * @param {Target} target\n * @param {String} propName\n * @param {tweenTypes} [tweenType]\n * @param {Object|void} [animationInlineStyles]\n * @return {String|Number}\n */\nconst getOriginalAnimatableValue = (target, propName, tweenType, animationInlineStyles) => {\n  const type = !isUnd(tweenType) ? tweenType : getTweenType(target, propName);\n  return type === tweenTypes.OBJECT ? target[propName] || 0 :\n         type === tweenTypes.ATTRIBUTE ? /** @type {DOMTarget} */(target).getAttribute(propName) :\n         type === tweenTypes.TRANSFORM ? parseInlineTransforms(/** @type {DOMTarget} */(target), propName, animationInlineStyles) :\n         type === tweenTypes.CSS_VAR ? getCSSValue(/** @type {DOMTarget} */(target), propName, animationInlineStyles).trimStart() :\n         getCSSValue(/** @type {DOMTarget} */(target), propName, animationInlineStyles);\n};\n\n/**\n * @param  {Number} x\n * @param  {Number} y\n * @param  {String} operator\n * @return {Number}\n */\nconst getRelativeValue = (x, y, operator) => {\n  return operator === '-' ? x - y :\n         operator === '+' ? x + y :\n         x * y;\n};\n\n/** @return {TweenDecomposedValue} */\nconst createDecomposedValueTargetObject = () => {\n  return {\n    /** @type {valueTypes} */\n    t: valueTypes.NUMBER,\n    n: 0,\n    u: null,\n    o: null,\n    d: null,\n    s: null,\n  }\n};\n\n/**\n * @param  {String|Number} rawValue\n * @param  {TweenDecomposedValue} targetObject\n * @return {TweenDecomposedValue}\n */\nconst decomposeRawValue = (rawValue, targetObject) => {\n  /** @type {valueTypes} */\n  targetObject.t = valueTypes.NUMBER;\n  targetObject.n = 0;\n  targetObject.u = null;\n  targetObject.o = null;\n  targetObject.d = null;\n  targetObject.s = null;\n  if (!rawValue) return targetObject;\n  const num = +rawValue;\n  if (!isNaN(num)) {\n    // It's a number\n    targetObject.n = num;\n    return targetObject;\n  } else {\n    // let str = /** @type {String} */(rawValue).trim();\n    let str = /** @type {String} */(rawValue);\n    // Parsing operators (+=, -=, *=) manually is much faster than using regex here\n    if (str[1] === '=') {\n      targetObject.o = str[0];\n      str = str.slice(2);\n    }\n    // Skip exec regex if the value type is complex or color to avoid long regex backtracking\n    const unitMatch = str.includes(' ') ? false : unitsExecRgx.exec(str);\n    if (unitMatch) {\n      // Has a number and a unit\n      targetObject.t = valueTypes.UNIT;\n      targetObject.n = +unitMatch[1];\n      targetObject.u = unitMatch[2];\n      return targetObject;\n    } else if (targetObject.o) {\n      // Has an operator (+=, -=, *=)\n      targetObject.n = +str;\n      return targetObject;\n    } else if (isCol(str)) {\n      // Is a color\n      targetObject.t = valueTypes.COLOR;\n      targetObject.d = convertColorStringValuesToRgbaArray(str);\n      return targetObject;\n    } else {\n      // Is a more complex string (generally svg coords, calc() or filters CSS values)\n      const matchedNumbers = str.match(digitWithExponentRgx);\n      targetObject.t = valueTypes.COMPLEX;\n      targetObject.d = matchedNumbers ? matchedNumbers.map(Number) : [];\n      targetObject.s = str.split(digitWithExponentRgx) || [];\n      return targetObject;\n    }\n  }\n};\n\n/**\n * @param  {Tween} tween\n * @param  {TweenDecomposedValue} targetObject\n * @return {TweenDecomposedValue}\n */\nconst decomposeTweenValue = (tween, targetObject) => {\n  targetObject.t = tween._valueType;\n  targetObject.n = tween._toNumber;\n  targetObject.u = tween._unit;\n  targetObject.o = null;\n  targetObject.d = cloneArray(tween._toNumbers);\n  targetObject.s = cloneArray(tween._strings);\n  return targetObject;\n};\n\nconst decomposedOriginalValue = createDecomposedValueTargetObject();\n\n\n\n\nconst lookups = {\n  /** @type {TweenReplaceLookups} */\n  _rep: new WeakMap(),\n  /** @type {TweenAdditiveLookups} */\n  _add: new Map(),\n};\n\n/**\n * @param  {Target} target\n * @param  {String} property\n * @param  {String} lookup\n * @return {TweenPropertySiblings}\n */\nconst getTweenSiblings = (target, property, lookup = '_rep') => {\n  const lookupMap = lookups[lookup];\n  let targetLookup = lookupMap.get(target);\n  if (!targetLookup) {\n    targetLookup = {};\n    lookupMap.set(target, targetLookup);\n  }\n  return targetLookup[property] ? targetLookup[property] : targetLookup[property] = {\n    _head: null,\n    _tail: null,\n  }\n};\n\n/**\n * @param  {Tween} p\n * @param  {Tween} c\n * @return {Number|Boolean}\n */\nconst addTweenSortMethod = (p, c) => {\n  return p._isOverridden || p._absoluteStartTime > c._absoluteStartTime;\n};\n\n/**\n * @param {Tween} tween\n */\nconst overrideTween = tween => {\n  tween._isOverlapped = 1;\n  tween._isOverridden = 1;\n  tween._changeDuration = minValue;\n  tween._currentTime = minValue;\n};\n\n/**\n * @param  {Tween} tween\n * @param  {TweenPropertySiblings} siblings\n * @return {Tween}\n */\nconst composeTween = (tween, siblings) => {\n\n  const tweenCompositionType = tween._composition;\n\n  // Handle replaced tweens\n\n  if (tweenCompositionType === compositionTypes.replace) {\n\n    const tweenAbsStartTime = tween._absoluteStartTime;\n\n    addChild(siblings, tween, addTweenSortMethod, '_prevRep', '_nextRep');\n\n    const prevSibling = tween._prevRep;\n\n    // Update the previous siblings for composition replace tweens\n\n    if (prevSibling) {\n\n      const prevParent = prevSibling.parent;\n      const prevAbsEndTime = prevSibling._absoluteStartTime + prevSibling._changeDuration;\n\n      // Handle looped animations tween\n\n      if (\n        // Check if the previous tween is from a different animation\n        tween.parent.id !== prevParent.id &&\n        // Check if the animation has loops\n        prevParent.iterationCount> 1 &&\n        // Check if _absoluteChangeEndTime of last loop overlaps the current tween\n        prevAbsEndTime + (prevParent.duration - prevParent.iterationDuration) > tweenAbsStartTime\n      ) {\n\n        // TODO: Find a way to only override the iterations overlapping with the tween\n        overrideTween(prevSibling);\n\n        let prevPrevSibling = prevSibling._prevRep;\n\n        // If the tween was part of a set of keyframes, override its siblings\n        while (prevPrevSibling && prevPrevSibling.parent.id === prevParent.id) {\n          overrideTween(prevPrevSibling);\n          prevPrevSibling = prevPrevSibling._prevRep;\n        }\n\n      }\n\n      const absoluteUpdateStartTime = tweenAbsStartTime - tween._delay;\n\n      if (prevAbsEndTime > absoluteUpdateStartTime) {\n\n        const prevChangeStartTime = prevSibling._startTime;\n        const prevTLOffset = prevAbsEndTime - (prevChangeStartTime + prevSibling._updateDuration);\n\n        prevSibling._changeDuration = absoluteUpdateStartTime - prevTLOffset - prevChangeStartTime;\n        prevSibling._currentTime = prevSibling._changeDuration;\n        prevSibling._isOverlapped = 1;\n\n        if (prevSibling._changeDuration < minValue) {\n          overrideTween(prevSibling);\n        }\n      }\n\n      // Pause (and cancel) the parent if it only contains overlapped tweens\n\n      let pausePrevParentAnimation = true;\n\n      forEachChildren(prevParent, (/** @type Tween */t) => {\n        if (!t._isOverlapped) pausePrevParentAnimation = false;\n      });\n\n      if (pausePrevParentAnimation) {\n        const prevParentTL = prevParent.parent;\n        if (prevParentTL) {\n          let pausePrevParentTL = true;\n          forEachChildren(prevParentTL, (/** @type JSAnimation */a) => {\n            if (a !== prevParent) {\n              forEachChildren(a, (/** @type Tween */t) => {\n                if (!t._isOverlapped) pausePrevParentTL = false;\n              });\n            }\n          });\n          if (pausePrevParentTL) {\n            prevParentTL.cancel();\n          }\n        } else {\n          prevParent.cancel();\n          // Previously, calling .cancel() on a timeline child would affect the render order of other children\n          // Worked around this by marking it as .completed and using .pause() for safe removal in the engine loop\n          // This is no longer needed since timeline tween composition is now handled separatly\n          // Keeping this here for reference\n          // prevParent.completed = true;\n          // prevParent.pause();\n        }\n      }\n\n    }\n\n    // let nextSibling = tween._nextRep;\n\n    // // All the next siblings are automatically overridden\n\n    // if (nextSibling && nextSibling._absoluteStartTime >= tweenAbsStartTime) {\n    //   while (nextSibling) {\n    //     overrideTween(nextSibling);\n    //     nextSibling = nextSibling._nextRep;\n    //   }\n    // }\n\n    // if (nextSibling && nextSibling._absoluteStartTime < tweenAbsStartTime) {\n    //   while (nextSibling) {\n    //     overrideTween(nextSibling);\n    //     console.log(tween.id, nextSibling.id);\n    //     nextSibling = nextSibling._nextRep;\n    //   }\n    // }\n\n  // Handle additive tweens composition\n\n  } else if (tweenCompositionType === compositionTypes.blend) {\n\n    const additiveTweenSiblings = getTweenSiblings(tween.target, tween.property, '_add');\n    const additiveAnimation = addAdditiveAnimation(lookups._add);\n\n    let lookupTween = additiveTweenSiblings._head;\n\n    if (!lookupTween) {\n      lookupTween = { ...tween };\n      lookupTween._composition = compositionTypes.replace;\n      lookupTween._updateDuration = minValue;\n      lookupTween._startTime = 0;\n      lookupTween._numbers = cloneArray(tween._fromNumbers);\n      lookupTween._number = 0;\n      lookupTween._next = null;\n      lookupTween._prev = null;\n      addChild(additiveTweenSiblings, lookupTween);\n      addChild(additiveAnimation, lookupTween);\n    }\n\n    // Convert the values of TO to FROM and set TO to 0\n\n    const toNumber = tween._toNumber;\n    tween._fromNumber = lookupTween._fromNumber - toNumber;\n    tween._toNumber = 0;\n    tween._numbers = cloneArray(tween._fromNumbers);\n    tween._number = 0;\n    lookupTween._fromNumber = toNumber;\n\n    if (tween._toNumbers) {\n      const toNumbers = cloneArray(tween._toNumbers);\n      if (toNumbers) {\n        toNumbers.forEach((value, i) => {\n          tween._fromNumbers[i] = lookupTween._fromNumbers[i] - value;\n          tween._toNumbers[i] = 0;\n        });\n      }\n      lookupTween._fromNumbers = toNumbers;\n    }\n\n    addChild(additiveTweenSiblings, tween, null, '_prevAdd', '_nextAdd');\n\n  }\n\n  return tween;\n\n};\n\n/**\n * @param  {Tween} tween\n * @return {Tween}\n */\nconst removeTweenSliblings = tween => {\n  const tweenComposition = tween._composition;\n  if (tweenComposition !== compositionTypes.none) {\n    const tweenTarget = tween.target;\n    const tweenProperty = tween.property;\n    const replaceTweensLookup = lookups._rep;\n    const replaceTargetProps = replaceTweensLookup.get(tweenTarget);\n    const tweenReplaceSiblings = replaceTargetProps[tweenProperty];\n    removeChild(tweenReplaceSiblings, tween, '_prevRep', '_nextRep');\n    if (tweenComposition === compositionTypes.blend) {\n      const addTweensLookup = lookups._add;\n      const addTargetProps = addTweensLookup.get(tweenTarget);\n      if (!addTargetProps) return;\n      const additiveTweenSiblings = addTargetProps[tweenProperty];\n      const additiveAnimation = additive.animation;\n      removeChild(additiveTweenSiblings, tween, '_prevAdd', '_nextAdd');\n      // If only one tween is left in the additive lookup, it's the tween lookup\n      const lookupTween = additiveTweenSiblings._head;\n      if (lookupTween && lookupTween === additiveTweenSiblings._tail) {\n        removeChild(additiveTweenSiblings, lookupTween, '_prevAdd', '_nextAdd');\n        removeChild(additiveAnimation, lookupTween);\n        let shouldClean = true;\n        for (let prop in addTargetProps) {\n          if (addTargetProps[prop]._head) {\n            shouldClean = false;\n            break;\n          }\n        }\n        if (shouldClean) {\n          addTweensLookup.delete(tweenTarget);\n        }\n      }\n    }\n  }\n  return tween;\n};\n\n\n\n\n/**\n * @param  {Timer} timer\n * @return {Timer}\n */\nconst resetTimerProperties = timer => {\n  timer.paused = true;\n  timer.began = false;\n  timer.completed = false;\n  return timer;\n};\n\n/**\n * @param  {Timer} timer\n * @return {Timer}\n */\nconst reviveTimer = timer => {\n  if (!timer._cancelled) return timer;\n  if (timer._hasChildren) {\n    forEachChildren(timer, reviveTimer);\n  } else {\n    forEachChildren(timer, (/** @type {Tween} tween*/tween) => {\n      if (tween._composition !== compositionTypes.none) {\n        composeTween(tween, getTweenSiblings(tween.target, tween.property));\n      }\n    });\n  }\n  timer._cancelled = 0;\n  return timer;\n};\n\nlet timerId = 0;\n\n/**\n * Base class used to create Timers, Animations and Timelines\n */\nclass Timer extends Clock {\n  /**\n   * @param {TimerParams} [parameters]\n   * @param {Timeline} [parent]\n   * @param {Number} [parentPosition]\n   */\n  constructor(parameters = {}, parent = null, parentPosition = 0) {\n\n    super(0);\n\n    const {\n      id,\n      delay,\n      duration,\n      reversed,\n      alternate,\n      loop,\n      loopDelay,\n      autoplay,\n      frameRate,\n      playbackRate,\n      onComplete,\n      onLoop,\n      onPause,\n      onBegin,\n      onBeforeUpdate,\n      onUpdate,\n    } = parameters;\n\n    if (scope.current) scope.current.register(this);\n\n    const timerInitTime = parent ? 0 : engine._elapsedTime;\n    const timerDefaults = parent ? parent.defaults : globals.defaults;\n    const timerDelay = /** @type {Number} */(isFnc(delay) || isUnd(delay) ? timerDefaults.delay : +delay);\n    const timerDuration = isFnc(duration) || isUnd(duration) ? Infinity : +duration;\n    const timerLoop = setValue(loop, timerDefaults.loop);\n    const timerLoopDelay = setValue(loopDelay, timerDefaults.loopDelay);\n    const timerIterationCount = timerLoop === true ||\n                                timerLoop === Infinity ||\n                                /** @type {Number} */(timerLoop) < 0 ? Infinity :\n                                /** @type {Number} */(timerLoop) + 1;\n\n    let offsetPosition = 0;\n\n    if (parent) {\n      offsetPosition = parentPosition;\n    } else {\n      let startTime = now();\n      // Make sure to tick the engine once if suspended to avoid big gaps with the following offsetPosition calculation\n      if (engine.paused) {\n        engine.requestTick(startTime);\n        startTime = engine._elapsedTime;\n      }\n      offsetPosition = startTime - engine._startTime;\n    }\n\n    // Timer's parameters\n    this.id = !isUnd(id) ? id : ++timerId;\n    /** @type {Timeline} */\n    this.parent = parent;\n    // Total duration of the timer\n    this.duration = clampInfinity(((timerDuration + timerLoopDelay) * timerIterationCount) - timerLoopDelay) || minValue;\n    /** @type {Boolean} */\n    this.backwards = false;\n    /** @type {Boolean} */\n    this.paused = true;\n    /** @type {Boolean} */\n    this.began = false;\n    /** @type {Boolean} */\n    this.completed = false;\n    /** @type {Callback<this>} */\n    this.onBegin = onBegin || timerDefaults.onBegin;\n    /** @type {Callback<this>} */\n    this.onBeforeUpdate = onBeforeUpdate || timerDefaults.onBeforeUpdate;\n    /** @type {Callback<this>} */\n    this.onUpdate = onUpdate || timerDefaults.onUpdate;\n    /** @type {Callback<this>} */\n    this.onLoop = onLoop || timerDefaults.onLoop;\n    /** @type {Callback<this>} */\n    this.onPause = onPause || timerDefaults.onPause;\n    /** @type {Callback<this>} */\n    this.onComplete = onComplete || timerDefaults.onComplete;\n    /** @type {Number} */\n    this.iterationDuration = timerDuration; // Duration of one loop\n    /** @type {Number} */\n    this.iterationCount = timerIterationCount; // Number of loops\n    /** @type {Boolean|ScrollObserver} */\n    this._autoplay = parent ? false : setValue(autoplay, timerDefaults.autoplay);\n    /** @type {Number} */\n    this._offset = offsetPosition;\n    /** @type {Number} */\n    this._delay = timerDelay;\n    /** @type {Number} */\n    this._loopDelay = timerLoopDelay;\n    /** @type {Number} */\n    this._iterationTime = 0;\n    /** @type {Number} */\n    this._currentIteration = 0; // Current loop index\n    /** @type {Function} */\n    this._resolve = noop; // Used by .then()\n    /** @type {Boolean} */\n    this._running = false;\n    /** @type {Number} */\n    this._reversed = +setValue(reversed, timerDefaults.reversed);\n    /** @type {Number} */\n    this._reverse = this._reversed;\n    /** @type {Number} */\n    this._cancelled = 0;\n    /** @type {Boolean} */\n    this._alternate = setValue(alternate, timerDefaults.alternate);\n    /** @type {Renderable} */\n    this._prev = null;\n    /** @type {Renderable} */\n    this._next = null;\n\n    // Clock's parameters\n    /** @type {Number} */\n    this._elapsedTime = timerInitTime;\n    /** @type {Number} */\n    this._startTime = timerInitTime;\n    /** @type {Number} */\n    this._lastTime = timerInitTime;\n    /** @type {Number} */\n    this._fps = setValue(frameRate, timerDefaults.frameRate);\n    /** @type {Number} */\n    this._speed = setValue(playbackRate, timerDefaults.playbackRate);\n  }\n\n  get cancelled() {\n    return !!this._cancelled;\n  }\n\n  /** @param {Boolean} cancelled  */\n  set cancelled(cancelled) {\n    cancelled ? this.cancel() : this.reset(1).play();\n  }\n\n  get currentTime() {\n    return clamp(round(this._currentTime, globals.precision), -this._delay, this.duration);\n  }\n\n  /** @param {Number} time  */\n  set currentTime(time) {\n    const paused = this.paused;\n    // Pausing the timer is necessary to avoid time jumps on a running instance\n    this.pause().seek(+time);\n    if (!paused) this.resume();\n  }\n\n  get iterationCurrentTime() {\n    return round(this._iterationTime, globals.precision);\n  }\n\n  /** @param {Number} time  */\n  set iterationCurrentTime(time) {\n    this.currentTime = (this.iterationDuration * this._currentIteration) + time;\n  }\n\n  get progress() {\n    return clamp(round(this._currentTime / this.duration, 10), 0, 1);\n  }\n\n  /** @param {Number} progress  */\n  set progress(progress) {\n    this.currentTime = this.duration * progress;\n  }\n\n  get iterationProgress() {\n    return clamp(round(this._iterationTime / this.iterationDuration, 10), 0, 1);\n  }\n\n  /** @param {Number} progress  */\n  set iterationProgress(progress) {\n    const iterationDuration = this.iterationDuration;\n    this.currentTime = (iterationDuration * this._currentIteration) + (iterationDuration * progress);\n  }\n\n  get currentIteration() {\n    return this._currentIteration;\n  }\n\n  /** @param {Number} iterationCount  */\n  set currentIteration(iterationCount) {\n    this.currentTime = (this.iterationDuration * clamp(+iterationCount, 0, this.iterationCount - 1));\n  }\n\n  get reversed() {\n    return !!this._reversed;\n  }\n\n  /** @param {Boolean} reverse  */\n  set reversed(reverse) {\n    reverse ? this.reverse() : this.play();\n  }\n\n  get speed() {\n    return super.speed;\n  }\n\n  /** @param {Number} playbackRate  */\n  set speed(playbackRate) {\n    super.speed = playbackRate;\n    this.resetTime();\n  }\n\n  /**\n   * @param  {Number} internalRender\n   * @return {this}\n   */\n  reset(internalRender = 0) {\n    // If cancelled, revive the timer before rendering in order to have propertly composed tweens siblings\n    reviveTimer(this);\n    if (this._reversed && !this._reverse) this.reversed = false;\n    // Rendering before updating the completed flag to prevent skips and to make sure the properties are not overridden\n    // Setting the iterationTime at the end to force the rendering to happend backwards, otherwise calling .reset() on Timelines might not render children in the right order\n    // NOTE: This is only required for Timelines and might be better to move to the Timeline class?\n    this._iterationTime = this.iterationDuration;\n    // Set tickMode to tickModes.FORCE to force rendering\n    tick(this, 0, 1, internalRender, tickModes.FORCE);\n    // Reset timer properties after revive / render to make sure the props are not updated again\n    resetTimerProperties(this);\n    // Also reset children properties\n    if (this._hasChildren) {\n      forEachChildren(this, resetTimerProperties);\n    }\n    return this;\n  }\n\n  /**\n   * @param  {Number} internalRender\n   * @return {this}\n   */\n  init(internalRender = 0) {\n    this.fps = this._fps;\n    this.speed = this._speed;\n    // Manually calling .init() on timelines should render all children intial state\n    // Forces all children to render once then render to 0 when reseted\n    if (!internalRender && this._hasChildren) {\n      tick(this, this.duration, 1, internalRender, tickModes.FORCE);\n    }\n    this.reset(internalRender);\n    // Make sure to set autoplay to false to child timers so it doesn't attempt to autoplay / link\n    const autoplay = this._autoplay;\n    if (autoplay === true) {\n      this.resume();\n    } else if (autoplay && !isUnd(/** @type {ScrollObserver} */(autoplay).linked)) {\n      /** @type {ScrollObserver} */(autoplay).link(this);\n    }\n    return this;\n  }\n\n  /** @return {this} */\n  resetTime() {\n    const timeScale = 1 / (this._speed * engine._speed);\n    this._startTime = now() - (this._currentTime + this._delay) * timeScale;\n    return this;\n  }\n\n  /** @return {this} */\n  pause() {\n    if (this.paused) return this;\n    this.paused = true;\n    this.onPause(this);\n    return this;\n  }\n\n  /** @return {this} */\n  resume() {\n    if (!this.paused) return this;\n    this.paused = false;\n    // We can safely imediatly render a timer that has no duration and no children\n    if (this.duration <= minValue && !this._hasChildren) {\n      tick(this, minValue, 0, 0, tickModes.FORCE);\n    } else {\n      if (!this._running) {\n        addChild(engine, this);\n        engine._hasChildren = true;\n        this._running = true;\n      }\n      this.resetTime();\n      // Forces the timer to advance by at least one frame when the next tick occurs\n      this._startTime -= 12;\n      engine.wake();\n    }\n    return this;\n  }\n\n  /** @return {this} */\n  restart() {\n    return this.reset(0).resume();\n  }\n\n  /**\n   * @param  {Number} time\n   * @param  {Boolean|Number} [muteCallbacks]\n   * @param  {Boolean|Number} [internalRender]\n   * @return {this}\n   */\n  seek(time, muteCallbacks = 0, internalRender = 0) {\n    // Recompose the tween siblings in case the timer has been cancelled\n    reviveTimer(this);\n    // If you seek a completed animation, otherwise the next play will starts at 0\n    this.completed = false;\n    const isPaused = this.paused;\n    this.paused = true;\n    // timer, time, muteCallbacks, internalRender, tickMode\n    tick(this, time + this._delay, ~~muteCallbacks, ~~internalRender, tickModes.AUTO);\n    return isPaused ? this : this.resume();\n  }\n\n  /** @return {this} */\n  alternate() {\n    const reversed = this._reversed;\n    const count = this.iterationCount;\n    const duration = this.iterationDuration;\n    // Calculate the maximum iterations possible given the iteration duration\n    const iterations = count === Infinity ? floor(maxValue / duration) : count;\n    this._reversed = +(this._alternate && !(iterations % 2) ? reversed : !reversed);\n    if (count === Infinity) {\n      // Handle infinite loops to loop on themself\n      this.iterationProgress = this._reversed ? 1 - this.iterationProgress : this.iterationProgress;\n    } else {\n      this.seek((duration * iterations) - this._currentTime);\n    }\n    this.resetTime();\n    return this;\n  }\n\n  /** @return {this} */\n  play() {\n    if (this._reversed) this.alternate();\n    return this.resume();\n  }\n\n  /** @return {this} */\n  reverse() {\n    if (!this._reversed) this.alternate();\n    return this.resume();\n  }\n\n  // TODO: Move all the animation / tweens / children related code to Animation / Timeline\n\n  /** @return {this} */\n  cancel() {\n    if (this._hasChildren) {\n      forEachChildren(this, (/** @type {Renderable} */child) => child.cancel(), true);\n    } else {\n      forEachChildren(this, removeTweenSliblings);\n    }\n    this._cancelled = 1;\n    // Pausing the timer removes it from the engine\n    return this.pause();\n  }\n\n  /**\n   * @param  {Number} newDuration\n   * @return {this}\n   */\n  stretch(newDuration) {\n    const currentDuration = this.duration;\n    const normlizedDuration = normalizeTime(newDuration);\n    if (currentDuration === normlizedDuration) return this;\n    const timeScale = newDuration / currentDuration;\n    const isSetter = newDuration <= minValue;\n    this.duration = isSetter ? minValue : normlizedDuration;\n    this.iterationDuration = isSetter ? minValue : normalizeTime(this.iterationDuration * timeScale);\n    this._offset *= timeScale;\n    this._delay *= timeScale;\n    this._loopDelay *= timeScale;\n    return this;\n  }\n\n /**\n   * Cancels the timer by seeking it back to 0 and reverting the attached scroller if necessary\n   * @return {this}\n   */\n  revert() {\n    tick(this, 0, 1, 0, tickModes.AUTO);\n    const ap = /** @type {ScrollObserver} */(this._autoplay);\n    if (ap && ap.linked && ap.linked === this) ap.revert();\n    return this.cancel();\n  }\n\n /**\n   * Imediatly completes the timer, cancels it and triggers the onComplete callback\n   * @return {this}\n   */\n  complete() {\n    return this.seek(this.duration).cancel();\n  }\n\n  /**\n   * @param  {Callback<this>} [callback]\n   * @return {Promise}\n   */\n  then(callback = noop) {\n    const then = this.then;\n    const onResolve = () => {\n      // this.then = null prevents infinite recursion if returned by an async function\n      // https://github.com/juliangarnierorg/anime-beta/issues/26\n      this.then = null;\n      callback(this);\n      this.then = then;\n      this._resolve = noop;\n    };\n    return new Promise(r => {\n      this._resolve = () => r(onResolve());\n      // Make sure to resolve imediatly if the timer has already completed\n      if (this.completed) this._resolve();\n      return this;\n    });\n  }\n\n}\n\n\n/**\n * @param {TimerParams} [parameters]\n * @return {Timer}\n */\nconst createTimer = parameters => new Timer(parameters, null, 0).init();\n\n\n\n\n/** @type {EasingFunction} */\nconst none = t => t;\n\n// Cubic Bezier solver adapted from https://github.com/gre/bezier-ease © Gaëtan Renaudeau\n\n/**\n * @param  {Number} aT\n * @param  {Number} aA1\n * @param  {Number} aA2\n * @return {Number}\n */\nconst calcBezier = (aT, aA1, aA2) => (((1 - 3 * aA2 + 3 * aA1) * aT + (3 * aA2 - 6 * aA1)) * aT + (3 * aA1)) * aT;\n\n/**\n * @param  {Number} aX\n * @param  {Number} mX1\n * @param  {Number} mX2\n * @return {Number}\n */\nconst binarySubdivide = (aX, mX1, mX2) => {\n  let aA = 0, aB = 1, currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (abs(currentX) > .0000001 && ++i < 100);\n  return currentT;\n};\n\n/**\n * @param  {Number} [mX1]\n * @param  {Number} [mY1]\n * @param  {Number} [mX2]\n * @param  {Number} [mY2]\n * @return {EasingFunction}\n */\n\nconst cubicBezier = (mX1 = 0.5, mY1 = 0.0, mX2 = 0.5, mY2 = 1.0) => (mX1 === mY1 && mX2 === mY2) ? none :\n  t => t === 0 || t === 1 ? t :\n  calcBezier(binarySubdivide(t, mX1, mX2), mY1, mY2);\n\n/**\n * Steps ease implementation https://developer.mozilla.org/fr/docs/Web/CSS/transition-timing-function\n * Only covers 'end' and 'start' jumpterms\n * @param  {Number} steps\n * @param  {Boolean} [fromStart]\n * @return {EasingFunction}\n */\nconst steps = (steps = 10, fromStart) => {\n  const roundMethod = fromStart ? ceil : floor;\n  return t => roundMethod(clamp(t, 0, 1) * steps) * (1 / steps);\n};\n\n/**\n * Without parameters, the linear function creates a non-eased transition.\n * Parameters, if used, creates a piecewise linear easing by interpolating linearly between the specified points.\n * @param  {...String|Number} [args] - Points\n * @return {EasingFunction}\n */\nconst linear = (...args) => {\n  const argsLength = args.length;\n  if (!argsLength) return none;\n  const totalPoints = argsLength - 1;\n  const firstArg = args[0];\n  const lastArg = args[totalPoints];\n  const xPoints = [0];\n  const yPoints = [parseNumber(firstArg)];\n  for (let i = 1; i < totalPoints; i++) {\n    const arg = args[i];\n    const splitValue = isStr(arg) ?\n    /** @type {String} */(arg).trim().split(' ') :\n    [arg];\n    const value = splitValue[0];\n    const percent = splitValue[1];\n    xPoints.push(!isUnd(percent) ? parseNumber(percent) / 100 : i / totalPoints);\n    yPoints.push(parseNumber(value));\n  }\n  yPoints.push(parseNumber(lastArg));\n  xPoints.push(1);\n  return function easeLinear(t) {\n    for (let i = 1, l = xPoints.length; i < l; i++) {\n      const currentX = xPoints[i];\n      if (t <= currentX) {\n        const prevX = xPoints[i - 1];\n        const prevY = yPoints[i - 1];\n        return prevY + (yPoints[i] - prevY) * (t - prevX) / (currentX - prevX);\n      }\n    }\n    return yPoints[yPoints.length - 1];\n  }\n};\n\n/**\n * Generate random steps\n * @param  {Number} [length] - The number of steps\n * @param  {Number} [randomness] - How strong the randomness is\n * @return {EasingFunction}\n */\nconst irregular = (length = 10, randomness = 1) => {\n  const values = [0];\n  const total = length - 1;\n  for (let i = 1; i < total; i++) {\n    const previousValue = values[i - 1];\n    const spacing = i / total;\n    const segmentEnd = (i + 1) / total;\n    const randomVariation = spacing + (segmentEnd - spacing) * Math.random();\n    // Mix the even spacing and random variation based on the randomness parameter\n    const randomValue = spacing * (1 - randomness) + randomVariation * randomness;\n    values.push(clamp(randomValue, previousValue, 1));\n  }\n  values.push(1);\n  return linear(...values);\n};\n\n// Easing functions adapted from http://www.robertpenner.com/ease © Robert Penner\n\n/**\n * @callback PowerEasing\n * @param {Number|String} [power=1.675]\n * @return {EasingFunction}\n */\n\n/**\n * @callback BackEasing\n * @param {Number|String} [overshoot=1.70158]\n * @return {EasingFunction}\n */\n\n/**\n * @callback ElasticEasing\n * @param {Number|String} [amplitude=1]\n * @param {Number|String} [period=.3]\n * @return {EasingFunction}\n */\n\n/**\n * @callback EaseFactory\n * @param {Number|String} [paramA]\n * @param {Number|String} [paramB]\n * @return {EasingFunction|Number}\n */\n\n/** @typedef {PowerEasing|BackEasing|ElasticEasing} EasesFactory */\n\nconst halfPI = PI / 2;\nconst doublePI = PI * 2;\n/** @type {PowerEasing} */\nconst easeInPower = (p = 1.68) => t => pow(t, +p);\n\n/** @type {Record<String, EasesFactory|EasingFunction>} */\nconst easeInFunctions = {\n  [emptyString]: easeInPower,\n  Quad: easeInPower(2),\n  Cubic: easeInPower(3),\n  Quart: easeInPower(4),\n  Quint: easeInPower(5),\n  /** @type {EasingFunction} */\n  Sine: t => 1 - cos(t * halfPI),\n  /** @type {EasingFunction} */\n  Circ: t => 1 - sqrt(1 - t * t),\n  /** @type {EasingFunction} */\n  Expo: t => t ? pow(2, 10 * t - 10) : 0,\n  /** @type {EasingFunction} */\n  Bounce: t => {\n    let pow2, b = 4;\n    while (t < ((pow2 = pow(2, --b)) - 1) / 11);\n    return 1 / pow(4, 3 - b) - 7.5625 * pow((pow2 * 3 - 2) / 22 - t, 2);\n  },\n  /** @type {BackEasing} */\n  Back: (overshoot = 1.70158) => t => (+overshoot + 1) * t * t * t - +overshoot * t * t,\n  /** @type {ElasticEasing} */\n  Elastic: (amplitude = 1, period = .3) => {\n    const a = clamp(+amplitude, 1, 10);\n    const p = clamp(+period, minValue, 2);\n    const s = (p / doublePI) * asin(1 / a);\n    const e = doublePI / p;\n    return t => t === 0 || t === 1 ? t : -a * pow(2, -10 * (1 - t)) * sin(((1 - t) - s) * e);\n  }\n};\n\n/**\n * @callback EaseType\n * @param {EasingFunction} Ease\n * @return {EasingFunction}\n */\n\n/** @type {Record<String, EaseType>} */\nconst easeTypes = {\n  in: easeIn => t => easeIn(t),\n  out: easeIn => t => 1 - easeIn(1 - t),\n  inOut: easeIn => t => t < .5 ? easeIn(t * 2) / 2 : 1 - easeIn(t * -2 + 2) / 2,\n  outIn: easeIn => t => t < .5 ? (1 - easeIn(1 - t * 2)) / 2 : (easeIn(t * 2 - 1) + 1) / 2,\n};\n\n/**\n * @param  {String} string\n * @param  {Record<String, EasesFactory|EasingFunction>} easesFunctions\n * @param  {Object} easesLookups\n * @return {EasingFunction}\n */\nconst parseEaseString = (string, easesFunctions, easesLookups) => {\n  if (easesLookups[string]) return easesLookups[string];\n  if (string.indexOf('(') <= -1) {\n    const hasParams = easeTypes[string] || string.includes('Back') || string.includes('Elastic');\n    const parsedFn = /** @type {EasingFunction} */(hasParams ? /** @type {EasesFactory} */(easesFunctions[string])() : easesFunctions[string]);\n    return parsedFn ? easesLookups[string] = parsedFn : none;\n  } else {\n    const split = string.slice(0, -1).split('(');\n    const parsedFn = /** @type {EasesFactory} */(easesFunctions[split[0]]);\n    return parsedFn ? easesLookups[string] = parsedFn(...split[1].split(',')) : none;\n  }\n};\n\n/**\n * @typedef  {Object} EasesFunctions\n * @property {typeof linear} linear\n * @property {typeof irregular} irregular\n * @property {typeof steps} steps\n * @property {typeof cubicBezier} cubicBezier\n * @property {PowerEasing} in\n * @property {PowerEasing} out\n * @property {PowerEasing} inOut\n * @property {PowerEasing} outIn\n * @property {EasingFunction} inQuad\n * @property {EasingFunction} outQuad\n * @property {EasingFunction} inOutQuad\n * @property {EasingFunction} outInQuad\n * @property {EasingFunction} inCubic\n * @property {EasingFunction} outCubic\n * @property {EasingFunction} inOutCubic\n * @property {EasingFunction} outInCubic\n * @property {EasingFunction} inQuart\n * @property {EasingFunction} outQuart\n * @property {EasingFunction} inOutQuart\n * @property {EasingFunction} outInQuart\n * @property {EasingFunction} inQuint\n * @property {EasingFunction} outQuint\n * @property {EasingFunction} inOutQuint\n * @property {EasingFunction} outInQuint\n * @property {EasingFunction} inSine\n * @property {EasingFunction} outSine\n * @property {EasingFunction} inOutSine\n * @property {EasingFunction} outInSine\n * @property {EasingFunction} inCirc\n * @property {EasingFunction} outCirc\n * @property {EasingFunction} inOutCirc\n * @property {EasingFunction} outInCirc\n * @property {EasingFunction} inExpo\n * @property {EasingFunction} outExpo\n * @property {EasingFunction} inOutExpo\n * @property {EasingFunction} outInExpo\n * @property {EasingFunction} inBounce\n * @property {EasingFunction} outBounce\n * @property {EasingFunction} inOutBounce\n * @property {EasingFunction} outInBounce\n * @property {BackEasing} inBack\n * @property {BackEasing} outBack\n * @property {BackEasing} inOutBack\n * @property {BackEasing} outInBack\n * @property {ElasticEasing} inElastic\n * @property {ElasticEasing} outElastic\n * @property {ElasticEasing} inOutElastic\n * @property {ElasticEasing} outInElastic\n */\n\nconst eases = (/*#__PURE__*/ (() => {\n  const list = { linear, irregular, steps, cubicBezier };\n  for (let type in easeTypes) {\n    for (let name in easeInFunctions) {\n      const easeIn = easeInFunctions[name];\n      const easeType = easeTypes[type];\n      list[type + name] = /** @type {EasesFactory|EasingFunction} */(\n        name === emptyString || name === 'Back' || name === 'Elastic' ?\n        (a, b) => easeType(/** @type {EasesFactory} */(easeIn)(a, b)) :\n        easeType(/** @type {EasingFunction} */(easeIn))\n      );\n    }\n  }\n  return /** @type {EasesFunctions} */(list);\n})());\n\n/** @type {Record<String, EasingFunction>} */\nconst JSEasesLookups = { linear: none };\n\n/**\n * @param  {EasingParam} ease\n * @return {EasingFunction}\n */\nconst parseEasings = ease => isFnc(ease) ? ease :\n  isStr(ease) ? parseEaseString(/** @type {String} */(ease), eases, JSEasesLookups) :\n  none;\n\n\n\n\nconst propertyNamesCache = {};\n\n/**\n * @param  {String} propertyName\n * @param  {Target} target\n * @param  {tweenTypes} tweenType\n * @return {String}\n */\nconst sanitizePropertyName = (propertyName, target, tweenType) => {\n  if (tweenType === tweenTypes.TRANSFORM) {\n    const t = shortTransforms.get(propertyName);\n    return t ? t : propertyName;\n  } else if (\n    tweenType === tweenTypes.CSS ||\n    // Handle special cases where properties like \"strokeDashoffset\" needs to be set as \"stroke-dashoffset\"\n    // but properties like \"baseFrequency\" should stay in lowerCamelCase\n    (tweenType === tweenTypes.ATTRIBUTE && (isSvg(target) && propertyName in /** @type {DOMTarget} */(target).style))\n  ) {\n    const cachedPropertyName = propertyNamesCache[propertyName];\n    if (cachedPropertyName) {\n      return cachedPropertyName;\n    } else {\n      const lowerCaseName = propertyName ? toLowerCase(propertyName) : propertyName;\n      propertyNamesCache[propertyName] = lowerCaseName;\n      return lowerCaseName;\n    }\n  } else {\n    return propertyName;\n  }\n};\n\n\n\n\nconst angleUnitsMap = { 'deg': 1, 'rad': 180 / PI, 'turn': 360 };\nconst convertedValuesCache = {};\n\n/**\n * @param  {DOMTarget} el\n * @param  {TweenDecomposedValue} decomposedValue\n * @param  {String} unit\n * @param  {Boolean} [force]\n * @return {TweenDecomposedValue}\n */\nconst convertValueUnit = (el, decomposedValue, unit, force = false) => {\n  const currentUnit = decomposedValue.u;\n  const currentNumber = decomposedValue.n;\n  if (decomposedValue.t === valueTypes.UNIT && currentUnit === unit) { // TODO: Check if checking against the same unit string is necessary\n    return decomposedValue;\n  }\n  const cachedKey = currentNumber + currentUnit + unit;\n  const cached = convertedValuesCache[cachedKey];\n  if (!isUnd(cached) && !force) {\n    decomposedValue.n = cached;\n  } else {\n    let convertedValue;\n    if (currentUnit in angleUnitsMap) {\n      convertedValue = currentNumber * angleUnitsMap[currentUnit] / angleUnitsMap[unit];\n    } else {\n      const baseline = 100;\n      const tempEl = /** @type {DOMTarget} */(el.cloneNode());\n      const parentNode = el.parentNode;\n      const parentEl = (parentNode && (parentNode !== doc)) ? parentNode : doc.body;\n      parentEl.appendChild(tempEl);\n      const elStyle = tempEl.style;\n      elStyle.width = baseline + currentUnit;\n      const currentUnitWidth = /** @type {HTMLElement} */(tempEl).offsetWidth || baseline;\n      elStyle.width = baseline + unit;\n      const newUnitWidth = /** @type {HTMLElement} */(tempEl).offsetWidth || baseline;\n      const factor = currentUnitWidth / newUnitWidth;\n      parentEl.removeChild(tempEl);\n      convertedValue = factor * currentNumber;\n    }\n    decomposedValue.n = convertedValue;\n    convertedValuesCache[cachedKey] = convertedValue;\n  }\n  decomposedValue.t === valueTypes.UNIT;\n  decomposedValue.u = unit;\n  return decomposedValue;\n};\n\n\n\n\n/**\n * @template {Renderable} T\n * @param {T} renderable\n * @return {T}\n */\nconst cleanInlineStyles = renderable => {\n  // Allow cleanInlineStyles() to be called on timelines\n  if (renderable._hasChildren) {\n    forEachChildren(renderable, cleanInlineStyles, true);\n  } else {\n    const animation = /** @type {JSAnimation} */(renderable);\n    animation.pause();\n    forEachChildren(animation, (/** @type {Tween} */tween) => {\n      const tweenProperty = tween.property;\n      const tweenTarget = tween.target;\n      if (tweenTarget[isDomSymbol]) {\n        const targetStyle = /** @type {DOMTarget} */(tweenTarget).style;\n        const originalInlinedValue = animation._inlineStyles[tweenProperty];\n        if (tween._tweenType === tweenTypes.TRANSFORM) {\n          const cachedTransforms = tweenTarget[transformsSymbol];\n          if (isUnd(originalInlinedValue) || originalInlinedValue === emptyString) {\n            delete cachedTransforms[tweenProperty];\n          } else {\n            cachedTransforms[tweenProperty] = originalInlinedValue;\n          }\n          if (tween._renderTransforms) {\n            if (!Object.keys(cachedTransforms).length) {\n              targetStyle.removeProperty('transform');\n            } else {\n              let str = emptyString;\n              for (let key in cachedTransforms) {\n                str += transformsFragmentStrings[key] + cachedTransforms[key] + ') ';\n              }\n              targetStyle.transform = str;\n            }\n          }\n        } else {\n          if (isUnd(originalInlinedValue) || originalInlinedValue === emptyString) {\n            targetStyle.removeProperty(tweenProperty);\n          } else {\n            targetStyle[tweenProperty] = originalInlinedValue;\n          }\n        }\n        if (animation._tail === tween) {\n          animation.targets.forEach(t => {\n            if (t.getAttribute && t.getAttribute('style') === emptyString) {\n              t.removeAttribute('style');\n            }          });\n        }\n      }\n    });\n  }\n  return renderable;\n};\n\n// Defines decomposed values target objects only once and mutate their properties later to avoid GC\n// TODO: Maybe move the objects creation to values.js and use the decompose function to create the base object\nconst fromTargetObject = createDecomposedValueTargetObject();\nconst toTargetObject = createDecomposedValueTargetObject();\nconst toFunctionStore = { func: null };\nconst keyframesTargetArray = [null];\nconst fastSetValuesArray = [null, null];\n/** @type {TweenKeyValue} */\nconst keyObjectTarget = { to: null };\n\nlet tweenId = 0;\nlet keyframes;\n/** @type {TweenParamsOptions & TweenValues} */\nlet key;\n\n/**\n * @param {DurationKeyframes | PercentageKeyframes} keyframes\n * @param {AnimationParams} parameters\n * @return {AnimationParams}\n */\nconst generateKeyframes = (keyframes, parameters) => {\n  /** @type {AnimationParams} */\n  const properties = {};\n  if (isArr(keyframes)) {\n    const propertyNames = [].concat(.../** @type {DurationKeyframes} */(keyframes).map(key => Object.keys(key))).filter(isKey);\n    for (let i = 0, l = propertyNames.length; i < l; i++) {\n      const propName = propertyNames[i];\n      const propArray = /** @type {DurationKeyframes} */(keyframes).map(key => {\n        /** @type {TweenKeyValue} */\n        const newKey = {};\n        for (let p in key) {\n          const keyValue = /** @type {TweenPropValue} */(key[p]);\n          if (isKey(p)) {\n            if (p === propName) {\n              newKey.to = keyValue;\n            }\n          } else {\n            newKey[p] = keyValue;\n          }\n        }\n        return newKey;\n      });\n      properties[propName] = /** @type {ArraySyntaxValue} */(propArray);\n    }\n\n  } else {\n    const totalDuration = /** @type {Number} */(setValue(parameters.duration, globals.defaults.duration));\n    const keys = Object.keys(keyframes)\n    .map(key => { return {o: parseFloat(key) / 100, p: keyframes[key]} })\n    .sort((a, b) => a.o - b.o);\n    keys.forEach(key => {\n      const offset = key.o;\n      const prop = key.p;\n      for (let name in prop) {\n        if (isKey(name)) {\n          let propArray = /** @type {Array} */(properties[name]);\n          if (!propArray) propArray = properties[name] = [];\n          const duration = offset * totalDuration;\n          let length = propArray.length;\n          let prevKey = propArray[length - 1];\n          const keyObj = { to: prop[name] };\n          let durProgress = 0;\n          for (let i = 0; i < length; i++) {\n            durProgress += propArray[i].duration;\n          }\n          if (length === 1) {\n            keyObj.from = prevKey.to;\n          }\n          if (prop.ease) {\n            keyObj.ease = prop.ease;\n          }\n          keyObj.duration = duration - (length ? durProgress : 0);\n          propArray.push(keyObj);\n        }\n      }\n      return key;\n    });\n\n    for (let name in properties) {\n      const propArray = /** @type {Array} */(properties[name]);\n      let prevEase;\n      // let durProgress = 0\n      for (let i = 0, l = propArray.length; i < l; i++) {\n        const prop = propArray[i];\n        // Emulate WAPPI easing parameter position\n        const currentEase = prop.ease;\n        prop.ease = prevEase ? prevEase : undefined;\n        prevEase = currentEase;\n        // durProgress += prop.duration;\n        // if (i === l - 1 && durProgress !== totalDuration) {\n        //   propArray.push({ from: prop.to, ease: prop.ease, duration: totalDuration - durProgress })\n        // }\n      }\n      if (!propArray[0].duration) {\n        propArray.shift();\n      }\n    }\n\n  }\n\n  return properties;\n};\n\nclass JSAnimation extends Timer {\n  /**\n   * @param {TargetsParam} targets\n   * @param {AnimationParams} parameters\n   * @param {Timeline} [parent]\n   * @param {Number} [parentPosition]\n   * @param {Boolean} [fastSet=false]\n   * @param {Number} [index=0]\n   * @param {Number} [length=0]\n   */\n  constructor(\n    targets,\n    parameters,\n    parent,\n    parentPosition,\n    fastSet = false,\n    index = 0,\n    length = 0\n  ) {\n\n    super(/** @type {TimerParams&AnimationParams} */(parameters), parent, parentPosition);\n\n    const parsedTargets = registerTargets(targets);\n    const targetsLength = parsedTargets.length;\n\n    // If the parameters object contains a \"keyframes\" property, convert all the keyframes values to regular properties\n\n    const kfParams = /** @type {AnimationParams} */(parameters).keyframes;\n    const params = /** @type {AnimationParams} */(kfParams ? mergeObjects(generateKeyframes(/** @type {DurationKeyframes} */(kfParams), parameters), parameters) : parameters);\n\n    const {\n      delay,\n      duration,\n      ease,\n      playbackEase,\n      modifier,\n      composition,\n      onRender,\n    } = params;\n\n    const animDefaults = parent ? parent.defaults : globals.defaults;\n    const animaPlaybackEase = setValue(playbackEase, animDefaults.playbackEase);\n    const animEase = animaPlaybackEase ? parseEasings(animaPlaybackEase) : null;\n    const hasSpring = !isUnd(ease) && !isUnd(/** @type {Spring} */(ease).ease);\n    const tEasing = hasSpring ? /** @type {Spring} */(ease).ease : setValue(ease, animEase ? 'linear' : animDefaults.ease);\n    const tDuration = hasSpring ? /** @type {Spring} */(ease).duration : setValue(duration, animDefaults.duration);\n    const tDelay = setValue(delay, animDefaults.delay);\n    const tModifier = modifier || animDefaults.modifier;\n    // If no composition is defined and the targets length is high (>= 1000) set the composition to 'none' (0) for faster tween creation\n    const tComposition = isUnd(composition) && targetsLength >= K ? compositionTypes.none : !isUnd(composition) ? composition : animDefaults.composition;\n    // TODO: Do not create an empty object until we know the animation will generate inline styles\n    const animInlineStyles = {};\n    // const absoluteOffsetTime = this._offset;\n    const absoluteOffsetTime = this._offset + (parent ? parent._offset : 0);\n\n    let iterationDuration = NaN;\n    let iterationDelay = NaN;\n    let animationAnimationLength = 0;\n    let shouldTriggerRender = 0;\n\n    for (let targetIndex = 0; targetIndex < targetsLength; targetIndex++) {\n\n      const target = parsedTargets[targetIndex];\n      const ti = index || targetIndex;\n      const tl = length || targetsLength;\n\n      let lastTransformGroupIndex = NaN;\n      let lastTransformGroupLength = NaN;\n\n      for (let p in params) {\n\n        if (isKey(p)) {\n\n          const tweenType = getTweenType(target, p);\n\n          const propName = sanitizePropertyName(p, target, tweenType);\n\n          let propValue = params[p];\n\n          const isPropValueArray = isArr(propValue);\n\n          if (fastSet && !isPropValueArray) {\n            fastSetValuesArray[0] = propValue;\n            fastSetValuesArray[1] = propValue;\n            propValue = fastSetValuesArray;\n          }\n\n          // TODO: Allow nested keyframes inside ObjectValue value (prop: { to: [.5, 1, .75, 2, 3] })\n          // Normalize property values to valid keyframe syntax:\n          // [x, y] to [{to: [x, y]}] or {to: x} to [{to: x}] or keep keys syntax [{}, {}, {}...]\n          // const keyframes = isArr(propValue) ? propValue.length === 2 && !isObj(propValue[0]) ? [{ to: propValue }] : propValue : [propValue];\n          if (isPropValueArray) {\n            const arrayLength = /** @type {Array} */(propValue).length;\n            const isNotObjectValue = !isObj(propValue[0]);\n            // Convert [x, y] to [{to: [x, y]}]\n            if (arrayLength === 2 && isNotObjectValue) {\n              keyObjectTarget.to = /** @type {TweenParamValue} */(/** @type {unknown} */(propValue));\n              keyframesTargetArray[0] = keyObjectTarget;\n              keyframes = keyframesTargetArray;\n            // Convert [x, y, z] to [[x, y], z]\n            } else if (arrayLength > 2 && isNotObjectValue) {\n              keyframes = [];\n              /** @type {Array.<Number>} */(propValue).forEach((v, i) => {\n                if (!i) {\n                  fastSetValuesArray[0] = v;\n                } else if (i === 1) {\n                  fastSetValuesArray[1] = v;\n                  keyframes.push(fastSetValuesArray);\n                } else {\n                  keyframes.push(v);\n                }\n              });\n            } else {\n              keyframes = /** @type {Array.<TweenKeyValue>} */(propValue);\n            }\n          } else {\n            keyframesTargetArray[0] = propValue;\n            keyframes = keyframesTargetArray;\n          }\n\n          let siblings = null;\n          let prevTween = null;\n          let firstTweenChangeStartTime = NaN;\n          let lastTweenChangeEndTime = 0;\n          let tweenIndex = 0;\n\n          for (let l = keyframes.length; tweenIndex < l; tweenIndex++) {\n\n            const keyframe = keyframes[tweenIndex];\n\n            if (isObj(keyframe)) {\n              key = keyframe;\n            } else {\n              keyObjectTarget.to = /** @type {TweenParamValue} */(keyframe);\n              key = keyObjectTarget;\n            }\n\n            toFunctionStore.func = null;\n\n            const computedToValue = getFunctionValue(key.to, target, ti, tl, toFunctionStore);\n\n            let tweenToValue;\n            // Allows function based values to return an object syntax value ({to: v})\n            if (isObj(computedToValue) && !isUnd(computedToValue.to)) {\n              key = computedToValue;\n              tweenToValue = computedToValue.to;\n            } else {\n              tweenToValue = computedToValue;\n            }\n            const tweenFromValue = getFunctionValue(key.from, target, ti, tl);\n            const keyEasing = key.ease;\n            const hasSpring = !isUnd(keyEasing) && !isUnd(/** @type {Spring} */(keyEasing).ease);\n            // Easing are treated differently and don't accept function based value to prevent having to pass a function wrapper that returns an other function all the time\n            const tweenEasing = hasSpring ? /** @type {Spring} */(keyEasing).ease : keyEasing || tEasing;\n            // Calculate default individual keyframe duration by dividing the tl of keyframes\n            const tweenDuration = hasSpring ? /** @type {Spring} */(keyEasing).duration : getFunctionValue(setValue(key.duration, (l > 1 ? getFunctionValue(tDuration, target, ti, tl) / l : tDuration)), target, ti, tl);\n            // Default delay value should only be applied to the first tween\n            const tweenDelay = getFunctionValue(setValue(key.delay, (!tweenIndex ? tDelay : 0)), target, ti, tl);\n            const computedComposition = getFunctionValue(setValue(key.composition, tComposition), target, ti, tl);\n            const tweenComposition = isNum(computedComposition) ? computedComposition : compositionTypes[computedComposition];\n            // Modifiers are treated differently and don't accept function based value to prevent having to pass a function wrapper\n            const tweenModifier = key.modifier || tModifier;\n            const hasFromvalue = !isUnd(tweenFromValue);\n            const hasToValue = !isUnd(tweenToValue);\n            const isFromToArray = isArr(tweenToValue);\n            const isFromToValue = isFromToArray || (hasFromvalue && hasToValue);\n            const tweenStartTime = prevTween ? lastTweenChangeEndTime + tweenDelay : tweenDelay;\n            const absoluteStartTime = absoluteOffsetTime + tweenStartTime;\n\n            // Force a onRender callback if the animation contains at least one from value and autoplay is set to false\n            if (!shouldTriggerRender && (hasFromvalue || isFromToArray)) shouldTriggerRender = 1;\n\n            let prevSibling = prevTween;\n\n            if (tweenComposition !== compositionTypes.none) {\n              if (!siblings) siblings = getTweenSiblings(target, propName);\n              let nextSibling = siblings._head;\n              // Iterate trough all the next siblings until we find a sibling with an equal or inferior start time\n              while (nextSibling && !nextSibling._isOverridden && nextSibling._absoluteStartTime <= absoluteStartTime) {\n                prevSibling = nextSibling;\n                nextSibling = nextSibling._nextRep;\n                // Overrides all the next siblings if the next sibling starts at the same time of after as the new tween start time\n                if (nextSibling && nextSibling._absoluteStartTime >= absoluteStartTime) {\n                  while (nextSibling) {\n                    overrideTween(nextSibling);\n                    // This will ends both the current while loop and the upper one once all the next sibllings have been overriden\n                    nextSibling = nextSibling._nextRep;\n                  }\n                }\n              }\n            }\n\n            // Decompose values\n            if (isFromToValue) {\n              decomposeRawValue(isFromToArray ? getFunctionValue(tweenToValue[0], target, ti, tl) : tweenFromValue, fromTargetObject);\n              decomposeRawValue(isFromToArray ? getFunctionValue(tweenToValue[1], target, ti, tl, toFunctionStore) : tweenToValue, toTargetObject);\n              if (fromTargetObject.t === valueTypes.NUMBER) {\n                if (prevSibling) {\n                  if (prevSibling._valueType === valueTypes.UNIT) {\n                    fromTargetObject.t = valueTypes.UNIT;\n                    fromTargetObject.u = prevSibling._unit;\n                  }\n                } else {\n                  decomposeRawValue(\n                    getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles),\n                    decomposedOriginalValue\n                  );\n                  if (decomposedOriginalValue.t === valueTypes.UNIT) {\n                    fromTargetObject.t = valueTypes.UNIT;\n                    fromTargetObject.u = decomposedOriginalValue.u;\n                  }\n                }\n              }\n            } else {\n              if (hasToValue) {\n                decomposeRawValue(tweenToValue, toTargetObject);\n              } else {\n                if (prevTween) {\n                  decomposeTweenValue(prevTween, toTargetObject);\n                } else {\n                  // No need to get and parse the original value if the tween is part of a timeline and has a previous sibling part of the same timeline\n                  decomposeRawValue(parent && prevSibling && prevSibling.parent.parent === parent ? prevSibling._value :\n                  getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles), toTargetObject);\n                }\n              }\n              if (hasFromvalue) {\n                decomposeRawValue(tweenFromValue, fromTargetObject);\n              } else {\n                if (prevTween) {\n                  decomposeTweenValue(prevTween, fromTargetObject);\n                } else {\n                  decomposeRawValue(parent && prevSibling && prevSibling.parent.parent === parent ? prevSibling._value :\n                  // No need to get and parse the original value if the tween is part of a timeline and has a previous sibling part of the same timeline\n                  getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles), fromTargetObject);\n                }\n              }\n            }\n\n            // Apply operators\n            if (fromTargetObject.o) {\n              fromTargetObject.n = getRelativeValue(\n                !prevSibling ? decomposeRawValue(\n                  getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles),\n                  decomposedOriginalValue\n                ).n : prevSibling._toNumber,\n                fromTargetObject.n,\n                fromTargetObject.o\n              );\n            }\n\n            if (toTargetObject.o) {\n              toTargetObject.n = getRelativeValue(fromTargetObject.n, toTargetObject.n, toTargetObject.o);\n            }\n\n            // Values omogenisation in cases of type difference between \"from\" and \"to\"\n            if (fromTargetObject.t !== toTargetObject.t) {\n              if (fromTargetObject.t === valueTypes.COMPLEX || toTargetObject.t === valueTypes.COMPLEX) {\n                const complexValue = fromTargetObject.t === valueTypes.COMPLEX ? fromTargetObject : toTargetObject;\n                const notComplexValue = fromTargetObject.t === valueTypes.COMPLEX ? toTargetObject : fromTargetObject;\n                notComplexValue.t = valueTypes.COMPLEX;\n                notComplexValue.s = cloneArray(complexValue.s);\n                notComplexValue.d = complexValue.d.map(() => notComplexValue.n);\n              } else if (fromTargetObject.t === valueTypes.UNIT || toTargetObject.t === valueTypes.UNIT) {\n                const unitValue = fromTargetObject.t === valueTypes.UNIT ? fromTargetObject : toTargetObject;\n                const notUnitValue = fromTargetObject.t === valueTypes.UNIT ? toTargetObject : fromTargetObject;\n                notUnitValue.t = valueTypes.UNIT;\n                notUnitValue.u = unitValue.u;\n              } else if (fromTargetObject.t === valueTypes.COLOR || toTargetObject.t === valueTypes.COLOR) {\n                const colorValue = fromTargetObject.t === valueTypes.COLOR ? fromTargetObject : toTargetObject;\n                const notColorValue = fromTargetObject.t === valueTypes.COLOR ? toTargetObject : fromTargetObject;\n                notColorValue.t = valueTypes.COLOR;\n                notColorValue.s = colorValue.s;\n                notColorValue.d = [0, 0, 0, 1];\n              }\n            }\n\n            // Unit conversion\n            if (fromTargetObject.u !== toTargetObject.u) {\n              let valueToConvert = toTargetObject.u ? fromTargetObject : toTargetObject;\n              valueToConvert = convertValueUnit(/** @type {DOMTarget} */(target), valueToConvert, toTargetObject.u ? toTargetObject.u : fromTargetObject.u, false);\n              // TODO:\n              // convertValueUnit(target, to.u ? from : to, to.u ? to.u : from.u);\n            }\n\n            // Fill in non existing complex values\n            if (toTargetObject.d && fromTargetObject.d && (toTargetObject.d.length !== fromTargetObject.d.length)) {\n              const longestValue = fromTargetObject.d.length > toTargetObject.d.length ? fromTargetObject : toTargetObject;\n              const shortestValue = longestValue === fromTargetObject ? toTargetObject : fromTargetObject;\n              // TODO: Check if n should be used instead of 0 for default complex values\n              shortestValue.d = longestValue.d.map((_, i) => isUnd(shortestValue.d[i]) ? 0 : shortestValue.d[i]);\n              shortestValue.s = cloneArray(longestValue.s);\n            }\n\n            // Tween factory\n\n            // Rounding is necessary here to minimize floating point errors\n            const tweenUpdateDuration = round(+tweenDuration || minValue, 12);\n\n            /** @type {Tween} */\n            const tween = {\n              parent: this,\n              id: tweenId++,\n              property: propName,\n              target: target,\n              _value: null,\n              _func: toFunctionStore.func,\n              _ease: parseEasings(tweenEasing),\n              _fromNumbers: cloneArray(fromTargetObject.d),\n              _toNumbers: cloneArray(toTargetObject.d),\n              _strings: cloneArray(toTargetObject.s),\n              _fromNumber: fromTargetObject.n,\n              _toNumber: toTargetObject.n,\n              _numbers: cloneArray(fromTargetObject.d), // For additive tween and animatables\n              _number: fromTargetObject.n, // For additive tween and animatables\n              _unit: toTargetObject.u,\n              _modifier: tweenModifier,\n              _currentTime: 0,\n              _startTime: tweenStartTime,\n              _delay: +tweenDelay,\n              _updateDuration: tweenUpdateDuration,\n              _changeDuration: tweenUpdateDuration,\n              _absoluteStartTime: absoluteStartTime,\n              // NOTE: Investigate bit packing to stores ENUM / BOOL\n              _tweenType: tweenType,\n              _valueType: toTargetObject.t,\n              _composition: tweenComposition,\n              _isOverlapped: 0,\n              _isOverridden: 0,\n              _renderTransforms: 0,\n              _prevRep: null, // For replaced tween\n              _nextRep: null, // For replaced tween\n              _prevAdd: null, // For additive tween\n              _nextAdd: null, // For additive tween\n              _prev: null,\n              _next: null,\n            };\n\n            if (tweenComposition !== compositionTypes.none) {\n              composeTween(tween, siblings);\n            }\n\n            if (isNaN(firstTweenChangeStartTime)) {\n              firstTweenChangeStartTime = tween._startTime;\n            }\n            // Rounding is necessary here to minimize floating point errors\n            lastTweenChangeEndTime = round(tweenStartTime + tweenUpdateDuration, 12);\n            prevTween = tween;\n            animationAnimationLength++;\n\n            addChild(this, tween);\n\n          }\n\n          // Update animation timings with the added tweens properties\n\n          if (isNaN(iterationDelay) || firstTweenChangeStartTime < iterationDelay) {\n            iterationDelay = firstTweenChangeStartTime;\n          }\n\n          if (isNaN(iterationDuration) || lastTweenChangeEndTime > iterationDuration) {\n            iterationDuration = lastTweenChangeEndTime;\n          }\n\n          // TODO: Find a way to inline tween._renderTransforms = 1 here\n          if (tweenType === tweenTypes.TRANSFORM) {\n            lastTransformGroupIndex = animationAnimationLength - tweenIndex;\n            lastTransformGroupLength = animationAnimationLength;\n          }\n\n        }\n\n      }\n\n      // Set _renderTransforms to last transform property to correctly render the transforms list\n      if (!isNaN(lastTransformGroupIndex)) {\n        let i = 0;\n        forEachChildren(this, (/** @type {Tween} */tween) => {\n          if (i >= lastTransformGroupIndex && i < lastTransformGroupLength) {\n            tween._renderTransforms = 1;\n            if (tween._composition === compositionTypes.blend) {\n              forEachChildren(additive.animation, (/** @type {Tween} */additiveTween) => {\n                if (additiveTween.id === tween.id) {\n                  additiveTween._renderTransforms = 1;\n                }\n              });\n            }\n          }\n          i++;\n        });\n      }\n\n    }\n\n    if (!targetsLength) {\n      console.warn(`No target found. Make sure the element you're trying to animate is accessible before creating your animation.`);\n    }\n\n    if (iterationDelay) {\n      forEachChildren(this, (/** @type {Tween} */tween) => {\n        // If (startTime - delay) equals 0, this means the tween is at the begining of the animation so we need to trim the delay too\n        if (!(tween._startTime - tween._delay)) {\n          tween._delay -= iterationDelay;\n        }\n        tween._startTime -= iterationDelay;\n      });\n      iterationDuration -= iterationDelay;\n    } else {\n      iterationDelay = 0;\n    }\n\n    // Prevents iterationDuration to be NaN if no valid animatable props have been provided\n    // Prevents _iterationCount to be NaN if no valid animatable props have been provided\n    if (!iterationDuration) {\n      iterationDuration = minValue;\n      this.iterationCount = 0;\n    }\n    /** @type {TargetsArray} */\n    this.targets = parsedTargets;\n    /** @type {Number} */\n    this.duration = iterationDuration === minValue ? minValue : clampInfinity(((iterationDuration + this._loopDelay) * this.iterationCount) - this._loopDelay) || minValue;\n    /** @type {Callback<this>} */\n    this.onRender = onRender || animDefaults.onRender;\n    /** @type {EasingFunction} */\n    this._ease = animEase;\n    /** @type {Number} */\n    this._delay = iterationDelay;\n    // NOTE: I'm keeping delay values separated from offsets in timelines because delays can override previous tweens and it could be confusing to debug a timeline with overridden tweens and no associated visible delays.\n    // this._delay = parent ? 0 : iterationDelay;\n    // this._offset += parent ? iterationDelay : 0;\n    /** @type {Number} */\n    this.iterationDuration = iterationDuration;\n    /** @type {{}} */\n    this._inlineStyles = animInlineStyles;\n\n    if (!this._autoplay && shouldTriggerRender) this.onRender(this);\n  }\n\n  /**\n   * @param  {Number} newDuration\n   * @return {this}\n   */\n  stretch(newDuration) {\n    const currentDuration = this.duration;\n    if (currentDuration === normalizeTime(newDuration)) return this;\n    const timeScale = newDuration / currentDuration;\n    // NOTE: Find a better way to handle the stretch of an animation after stretch = 0\n    forEachChildren(this, (/** @type {Tween} */tween) => {\n      // Rounding is necessary here to minimize floating point errors\n      tween._updateDuration = normalizeTime(tween._updateDuration * timeScale);\n      tween._changeDuration = normalizeTime(tween._changeDuration * timeScale);\n      tween._currentTime *= timeScale;\n      tween._startTime *= timeScale;\n      tween._absoluteStartTime *= timeScale;\n    });\n    return super.stretch(newDuration);\n  }\n\n  /**\n   * @return {this}\n   */\n  refresh() {\n    forEachChildren(this, (/** @type {Tween} */tween) => {\n      const tweenFunc = tween._func;\n      if (tweenFunc) {\n        const ogValue = getOriginalAnimatableValue(tween.target, tween.property, tween._tweenType);\n        decomposeRawValue(ogValue, decomposedOriginalValue);\n        decomposeRawValue(tweenFunc(), toTargetObject);\n        tween._fromNumbers = cloneArray(decomposedOriginalValue.d);\n        tween._fromNumber = decomposedOriginalValue.n;\n        tween._toNumbers = cloneArray(toTargetObject.d);\n        tween._strings = cloneArray(toTargetObject.s);\n        // Make sure to apply relative operators https://github.com/juliangarnier/anime/issues/1025\n        tween._toNumber = toTargetObject.o ? getRelativeValue(decomposedOriginalValue.n, toTargetObject.n, toTargetObject.o) : toTargetObject.n;\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Cancel the animation and revert all the values affected by this animation to their original state\n   * @return {this}\n   */\n  revert() {\n    super.revert();\n    return cleanInlineStyles(this);\n  }\n\n  /**\n   * @param  {Callback<this>} [callback]\n   * @return {Promise}\n   */\n  then(callback) {\n    return super.then(callback);\n  }\n\n}\n\n/**\n * @param {TargetsParam} targets\n * @param {AnimationParams} parameters\n * @return {JSAnimation}\n */\nconst animate = (targets, parameters) => new JSAnimation(targets, parameters, null, 0, false).init();\n\n\n\n\n/**\n * Converts an easing function into a valid CSS linear() timing function string\n * @param {EasingFunction} fn\n * @param {number} [samples=100]\n * @returns {string} CSS linear() timing function\n */\nconst easingToLinear = (fn, samples = 100) => {\n  const points = [];\n  for (let i = 0; i <= samples; i++) points.push(fn(i / samples));\n  return `linear(${points.join(', ')})`;\n};\n\nconst WAAPIEasesLookups = {\n  in: 'ease-in',\n  out: 'ease-out',\n  inOut: 'ease-in-out',\n};\n\nconst WAAPIeases = /*#__PURE__*/(() => {\n  const list = {};\n  for (let type in easeTypes) list[type] = a => easeTypes[type](easeInPower(a));\n  return /** @type {Record<String, EasingFunction>} */(list);\n})();\n\n/**\n * @param  {EasingParam} ease\n * @return {String}\n */\nconst parseWAAPIEasing = (ease) => {\n  let parsedEase = WAAPIEasesLookups[ease];\n  if (parsedEase) return parsedEase;\n  parsedEase = 'linear';\n  if (isStr(ease)) {\n    if (\n      stringStartsWith(ease, 'linear') ||\n      stringStartsWith(ease, 'cubic-') ||\n      stringStartsWith(ease, 'steps') ||\n      stringStartsWith(ease, 'ease')\n    ) {\n      parsedEase = ease;\n    } else if (stringStartsWith(ease, 'cubicB')) {\n      parsedEase = toLowerCase(ease);\n    } else {\n      const parsed = parseEaseString(ease, WAAPIeases, WAAPIEasesLookups);\n      if (isFnc(parsed)) parsedEase = parsed === none ? 'linear' : easingToLinear(parsed);\n    }\n    WAAPIEasesLookups[ease] = parsedEase;\n  } else if (isFnc(ease)) {\n    const easing = easingToLinear(ease);\n    if (easing) parsedEase = easing;\n  } else if (/** @type {Spring} */(ease).ease) {\n    parsedEase = easingToLinear(/** @type {Spring} */(ease).ease);\n  }\n  return parsedEase;\n};\n\n/**\n * @typedef {String|Number|Array<String>|Array<Number>} WAAPITweenValue\n */\n\n/**\n * @callback WAAPIFunctionvalue\n * @param {DOMTarget} target - The animated target\n * @param {Number} index - The target index\n * @param {Number} length - The total number of animated targets\n * @return {WAAPITweenValue}\n */\n\n/**\n * @typedef {WAAPITweenValue|WAAPIFunctionvalue|Array<String|Number|WAAPIFunctionvalue>} WAAPIKeyframeValue\n */\n\n/**\n * @typedef {(animation: WAAPIAnimation) => void} WAAPICallback\n */\n\n/**\n * @typedef {Object} WAAPITweenOptions\n * @property {WAAPIKeyframeValue} [to]\n * @property {WAAPIKeyframeValue} [from]\n * @property {Number|WAAPIFunctionvalue} [duration]\n * @property {Number|WAAPIFunctionvalue} [delay]\n * @property {EasingParam} [ease]\n * @property {CompositeOperation} [composition]\n */\n\n/**\n * @typedef {Object} WAAPIAnimationOptions\n * @property {Number|Boolean} [loop]\n * @property {Boolean} [Reversed]\n * @property {Boolean} [Alternate]\n * @property {Boolean|ScrollObserver} [autoplay]\n * @property {Number} [playbackRate]\n * @property {Number|WAAPIFunctionvalue} [duration]\n * @property {Number|WAAPIFunctionvalue} [delay]\n * @property {EasingParam} [ease]\n * @property {CompositeOperation} [composition]\n * @property {WAAPICallback} [onComplete]\n */\n\n/**\n * @typedef {Record<String, WAAPIKeyframeValue | WAAPIAnimationOptions | Boolean | ScrollObserver | WAAPICallback | EasingParam | WAAPITweenOptions> & WAAPIAnimationOptions} WAAPIAnimationParams\n */\n\nconst transformsShorthands = ['x', 'y', 'z'];\nconst commonDefaultPXProperties = [\n  'perspective',\n  'width',\n  'height',\n  'margin',\n  'padding',\n  'top',\n  'right',\n  'bottom',\n  'left',\n  'borderWidth',\n  'fontSize',\n  'borderRadius',\n  ...transformsShorthands\n];\n\nconst validIndividualTransforms = /*#__PURE__*/ (() => [...transformsShorthands, ...validTransforms.filter(t => ['X', 'Y', 'Z'].some(axis => t.endsWith(axis)))])();\n\nlet transformsPropertiesRegistered = null;\n\nconst WAAPIAnimationsLookups = {\n  _head: null,\n  _tail: null,\n};\n\n/**\n * @param {DOMTarget} $el\n * @param {String} [property]\n * @param {WAAPIAnimation} [parent]\n */\nconst removeWAAPIAnimation = ($el, property, parent) => {\n  let nextLookup = WAAPIAnimationsLookups._head;\n  while (nextLookup) {\n    const next = nextLookup._next;\n    const matchTarget = nextLookup.$el === $el;\n    const matchProperty = !property || nextLookup.property === property;\n    const matchParent = !parent || nextLookup.parent === parent;\n    if (matchTarget && matchProperty && matchParent) {\n      const anim = nextLookup.animation;\n      try { anim.commitStyles(); } catch {}      anim.cancel();\n      removeChild(WAAPIAnimationsLookups, nextLookup);\n      const lookupParent = nextLookup.parent;\n      if (lookupParent) {\n        lookupParent._completed++;\n        if (lookupParent.animations.length === lookupParent._completed) {\n          lookupParent.completed = true;\n          if (!lookupParent.muteCallbacks) {\n            lookupParent.paused = true;\n            lookupParent.onComplete(lookupParent);\n            lookupParent._resolve(lookupParent);\n          }\n        }\n      }\n    }\n    nextLookup = next;\n  }\n};\n\n/**\n * @param {WAAPIAnimation} parent\n * @param {DOMTarget} $el\n * @param {String} property\n * @param {PropertyIndexedKeyframes} keyframes\n * @param {KeyframeAnimationOptions} params\n * @retun {Animation}\n */\nconst addWAAPIAnimation = (parent, $el, property, keyframes, params) => {\n  const animation = $el.animate(keyframes, params);\n  const animTotalDuration = params.delay + (+params.duration * params.iterations);\n  animation.playbackRate = parent._speed;\n  if (parent.paused) animation.pause();\n  if (parent.duration < animTotalDuration) {\n    parent.duration = animTotalDuration;\n    parent.controlAnimation = animation;\n  }\n  parent.animations.push(animation);\n  removeWAAPIAnimation($el, property);\n  addChild(WAAPIAnimationsLookups, { parent, animation, $el, property, _next: null, _prev: null });\n  const handleRemove = () => { removeWAAPIAnimation($el, property, parent); };\n  animation.onremove = handleRemove;\n  animation.onfinish = handleRemove;\n  return animation;\n};\n\n/**\n * @param  {String} propName\n * @param  {WAAPIKeyframeValue} value\n * @param  {DOMTarget} $el\n * @param  {Number} i\n * @param  {Number} targetsLength\n * @return {String}\n */\nconst normalizeTweenValue = (propName, value, $el, i, targetsLength) => {\n  let v = getFunctionValue(/** @type {any} */(value), $el, i, targetsLength);\n  if (!isNum(v)) return v;\n  if (commonDefaultPXProperties.includes(propName) || stringStartsWith(propName, 'translate')) return `${v}px`;\n  if (stringStartsWith(propName, 'rotate') || stringStartsWith(propName, 'skew')) return `${v}deg`;\n  return `${v}`;\n};\n\n/**\n * @param  {DOMTarget} $el\n * @param  {String} propName\n * @param  {WAAPIKeyframeValue} from\n * @param  {WAAPIKeyframeValue} to\n * @param  {Number} i\n * @param  {Number} targetsLength\n * @return {WAAPITweenValue}\n */\nconst parseIndividualTweenValue = ($el, propName, from, to, i, targetsLength) => {\n  /** @type {WAAPITweenValue} */\n  let tweenValue = '0';\n  const computedTo = !isUnd(to) ? normalizeTweenValue(propName, to, $el, i, targetsLength) : getComputedStyle($el)[propName];\n  if (!isUnd(from)) {\n    const computedFrom = normalizeTweenValue(propName, from, $el, i, targetsLength);\n    tweenValue = [computedFrom, computedTo];\n  } else {\n    tweenValue = isArr(to) ? to.map((/** @type {any} */v) => normalizeTweenValue(propName, v, $el, i, targetsLength)) : computedTo;\n  }\n  return tweenValue;\n};\n\nclass WAAPIAnimation {\n/**\n * @param {DOMTargetsParam} targets\n * @param {WAAPIAnimationParams} params\n */\n  constructor(targets, params) {\n\n    if (scope.current) scope.current.register(this);\n\n    // Skip the registration and fallback to no animation in case CSS.registerProperty is not supported\n    if (isNil(transformsPropertiesRegistered)) {\n      if (isBrowser && (isUnd(CSS) || !Object.hasOwnProperty.call(CSS, 'registerProperty'))) {\n        transformsPropertiesRegistered = false;\n      } else {\n        validTransforms.forEach(t => {\n          const isSkew = stringStartsWith(t, 'skew');\n          const isScale = stringStartsWith(t, 'scale');\n          const isRotate = stringStartsWith(t, 'rotate');\n          const isTranslate = stringStartsWith(t, 'translate');\n          const isAngle = isRotate || isSkew;\n          const syntax = isAngle ? '<angle>' : isScale ? \"<number>\" : isTranslate ? \"<length-percentage>\" : \"*\";\n          try {\n            CSS.registerProperty({\n              name: '--' + t,\n              syntax,\n              inherits: false,\n              initialValue: isTranslate ? '0px' : isAngle ? '0deg' : isScale ? '1' : '0',\n            });\n          } catch {}        });\n        transformsPropertiesRegistered = true;\n      }\n    }\n\n    const parsedTargets = registerTargets(targets);\n    const targetsLength = parsedTargets.length;\n\n    if (!targetsLength) {\n      console.warn(`No target found. Make sure the element you're trying to animate is accessible before creating your animation.`);\n    }\n\n    const ease = setValue(params.ease, parseWAAPIEasing(globals.defaults.ease));\n    const spring = /** @type {Spring} */(ease).ease && ease;\n    const autoplay = setValue(params.autoplay, globals.defaults.autoplay);\n    const scroll = autoplay && /** @type {ScrollObserver} */(autoplay).link ? autoplay : false;\n    const alternate = params.alternate && /** @type {Boolean} */(params.alternate) === true;\n    const reversed = params.reversed && /** @type {Boolean} */(params.reversed) === true;\n    const loop = setValue(params.loop, globals.defaults.loop);\n    const iterations = /** @type {Number} */((loop === true || loop === Infinity) ? Infinity : isNum(loop) ? loop + 1 : 1);\n    /** @type {PlaybackDirection} */\n    const direction = alternate ? reversed ? 'alternate-reverse' : 'alternate' : reversed ? 'reverse' : 'normal';\n    /** @type {FillMode} */\n    const fill = 'forwards';\n    /** @type {String} */\n    const easing = parseWAAPIEasing(ease);\n    const timeScale = (globals.timeScale === 1 ? 1 : K);\n\n    /** @type {DOMTargetsArray}] */\n    this.targets = parsedTargets;\n    /** @type {Array<globalThis.Animation>}] */\n    this.animations = [];\n    /** @type {globalThis.Animation}] */\n    this.controlAnimation = null;\n    /** @type {Callback<this>} */\n    this.onComplete = params.onComplete || noop;\n    /** @type {Number} */\n    this.duration = 0;\n    /** @type {Boolean} */\n    this.muteCallbacks = false;\n    /** @type {Boolean} */\n    this.completed = false;\n    /** @type {Boolean} */\n    this.paused = !autoplay || scroll !== false;\n    /** @type {Boolean} */\n    this.reversed = reversed;\n    /** @type {Boolean|ScrollObserver} */\n    this.autoplay = autoplay;\n    /** @type {Number} */\n    this._speed = setValue(params.playbackRate, globals.defaults.playbackRate);\n    /** @type {Function} */\n    this._resolve = noop; // Used by .then()\n    /** @type {Number} */\n    this._completed = 0;\n    /** @type {Array<Object>}] */\n    this._inlineStyles = parsedTargets.map($el => $el.getAttribute('style'));\n\n    parsedTargets.forEach(($el, i) => {\n\n      const cachedTransforms = $el[transformsSymbol];\n\n      const hasIndividualTransforms = validIndividualTransforms.some(t => params.hasOwnProperty(t));\n\n      /** @type {Number} */\n      const duration = (spring ? /** @type {Spring} */(spring).duration : getFunctionValue(setValue(params.duration, globals.defaults.duration), $el, i, targetsLength)) * timeScale;\n      /** @type {Number} */\n      const delay = getFunctionValue(setValue(params.delay, globals.defaults.delay), $el, i, targetsLength) * timeScale;\n      /** @type {CompositeOperation} */\n      const composite = /** @type {CompositeOperation} */(setValue(params.composition, 'replace'));\n\n      for (let name in params) {\n        if (!isKey(name)) continue;\n        /** @type {PropertyIndexedKeyframes} */\n        const keyframes = {};\n        /** @type {KeyframeAnimationOptions} */\n        const tweenParams = { iterations, direction, fill, easing, duration, delay, composite };\n        const propertyValue = params[name];\n        const individualTransformProperty = hasIndividualTransforms ? validTransforms.includes(name) ? name : shortTransforms.get(name) : false;\n        let parsedPropertyValue;\n        if (isObj(propertyValue)) {\n          const tweenOptions = /** @type {WAAPITweenOptions} */(propertyValue);\n          const tweenOptionsEase = setValue(tweenOptions.ease, ease);\n          const tweenOptionsSpring = /** @type {Spring} */(tweenOptionsEase).ease && tweenOptionsEase;\n          const to = /** @type {WAAPITweenOptions} */(tweenOptions).to;\n          const from = /** @type {WAAPITweenOptions} */(tweenOptions).from;\n          /** @type {Number} */\n          tweenParams.duration = (tweenOptionsSpring ? /** @type {Spring} */(tweenOptionsSpring).duration : getFunctionValue(setValue(tweenOptions.duration, duration), $el, i, targetsLength)) * timeScale;\n          /** @type {Number} */\n          tweenParams.delay = getFunctionValue(setValue(tweenOptions.delay, delay), $el, i, targetsLength) * timeScale;\n          /** @type {CompositeOperation} */\n          tweenParams.composite = /** @type {CompositeOperation} */(setValue(tweenOptions.composition, composite));\n          /** @type {String} */\n          tweenParams.easing = parseWAAPIEasing(tweenOptionsEase);\n          parsedPropertyValue = parseIndividualTweenValue($el, name, from, to, i, targetsLength);\n          if (individualTransformProperty) {\n            keyframes[`--${individualTransformProperty}`] = parsedPropertyValue;\n            cachedTransforms[individualTransformProperty] = parsedPropertyValue;\n          } else {\n            keyframes[name] = parseIndividualTweenValue($el, name, from, to, i, targetsLength);\n          }\n          addWAAPIAnimation(this, $el, name, keyframes, tweenParams);\n          if (!isUnd(from)) {\n            if (!individualTransformProperty) {\n              $el.style[name] = keyframes[name][0];\n            } else {\n              const key = `--${individualTransformProperty}`;\n              $el.style.setProperty(key, keyframes[key][0]);\n            }\n          }\n        } else {\n          parsedPropertyValue = isArr(propertyValue) ?\n                                propertyValue.map((/** @type {any} */v) => normalizeTweenValue(name, v, $el, i, targetsLength)) :\n                                normalizeTweenValue(name, /** @type {any} */(propertyValue), $el, i, targetsLength);\n          if (individualTransformProperty) {\n            keyframes[`--${individualTransformProperty}`] = parsedPropertyValue;\n            cachedTransforms[individualTransformProperty] = parsedPropertyValue;\n          } else {\n            keyframes[name] = parsedPropertyValue;\n          }\n          addWAAPIAnimation(this, $el, name, keyframes, tweenParams);\n        }\n      }\n      if (hasIndividualTransforms) {\n        let transforms = emptyString;\n        for (let t in cachedTransforms) {\n          transforms += `${transformsFragmentStrings[t]}var(--${t})) `;\n        }\n        $el.style.transform = transforms;\n      }\n    });\n\n    if (scroll) {\n      /** @type {ScrollObserver} */(this.autoplay).link(this);\n    }\n  }\n\n  /**\n   * @callback forEachCallback\n   * @param {globalThis.Animation} animation\n   */\n\n  /**\n   * @param  {forEachCallback|String} callback\n   * @return {this}\n   */\n  forEach(callback) {\n    const cb = isStr(callback) ? a => a[callback]() : callback;\n    this.animations.forEach(cb);\n    return this;\n  }\n\n  get speed() {\n    return this._speed;\n  }\n\n  /** @param {Number} speed */\n  set speed(speed) {\n    this._speed = +speed;\n    this.forEach(anim => anim.playbackRate = speed);\n  }\n\n  get currentTime() {\n    const controlAnimation = this.controlAnimation;\n    const timeScale = globals.timeScale;\n    return this.completed ? this.duration : controlAnimation ? +controlAnimation.currentTime * (timeScale === 1 ? 1 : timeScale) : 0;\n  }\n\n  /** @param {Number} time */\n  set currentTime(time) {\n    const t = time * (globals.timeScale === 1 ? 1 : K);\n    this.forEach(anim => {\n      // Make sure the animation playState is not 'paused' in order to properly trigger an onfinish callback.\n      // The \"paused\" play state supersedes the \"finished\" play state; if the animation is both paused and finished, the \"paused\" state is the one that will be reported.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Animation/finish_event\n      if (t >= this.duration) anim.play();\n      anim.currentTime = t;\n    });\n  }\n\n  get progress() {\n    return this.currentTime / this.duration;\n  }\n\n  /** @param {Number} progress */\n  set progress(progress) {\n    this.forEach(anim => anim.currentTime = progress * this.duration || 0);\n  }\n\n  resume() {\n    if (!this.paused) return this;\n    this.paused = false;\n    // TODO: Store the current time, and seek back to the last position\n    return this.forEach('play');\n  }\n\n  pause() {\n    if (this.paused) return this;\n    this.paused = true;\n    return this.forEach('pause');\n  }\n\n  alternate() {\n    this.reversed = !this.reversed;\n    this.forEach('reverse');\n    if (this.paused) this.forEach('pause');\n    return this;\n  }\n\n  play() {\n    if (this.reversed) this.alternate();\n    return this.resume();\n  }\n\n  reverse() {\n    if (!this.reversed) this.alternate();\n    return this.resume();\n  }\n\n /**\n  * @param {Number} time\n  * @param {Boolean} muteCallbacks\n  */\n  seek(time, muteCallbacks = false) {\n    if (muteCallbacks) this.muteCallbacks = true;\n    if (time < this.duration) this.completed = false;\n    this.currentTime = time;\n    this.muteCallbacks = false;\n    if (this.paused) this.pause();\n    return this;\n  }\n\n  restart() {\n    this.completed = false;\n    return this.seek(0, true).resume();\n  }\n\n  commitStyles() {\n    return this.forEach('commitStyles');\n  }\n\n  complete() {\n    return this.seek(this.duration);\n  }\n\n  cancel() {\n    this.forEach('cancel');\n    return this.pause();\n  }\n\n  revert() {\n    this.cancel();\n    this.targets.forEach(($el, i) => $el.setAttribute('style', this._inlineStyles[i]) );\n    return this;\n  }\n\n  /**\n   * @param  {WAAPICallback} [callback]\n   * @return {Promise}\n   */\n  then(callback = noop) {\n    const then = this.then;\n    const onResolve = () => {\n      this.then = null;\n      callback(this);\n      this.then = then;\n      this._resolve = noop;\n    };\n    return new Promise(r => {\n      this._resolve = () => r(onResolve());\n      if (this.completed) this._resolve();\n      return this;\n    });\n  }\n}\n\nconst waapi = {\n/**\n * @param {DOMTargetsParam} targets\n * @param {WAAPIAnimationParams} params\n * @return {WAAPIAnimation}\n */\n  animate: (targets, params) => new WAAPIAnimation(targets, params),\n  convertEase: easingToLinear\n};\n\n\n\n\n/**\n * @param  {Callback<Timer>} [callback]\n * @return {Timer}\n */\nconst sync = (callback = noop) => {\n  return new Timer({ duration: 1 * globals.timeScale, onComplete: callback }, null, 0).resume();\n};\n\n/**\n * @overload\n * @param  {DOMTargetSelector} targetSelector\n * @param  {String}            propName\n * @return {String}\n *\n * @overload\n * @param  {JSTargetsParam} targetSelector\n * @param  {String}         propName\n * @return {Number|String}\n *\n * @overload\n * @param  {DOMTargetsParam} targetSelector\n * @param  {String}          propName\n * @param  {String}          unit\n * @return {String}\n *\n * @overload\n * @param  {TargetsParam} targetSelector\n * @param  {String}       propName\n * @param  {Boolean}      unit\n * @return {Number}\n *\n * @param  {TargetsParam}   targetSelector\n * @param  {String}         propName\n * @param  {String|Boolean} [unit]\n */\nfunction getTargetValue(targetSelector, propName, unit) {\n  const targets = registerTargets(targetSelector);\n  if (!targets.length) return;\n  const [ target ] = targets;\n  const tweenType = getTweenType(target, propName);\n  const normalizePropName = sanitizePropertyName(propName, target, tweenType);\n  let originalValue = getOriginalAnimatableValue(target, normalizePropName);\n  if (isUnd(unit)) {\n    return originalValue;\n  } else {\n    decomposeRawValue(originalValue, decomposedOriginalValue);\n    if (decomposedOriginalValue.t === valueTypes.NUMBER || decomposedOriginalValue.t === valueTypes.UNIT) {\n      if (unit === false) {\n        return decomposedOriginalValue.n;\n      } else {\n        const convertedValue = convertValueUnit(/** @type {DOMTarget} */(target), decomposedOriginalValue, /** @type {String} */(unit), false);\n        return `${round(convertedValue.n, globals.precision)}${convertedValue.u}`;\n      }\n    }\n  }\n}\n\n/**\n * @param  {TargetsParam}    targets\n * @param  {AnimationParams} parameters\n * @return {JSAnimation}\n */\nconst setTargetValues = (targets, parameters) => {\n  if (isUnd(parameters)) return;\n  parameters.duration = minValue;\n  // Do not overrides currently active tweens by default\n  parameters.composition = setValue(parameters.composition, compositionTypes.none);\n  // Skip init() and force rendering by playing the animation\n  return new JSAnimation(targets, parameters, null, 0, true).resume();\n};\n\n/**\n * @param  {TargetsArray} targetsArray\n * @param  {JSAnimation}    animation\n * @param  {String}       [propertyName]\n * @return {Boolean}\n */\nconst removeTargetsFromAnimation = (targetsArray, animation, propertyName) => {\n  let tweensMatchesTargets = false;\n  forEachChildren(animation, (/**@type {Tween} */tween) => {\n    const tweenTarget = tween.target;\n    if (targetsArray.includes(tweenTarget)) {\n      const tweenName = tween.property;\n      const tweenType = tween._tweenType;\n      const normalizePropName = sanitizePropertyName(propertyName, tweenTarget, tweenType);\n      if (!normalizePropName || normalizePropName && normalizePropName === tweenName) {\n        // Make sure to flag the previous CSS transform tween to renderTransform\n        if (tween.parent._tail === tween &&\n            tween._tweenType === tweenTypes.TRANSFORM &&\n            tween._prev &&\n            tween._prev._tweenType === tweenTypes.TRANSFORM\n        ) {\n          tween._prev._renderTransforms = 1;\n        }\n        // Removes the tween from the selected animation\n        removeChild(animation, tween);\n        // Detach the tween from its siblings to make sure blended tweens are correctlly removed\n        removeTweenSliblings(tween);\n        tweensMatchesTargets = true;\n      }\n    }\n  }, true);\n  return tweensMatchesTargets;\n};\n\n/**\n * @param  {TargetsParam} targets\n * @param  {Renderable|WAAPIAnimation} [renderable]\n * @param  {String}                    [propertyName]\n * @return {TargetsArray}\n */\nconst remove = (targets, renderable, propertyName) => {\n  const targetsArray = parseTargets(targets);\n  const parent = /** @type {Renderable|typeof engine} **/(renderable ? renderable : engine);\n  const waapiAnimation = renderable && /** @type {WAAPIAnimation} */(renderable).controlAnimation && /** @type {WAAPIAnimation} */(renderable);\n  for (let i = 0, l = targetsArray.length; i < l; i++) {\n    const $el = /** @type {DOMTarget}  */(targetsArray[i]);\n    removeWAAPIAnimation($el, propertyName, waapiAnimation);\n  }\n  let removeMatches;\n  if (parent._hasChildren) {\n    let iterationDuration = 0;\n    forEachChildren(parent, (/** @type {Renderable} */child) => {\n      if (!child._hasChildren) {\n        removeMatches = removeTargetsFromAnimation(targetsArray, /** @type {JSAnimation} */(child), propertyName);\n        // Remove the child from its parent if no tweens and no children left after the removal\n        if (removeMatches && !child._head) {\n          child.cancel();\n          removeChild(parent, child);\n        } else {\n          // Calculate the new iterationDuration value to handle onComplete with last child in render()\n          const childTLOffset = child._offset + child._delay;\n          const childDur = childTLOffset + child.duration;\n          if (childDur > iterationDuration) {\n            iterationDuration = childDur;\n          }\n        }\n      }\n      // Make sure to also remove engine's children targets\n      // NOTE: Avoid recursion?\n      if (child._head) {\n        remove(targets, child, propertyName);\n      } else {\n        child._hasChildren = false;\n      }\n    }, true);\n    // Update iterationDuration value to handle onComplete with last child in render()\n    if (!isUnd(/** @type {Renderable} */(parent).iterationDuration)) {\n      /** @type {Renderable} */(parent).iterationDuration = iterationDuration;\n    }\n  } else {\n    removeMatches = removeTargetsFromAnimation(\n      targetsArray,\n      /** @type {JSAnimation} */(parent),\n      propertyName\n    );\n  }\n\n  if (removeMatches && !parent._head) {\n    parent._hasChildren = false;\n    // Cancel the parent if there are no tweens and no children left after the removal\n    // We have to check if the .cancel() method exist to handle cases where the parent is the engine itself\n    if (/** @type {Renderable} */(parent).cancel) /** @type {Renderable} */(parent).cancel();\n  }\n\n  return targetsArray;\n};\n\n/**\n * @param  {(...args: any[]) => Tickable} constructor\n * @return {(...args: any[]) => Tickable}\n */\nconst keepTime = createRefreshable;\n\n/**\n * @param  {String|Array} items\n * @return {any}\n */\nconst randomPick = items => items[random(0, items.length - 1)];\n\n/**\n * @param  {Number|String} v\n * @param  {Number} decimalLength\n * @return {String}\n */\nconst roundPad = (v, decimalLength) => (+v).toFixed(decimalLength);\n\n/**\n * @param  {Number} v\n * @param  {Number} totalLength\n * @param  {String} padString\n * @return {String}\n */\nconst padStart = (v, totalLength, padString) => `${v}`.padStart(totalLength, padString);\n\n/**\n * @param  {Number} v\n * @param  {Number} totalLength\n * @param  {String} padString\n * @return {String}\n */\nconst padEnd = (v, totalLength, padString) => `${v}`.padEnd(totalLength, padString);\n\n/**\n * @param  {Number} v\n * @param  {Number} min\n * @param  {Number} max\n * @return {Number}\n */\nconst wrap = (v, min, max) => (((v - min) % (max - min) + (max - min)) % (max - min)) + min;\n\n/**\n * @param  {Number} value\n * @param  {Number} inLow\n * @param  {Number} inHigh\n * @param  {Number} outLow\n * @param  {Number} outHigh\n * @return {Number}\n */\nconst mapRange = (value, inLow, inHigh, outLow, outHigh) => outLow + ((value - inLow) / (inHigh - inLow)) * (outHigh - outLow);\n\n/**\n * @param  {Number} degrees\n * @return {Number}\n */\nconst degToRad = degrees => degrees * PI / 180;\n\n/**\n * @param  {Number} radians\n * @return {Number}\n */\nconst radToDeg = radians => radians * 180 / PI;\n\n/**\n * https://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n * @param  {Number} start\n * @param  {Number} end\n * @param  {Number} amount\n * @param  {Renderable|Boolean} [renderable]\n * @return {Number}\n */\nconst lerp = (start, end, amount, renderable) => {\n  let dt = K / globals.defaults.frameRate;\n  if (renderable !== false) {\n    const ticker = /** @type Renderable */\n                   (renderable) ||\n                   (engine._hasChildren && engine);\n    if (ticker && ticker.deltaTime) {\n      dt = ticker.deltaTime;\n    }\n  }\n  const t = 1 - Math.exp(-amount * dt * .1);\n  return !amount ? start : amount === 1 ? end : (1 - t) * start + t * end;\n};\n\n// Chain-able utilities\n\n/**\n * @callback UtilityFunction\n * @param {...*} args\n * @return {Number|String}\n *\n * @param {UtilityFunction} fn\n * @param {Number} [last=0]\n * @return {function(...(Number|String)): function(Number|String): (Number|String)}\n */\nconst curry = (fn, last = 0) => (...args) => last ? v => fn(...args, v) : v => fn(v, ...args);\n\n/**\n * @param {Function} fn\n * @return {function(...(Number|String))}\n */\nconst chain = fn => {\n   return (...args) => {\n    const result = fn(...args);\n    return new Proxy(noop, {\n      apply: (_, __, [v]) => result(v),\n      get: (_, prop) => chain(/**@param {...Number|String} nextArgs */(...nextArgs) => {\n        const nextResult = utils[prop](...nextArgs);\n        return (/**@type {Number|String} */v) => nextResult(result(v));\n      })\n    });\n  }\n};\n\n/**\n * @param {UtilityFunction} fn\n * @param {Number} [right]\n * @return {function(...(Number|String)): UtilityFunction}\n */\nconst makeChainable = (fn, right = 0) => (...args) => (args.length < fn.length ? chain(curry(fn, right)) : fn)(...args);\n\n/**\n * @callback ChainedUtilsResult\n * @param {Number} value\n * @return {Number}\n *\n * @typedef {Object} ChainableUtils\n * @property {ChainedClamp} clamp\n * @property {ChainedRound} round\n * @property {ChainedSnap} snap\n * @property {ChainedWrap} wrap\n * @property {ChainedInterpolate} interpolate\n * @property {ChainedMapRange} mapRange\n * @property {ChainedRoundPad} roundPad\n * @property {ChainedPadStart} padStart\n * @property {ChainedPadEnd} padEnd\n * @property {ChainedDegToRad} degToRad\n * @property {ChainedRadToDeg} radToDeg\n *\n * @typedef {ChainableUtils & ChainedUtilsResult} ChainableUtil\n *\n * @callback ChainedClamp\n * @param {Number} min\n * @param {Number} max\n * @return {ChainableUtil}\n *\n * @callback ChainedRound\n * @param {Number} decimalLength\n * @return {ChainableUtil}\n *\n * @callback ChainedSnap\n * @param {Number} increment\n * @return {ChainableUtil}\n *\n * @callback ChainedWrap\n * @param {Number} min\n * @param {Number} max\n * @return {ChainableUtil}\n *\n * @callback ChainedInterpolate\n * @param {Number} start\n * @param {Number} end\n * @return {ChainableUtil}\n *\n * @callback ChainedMapRange\n * @param {Number} inLow\n * @param {Number} inHigh\n * @param {Number} outLow\n * @param {Number} outHigh\n * @return {ChainableUtil}\n *\n * @callback ChainedRoundPad\n * @param {Number} decimalLength\n * @return {ChainableUtil}\n *\n * @callback ChainedPadStart\n * @param {Number} totalLength\n * @param {String} padString\n * @return {ChainableUtil}\n *\n * @callback ChainedPadEnd\n * @param {Number} totalLength\n * @param {String} padString\n * @return {ChainableUtil}\n *\n * @callback ChainedDegToRad\n * @return {ChainableUtil}\n *\n * @callback ChainedRadToDeg\n * @return {ChainableUtil}\n */\n\nconst utils = {\n  $: registerTargets,\n  get: getTargetValue,\n  set: setTargetValues,\n  remove,\n  cleanInlineStyles,\n  random,\n  randomPick,\n  shuffle,\n  lerp,\n  sync,\n  keepTime,\n  clamp: /** @type {typeof clamp & ChainedClamp} */(makeChainable(clamp)),\n  round: /** @type {typeof round & ChainedRound} */(makeChainable(round)),\n  snap: /** @type {typeof snap & ChainedSnap} */(makeChainable(snap)),\n  wrap: /** @type {typeof wrap & ChainedWrap} */(makeChainable(wrap)),\n  interpolate: /** @type {typeof interpolate & ChainedInterpolate} */(makeChainable(interpolate, 1)),\n  mapRange: /** @type {typeof mapRange & ChainedMapRange} */(makeChainable(mapRange)),\n  roundPad: /** @type {typeof roundPad & ChainedRoundPad} */(makeChainable(roundPad)),\n  padStart: /** @type {typeof padStart & ChainedPadStart} */(makeChainable(padStart)),\n  padEnd: /** @type {typeof padEnd & ChainedPadEnd} */(makeChainable(padEnd)),\n  degToRad: /** @type {typeof degToRad & ChainedDegToRad} */(makeChainable(degToRad)),\n  radToDeg: /** @type {typeof radToDeg & ChainedRadToDeg} */(makeChainable(radToDeg)),\n};\n\n\n\n\n/**\n * @typedef {Number|String|Function} TimePosition\n */\n\n/**\n * Timeline's children offsets positions parser\n * @param  {Timeline} timeline\n * @param  {String} timePosition\n * @return {Number}\n */\nconst getPrevChildOffset = (timeline, timePosition) => {\n  if (stringStartsWith(timePosition, '<')) {\n    const goToPrevAnimationOffset = timePosition[1] === '<';\n    const prevAnimation = /** @type {Tickable} */(timeline._tail);\n    const prevOffset = prevAnimation ? prevAnimation._offset + prevAnimation._delay : 0;\n    return goToPrevAnimationOffset ? prevOffset : prevOffset + prevAnimation.duration;\n  }\n};\n\n/**\n * @param  {Timeline} timeline\n * @param  {TimePosition} [timePosition]\n * @return {Number}\n */\nconst parseTimelinePosition = (timeline, timePosition) => {\n  let tlDuration = timeline.iterationDuration;\n  if (tlDuration === minValue) tlDuration = 0;\n  if (isUnd(timePosition)) return tlDuration;\n  if (isNum(+timePosition)) return +timePosition;\n  const timePosStr = /** @type {String} */(timePosition);\n  const tlLabels = timeline ? timeline.labels : null;\n  const hasLabels = !isNil(tlLabels);\n  const prevOffset = getPrevChildOffset(timeline, timePosStr);\n  const hasSibling = !isUnd(prevOffset);\n  const matchedRelativeOperator = relativeValuesExecRgx.exec(timePosStr);\n  if (matchedRelativeOperator) {\n    const fullOperator = matchedRelativeOperator[0];\n    const split = timePosStr.split(fullOperator);\n    const labelOffset = hasLabels && split[0] ? tlLabels[split[0]] : tlDuration;\n    const parsedOffset = hasSibling ? prevOffset : hasLabels ? labelOffset : tlDuration;\n    const parsedNumericalOffset = +split[1];\n    return getRelativeValue(parsedOffset, parsedNumericalOffset, fullOperator[0]);\n  } else {\n    return hasSibling ? prevOffset :\n           hasLabels ? !isUnd(tlLabels[timePosStr]) ? tlLabels[timePosStr] :\n           tlDuration : tlDuration;\n  }\n};\n\n/**\n * @param {Timeline} tl\n * @return {Number}\n */\nfunction getTimelineTotalDuration(tl) {\n  return clampInfinity(((tl.iterationDuration + tl._loopDelay) * tl.iterationCount) - tl._loopDelay) || minValue;\n}\n\n/**\n * @overload\n * @param  {TimerParams} childParams\n * @param  {Timeline} tl\n * @param  {Number} timePosition\n * @return {Timeline}\n *\n * @overload\n * @param  {AnimationParams} childParams\n * @param  {Timeline} tl\n * @param  {Number} timePosition\n * @param  {TargetsParam} targets\n * @param  {Number} [index]\n * @param  {Number} [length]\n * @return {Timeline}\n *\n * @param  {TimerParams|AnimationParams} childParams\n * @param  {Timeline} tl\n * @param  {Number} timePosition\n * @param  {TargetsParam} [targets]\n * @param  {Number} [index]\n * @param  {Number} [length]\n */\nfunction addTlChild(childParams, tl, timePosition, targets, index, length) {\n  const isSetter = isNum(childParams.duration) && /** @type {Number} */(childParams.duration) <= minValue;\n  // Offset the tl position with -minValue for 0 duration animations or .set() calls in order to align their end value with the defined position\n  const adjustedPosition = isSetter ? timePosition - minValue : timePosition;\n  tick(tl, adjustedPosition, 1, 1, tickModes.AUTO);\n  const tlChild = targets ?\n    new JSAnimation(targets,/** @type {AnimationParams} */(childParams), tl, adjustedPosition, false, index, length) :\n    new Timer(/** @type {TimerParams} */(childParams), tl, adjustedPosition);\n  tlChild.init(1);\n  // TODO: Might be better to insert at a position relative to startTime?\n  addChild(tl, tlChild);\n  forEachChildren(tl, (/** @type {Renderable} */child) => {\n    const childTLOffset = child._offset + child._delay;\n    const childDur = childTLOffset + child.duration;\n    if (childDur > tl.iterationDuration) tl.iterationDuration = childDur;\n  });\n  tl.duration = getTimelineTotalDuration(tl);\n  return tl;\n}\n\nclass Timeline extends Timer {\n\n  /**\n   * @param {TimelineParams} [parameters]\n   */\n  constructor(parameters = {}) {\n    super(/** @type {TimerParams&TimelineParams} */(parameters), null, 0);\n    /** @type {Number} */\n    this.duration = 0; // TL duration starts at 0 and grows when adding children\n    /** @type {Record<String, Number>} */\n    this.labels = {};\n    const defaultsParams = parameters.defaults;\n    const globalDefaults = globals.defaults;\n    /** @type {DefaultsParams} */\n    this.defaults = defaultsParams ? mergeObjects(defaultsParams, globalDefaults) : globalDefaults;\n    /** @type {Callback<this>} */\n    this.onRender = parameters.onRender || globalDefaults.onRender;\n    const tlPlaybackEase = setValue(parameters.playbackEase, globalDefaults.playbackEase);\n    this._ease = tlPlaybackEase ? parseEasings(tlPlaybackEase) : null;\n    /** @type {Number} */\n    this.iterationDuration = 0;\n  }\n\n  /**\n   * @overload\n   * @param {TargetsParam} a1\n   * @param {AnimationParams} a2\n   * @param {TimePosition} [a3]\n   * @return {this}\n   *\n   * @overload\n   * @param {TimerParams} a1\n   * @param {TimePosition} [a2]\n   * @return {this}\n   *\n   * @param {TargetsParam|TimerParams} a1\n   * @param {AnimationParams|TimePosition} a2\n   * @param {TimePosition} [a3]\n   */\n  add(a1, a2, a3) {\n    const isAnim = isObj(a2);\n    const isTimer = isObj(a1);\n    if (isAnim || isTimer) {\n      this._hasChildren = true;\n      if (isAnim) {\n        const childParams = /** @type {AnimationParams} */(a2);\n        // Check for function for children stagger positions\n        if (isFnc(a3)) {\n          const staggeredPosition = /** @type {Function} */(a3);\n          const parsedTargetsArray = parseTargets(/** @type {TargetsParam} */(a1));\n          // Store initial duration before adding new children that will change the duration\n          const tlDuration = this.duration;\n          // Store initial _iterationDuration before adding new children that will change the duration\n          const tlIterationDuration = this.iterationDuration;\n          // Store the original id in order to add specific indexes to the new animations ids\n          const id = childParams.id;\n          let i = 0;\n          const parsedLength = parsedTargetsArray.length;\n          parsedTargetsArray.forEach((/** @type {Target} */target) => {\n            // Create a new parameter object for each staggered children\n            const staggeredChildParams = { ...childParams };\n            // Reset the duration of the timeline iteration before each stagger to prevent wrong start value calculation\n            this.duration = tlDuration;\n            this.iterationDuration = tlIterationDuration;\n            if (!isUnd(id)) staggeredChildParams.id = id + '-' + i;\n            addTlChild(\n              staggeredChildParams,\n              this,\n              staggeredPosition(target, i, parsedLength, this),\n              target,\n              i,\n              parsedLength\n            );\n            i++;\n          });\n        } else {\n          addTlChild(\n            childParams,\n            this,\n            parseTimelinePosition(this, a3),\n            /** @type {TargetsParam} */(a1),\n          );\n        }\n      } else {\n        // It's a Timer\n        addTlChild(\n          /** @type TimerParams */(a1),\n          this,\n          parseTimelinePosition(this,/** @type TimePosition */(a2)),\n        );\n      }\n      return this.init(1); // 1 = internalRender\n    }\n  }\n\n  /**\n   * @overload\n   * @param {Tickable} [synced]\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   * @overload\n   * @param {globalThis.Animation} [synced]\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   * @overload\n   * @param {WAAPIAnimation} [synced]\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   * @param {Tickable|WAAPIAnimation|globalThis.Animation} [synced]\n   * @param {TimePosition} [position]\n   */\n  sync(synced, position) {\n    if (isUnd(synced) || synced && isUnd(synced.pause)) return this;\n    synced.pause();\n    const duration = +(/** @type {globalThis.Animation} */(synced).effect ? /** @type {globalThis.Animation} */(synced).effect.getTiming().duration : /** @type {Tickable} */(synced).duration);\n    return this.add(synced, { currentTime: [0, duration], duration, ease: 'linear' }, position);\n  }\n\n  /**\n   * @param  {TargetsParam} targets\n   * @param  {AnimationParams} parameters\n   * @param  {TimePosition} [position]\n   * @return {this}\n   */\n  set(targets, parameters, position) {\n    if (isUnd(parameters)) return this;\n    parameters.duration = minValue;\n    parameters.composition = compositionTypes.replace;\n    return this.add(targets, parameters, position);\n  }\n\n  /**\n   * @param {Callback<Timer>} callback\n   * @param {TimePosition} [position]\n   * @return {this}\n   */\n  call(callback, position) {\n    if (isUnd(callback) || callback && !isFnc(callback)) return this;\n    return this.add({ duration: 0, onComplete: () => callback(this) }, position);\n  }\n\n  /**\n   * @param {String} labelName\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   */\n  label(labelName, position) {\n    if (isUnd(labelName) || labelName && !isStr(labelName)) return this;\n    this.labels[labelName] = parseTimelinePosition(this,/** @type TimePosition */(position));\n    return this;\n  }\n\n  /**\n   * @param  {TargetsParam} targets\n   * @param  {String} [propertyName]\n   * @return {this}\n   */\n  remove(targets, propertyName) {\n    remove(targets, this, propertyName);\n    return this;\n  }\n\n  /**\n   * @param  {Number} newDuration\n   * @return {this}\n   */\n  stretch(newDuration) {\n    const currentDuration = this.duration;\n    if (currentDuration === normalizeTime(newDuration)) return this;\n    const timeScale = newDuration / currentDuration;\n    const labels = this.labels;\n    forEachChildren(this, (/** @type {JSAnimation} */child) => child.stretch(child.duration * timeScale));\n    for (let labelName in labels) labels[labelName] *= timeScale;\n    return super.stretch(newDuration);\n  }\n\n  /**\n   * @return {this}\n   */\n  refresh() {\n    forEachChildren(this, (/** @type {JSAnimation} */child) => {\n      if (child.refresh) child.refresh();\n    });\n    return this;\n  }\n\n  /**\n   * @return {this}\n   */\n  revert() {\n    super.revert();\n    forEachChildren(this, (/** @type {JSAnimation} */child) => child.revert, true);\n    return cleanInlineStyles(this);\n  }\n\n  /**\n   * @param  {Callback<this>} [callback]\n   * @return {Promise}\n   */\n  then(callback) {\n    return super.then(callback);\n  }\n}\n\n/**\n * @param {TimelineParams} [parameters]\n * @return {Timeline}\n */\nconst createTimeline = parameters => new Timeline(parameters).init();\n\n\n\n\nclass Animatable {\n  /**\n   * @param {TargetsParam} targets\n   * @param {AnimatableParams} parameters\n   */\n  constructor(targets, parameters) {\n    if (scope.current) scope.current.register(this);\n    /** @type {AnimationParams} */\n    const globalParams = {};\n    const properties = {};\n    this.targets = [];\n    this.animations = {};\n    if (isUnd(targets) || isUnd(parameters)) return;\n    for (let propName in parameters) {\n      const paramValue = parameters[propName];\n      if (isKey(propName)) {\n        properties[propName] = paramValue;\n      } else {\n        globalParams[propName] = paramValue;\n      }\n    }\n    for (let propName in properties) {\n      const propValue = properties[propName];\n      const isObjValue = isObj(propValue);\n      /** @type {TweenParamsOptions} */\n      let propParams = {};\n      let to = '+=0';\n      if (isObjValue) {\n        const unit = propValue.unit;\n        if (isStr(unit)) to += unit;\n      } else {\n        propParams.duration = propValue;\n      }\n      propParams[propName] = isObjValue ? mergeObjects({ to }, propValue) : to;\n      const animParams = mergeObjects(globalParams, propParams);\n      animParams.composition = compositionTypes.replace;\n      animParams.autoplay = false;\n      const animation = this.animations[propName] = new JSAnimation(targets, animParams, null, 0, false).init();\n      if (!this.targets.length) this.targets.push(...animation.targets);\n      /** @type {AnimatableProperty} */\n      this[propName] = (to, duration, ease) => {\n        const tween = /** @type {Tween} */(animation._head);\n        if (isUnd(to) && tween) {\n          const numbers = tween._numbers;\n          if (numbers && numbers.length) {\n            return numbers;\n          } else {\n            return tween._modifier(tween._number);\n          }\n        } else {\n          forEachChildren(animation, (/** @type {Tween} */tween) => {\n            if (isArr(to)) {\n              for (let i = 0, l = /** @type {Array} */(to).length; i < l; i++) {\n                if (!isUnd(tween._numbers[i])) {\n                  tween._fromNumbers[i] = /** @type {Number} */(tween._modifier(tween._numbers[i]));\n                  tween._toNumbers[i] = to[i];\n                }\n              }\n            } else {\n              tween._fromNumber = /** @type {Number} */(tween._modifier(tween._number));\n              tween._toNumber = /** @type {Number} */(to);\n            }\n            if (!isUnd(ease)) tween._ease = parseEasings(ease);\n            tween._currentTime = 0;\n          });\n          if (!isUnd(duration)) animation.stretch(duration);\n          animation.reset(1).resume();\n          return this;\n        }\n      };\n    }\n  }\n\n  revert() {\n    for (let propName in this.animations) {\n      this[propName] = noop;\n      this.animations[propName].revert();\n    }\n    this.animations = {};\n    this.targets.length = 0;\n    return this;\n  }\n}\n\n/**\n * @param {TargetsParam} targets\n * @param {AnimatableParams} parameters\n * @return {AnimatableObject}\n */\nconst createAnimatable = (targets, parameters) => /** @type {AnimatableObject} */(new Animatable(targets, parameters));\n\n\n\n\n/*\n * Spring ease solver adapted from https://webkit.org/demos/spring/spring.js\n * Webkit Copyright © 2016 Apple Inc\n */\n\n/**\n * @typedef {Object} SpringParams\n * @property {Number} [mass=1] - Mass, default 1\n * @property {Number} [stiffness=100] - Stiffness, default 100\n * @property {Number} [damping=10] - Damping, default 10\n * @property {Number} [velocity=0] - Initial velocity, default 0\n */\n\nclass Spring {\n  /**\n   * @param {SpringParams} [parameters]\n   */\n  constructor(parameters = {}) {\n    this.timeStep = .02; // Interval fed to the solver to calculate duration\n    this.restThreshold = .0005; // Values below this threshold are considered resting position\n    this.restDuration = 200; // Duration in ms used to check if the spring is resting after reaching restThreshold\n    this.maxDuration = 60000; // The maximum allowed spring duration in ms (default 1 min)\n    this.maxRestSteps = this.restDuration / this.timeStep / K; // How many steps allowed after reaching restThreshold before stopping the duration calculation\n    this.maxIterations = this.maxDuration / this.timeStep / K; // Calculate the maximum iterations allowed based on maxDuration\n    this.m = clamp(setValue(parameters.mass, 1), 0, K);\n    this.s = clamp(setValue(parameters.stiffness, 100), 1, K);\n    this.d = clamp(setValue(parameters.damping, 10), .1, K);\n    this.v = clamp(setValue(parameters.velocity, 0), -1e3, K);\n    this.w0 = 0;\n    this.zeta = 0;\n    this.wd = 0;\n    this.b = 0;\n    this.solverDuration = 0;\n    this.duration = 0;\n    this.compute();\n    /** @type {EasingFunction} */\n    this.ease = t => t === 0 || t === 1 ? t : this.solve(t * this.solverDuration);\n  }\n\n  /** @type {EasingFunction} */\n  solve(time) {\n    const { zeta, w0, wd, b } = this;\n    let t = time;\n    if (zeta < 1) {\n      t = exp(-t * zeta * w0) * (1 * cos(wd * t) + b * sin(wd * t));\n    } else {\n      t = (1 + b * t) * exp(-t * w0);\n    }\n    return 1 - t;\n  }\n\n  compute() {\n    const { maxRestSteps, maxIterations, restThreshold, timeStep, m, d, s, v } = this;\n    const w0 = this.w0 = clamp(sqrt(s / m), minValue, K);\n    const zeta = this.zeta = d / (2 * sqrt(s * m));\n    const wd = this.wd = zeta < 1 ? w0 * sqrt(1 - zeta * zeta) : 0;\n    this.b = zeta < 1 ? (zeta * w0 + -v) / wd : -v + w0;\n    let solverTime = 0;\n    let restSteps = 0;\n    let iterations = 0;\n    while (restSteps < maxRestSteps && iterations < maxIterations) {\n      if (abs(1 - this.solve(solverTime)) < restThreshold) {\n        restSteps++;\n      } else {\n        restSteps = 0;\n      }\n      this.solverDuration = solverTime;\n      solverTime += timeStep;\n      iterations++;\n    }\n    this.duration = round(this.solverDuration * K, 0) * globals.timeScale;\n  }\n\n  get mass() {\n    return this.m;\n  }\n\n  set mass(v) {\n    this.m = clamp(setValue(v, 1), 0, K);\n    this.compute();\n  }\n\n  get stiffness() {\n    return this.s;\n  }\n\n  set stiffness(v) {\n    this.s = clamp(setValue(v, 100), 1, K);\n    this.compute();\n  }\n\n  get damping() {\n    return this.d;\n  }\n\n  set damping(v) {\n    this.d = clamp(setValue(v, 10), .1, K);\n    this.compute();\n  }\n\n  get velocity() {\n    return this.v;\n  }\n\n  set velocity(v) {\n    this.v = clamp(setValue(v, 0), -1e3, K);\n    this.compute();\n  }\n}\n\n/**\n * @param {SpringParams} [parameters]\n * @returns {Spring}\n */\nconst createSpring = (parameters) => new Spring(parameters);\n\n\n\n\n/**\n * @param {Event} e\n */\nconst preventDefault = e => {\n  if (e.cancelable) e.preventDefault();\n};\n\nclass DOMProxy {\n  /** @param {Object} el */\n  constructor(el) {\n    this.el = el;\n    this.zIndex = 0;\n    this.parentElement = null;\n    this.classList = {\n      add: noop,\n      remove: noop,\n    };\n  }\n\n  get x() { return this.el.x || 0 };\n  set x(v) { this.el.x = v; };\n\n  get y() { return this.el.y || 0 };\n  set y(v) { this.el.y = v; };\n\n  get width() { return this.el.width || 0 };\n  set width(v) { this.el.width = v; };\n\n  get height() { return this.el.height || 0 };\n  set height(v) { this.el.height = v; };\n\n  getBoundingClientRect() {\n    return {\n      top: this.y,\n      right: this.x,\n      bottom: this.y + this.height,\n      left: this.x + this.width,\n    }\n  }\n}\n\nclass Transforms {\n  /**\n   * @param {DOMTarget|DOMProxy} $el\n   */\n  constructor($el) {\n    this.$el = $el;\n    this.inlineTransforms = [];\n    this.point = new DOMPoint();\n    this.inversedMatrix = this.getMatrix().inverse();\n  }\n\n  /**\n   * @param {Number} x\n   * @param {Number} y\n   * @return {DOMPoint}\n   */\n  normalizePoint(x, y) {\n    this.point.x = x;\n    this.point.y = y;\n    return this.point.matrixTransform(this.inversedMatrix);\n  }\n\n  /**\n   * @callback TraverseParentsCallback\n   * @param {DOMTarget} $el\n   * @param {Number} i\n   */\n\n  /**\n   * @param {TraverseParentsCallback} cb\n   */\n  traverseUp(cb) {\n    let $el = /** @type {DOMTarget|Document} */(this.$el.parentElement), i = 0;\n    while ($el && $el !== doc) {\n      cb(/** @type {DOMTarget} */($el), i);\n      $el = /** @type {DOMTarget} */($el.parentElement);\n      i++;\n    }\n  }\n\n  getMatrix() {\n    const matrix = new DOMMatrix();\n    this.traverseUp($el => {\n      const transformValue = getComputedStyle($el).transform;\n      if (transformValue) {\n        const elMatrix = new DOMMatrix(transformValue);\n        matrix.preMultiplySelf(elMatrix);\n      }\n    });\n    return matrix;\n  }\n\n  remove() {\n    this.traverseUp(($el, i) => {\n      this.inlineTransforms[i] = $el.style.transform;\n      $el.style.transform = 'none';\n    });\n  }\n\n  revert() {\n    this.traverseUp(($el, i) => {\n      const ct = this.inlineTransforms[i];\n      if (ct === '') {\n        $el.style.removeProperty('transform');\n      } else {\n        $el.style.transform = ct;\n      }\n    });\n  }\n}\n\n/**\n * @template {Array<Number>|DOMTargetSelector|String|Number|Boolean|Function|DraggableCursorParams} T\n * @param {T | ((draggable: Draggable) => T)} value\n * @param {Draggable} draggable\n * @return {T}\n */\nconst parseDraggableFunctionParameter = (value, draggable) => value && isFnc(value) ? /** @type {Function} */(value)(draggable) : value;\n\nlet zIndex = 0;\n\nclass Draggable {\n  /**\n   * @param {TargetsParam} target\n   * @param {DraggableParams} [parameters]\n   */\n  constructor(target, parameters = {}) {\n    if (!target) return;\n    if (scope.current) scope.current.register(this);\n    const paramX = parameters.x;\n    const paramY = parameters.y;\n    const trigger = parameters.trigger;\n    const modifier = parameters.modifier;\n    const ease = parameters.releaseEase;\n    const customEase = ease && parseEasings(ease);\n    const hasSpring = !isUnd(ease) && !isUnd(/** @type {Spring} */(ease).ease);\n    const xProp = /** @type {String} */(isObj(paramX) && !isUnd(/** @type {Object} */(paramX).mapTo) ? /** @type {Object} */(paramX).mapTo : 'translateX');\n    const yProp = /** @type {String} */(isObj(paramY) && !isUnd(/** @type {Object} */(paramY).mapTo) ? /** @type {Object} */(paramY).mapTo : 'translateY');\n    const container = parseDraggableFunctionParameter(parameters.container, this);\n    this.containerArray = isArr(container) ? container : null;\n    this.$container = /** @type {HTMLElement} */(container && !this.containerArray ? parseTargets(/** @type {DOMTarget} */(container))[0] : doc.body);\n    this.useWin = this.$container === doc.body;\n    /** @type {Window | HTMLElement} */\n    this.$scrollContainer = this.useWin ? win : this.$container;\n    this.$target = /** @type {HTMLElement} */(isObj(target) ? new DOMProxy(target) : parseTargets(target)[0]);\n    this.$trigger = /** @type {HTMLElement} */(parseTargets(trigger ? trigger : target)[0]);\n    this.fixed = getTargetValue(this.$target, 'position') === 'fixed';\n    // Refreshable parameters\n    this.isFinePointer = true;\n    /** @type {[Number, Number, Number, Number]} */\n    this.containerPadding = [0, 0, 0, 0];\n    /** @type {Number} */\n    this.containerFriction = 0;\n    /** @type {Number} */\n    this.releaseContainerFriction = 0;\n    /** @type {Number|Array<Number>} */\n    this.snapX = 0;\n    /** @type {Number|Array<Number>} */\n    this.snapY = 0;\n    /** @type {Number} */\n    this.scrollSpeed = 0;\n    /** @type {Number} */\n    this.scrollThreshold = 0;\n    /** @type {Number} */\n    this.dragSpeed = 0;\n    /** @type {Number} */\n    this.maxVelocity = 0;\n    /** @type {Number} */\n    this.minVelocity = 0;\n    /** @type {Number} */\n    this.velocityMultiplier = 0;\n    /** @type {Boolean|DraggableCursorParams} */\n    this.cursor = false;\n    /** @type {Spring} */\n    this.releaseXSpring = hasSpring ? /** @type {Spring} */(ease) : createSpring({\n      mass: setValue(parameters.releaseMass, 1),\n      stiffness: setValue(parameters.releaseStiffness, 80),\n      damping: setValue(parameters.releaseDamping, 20),\n    });\n    /** @type {Spring} */\n    this.releaseYSpring = hasSpring ? /** @type {Spring} */(ease) : createSpring({\n      mass: setValue(parameters.releaseMass, 1),\n      stiffness: setValue(parameters.releaseStiffness, 80),\n      damping: setValue(parameters.releaseDamping, 20),\n    });\n    /** @type {EasingFunction} */\n    this.releaseEase = customEase || eases.outQuint;\n    /** @type {Boolean} */\n    this.hasReleaseSpring = hasSpring;\n    /** @type {Callback<this>} */\n    this.onGrab = parameters.onGrab || noop;\n    /** @type {Callback<this>} */\n    this.onDrag = parameters.onDrag || noop;\n    /** @type {Callback<this>} */\n    this.onRelease = parameters.onRelease || noop;\n    /** @type {Callback<this>} */\n    this.onUpdate = parameters.onUpdate || noop;\n    /** @type {Callback<this>} */\n    this.onSettle = parameters.onSettle || noop;\n    /** @type {Callback<this>} */\n    this.onSnap = parameters.onSnap || noop;\n    /** @type {Callback<this>} */\n    this.onResize = parameters.onResize || noop;\n    /** @type {Callback<this>} */\n    this.onAfterResize = parameters.onAfterResize || noop;\n    /** @type {[Number, Number]} */\n    this.disabled = [0, 0];\n    /** @type {AnimatableParams} */\n    const animatableParams = {};\n    if (modifier) animatableParams.modifier = modifier;\n    if (isUnd(paramX) || paramX === true) {\n      animatableParams[xProp] = 0;\n    } else if (isObj(paramX)) {\n      const paramXObject = /** @type {DraggableAxisParam} */(paramX);\n      const animatableXParams = {};\n      if (paramXObject.modifier) animatableXParams.modifier = paramXObject.modifier;\n      if (paramXObject.composition) animatableXParams.composition = paramXObject.composition;\n      animatableParams[xProp] = animatableXParams;\n    } else if (paramX === false) {\n      animatableParams[xProp] = 0;\n      this.disabled[0] = 1;\n    }\n    if (isUnd(paramY) || paramY === true) {\n      animatableParams[yProp] = 0;\n    } else if (isObj(paramY)) {\n      const paramYObject = /** @type {DraggableAxisParam} */(paramY);\n      const animatableYParams = {};\n      if (paramYObject.modifier) animatableYParams.modifier = paramYObject.modifier;\n      if (paramYObject.composition) animatableYParams.composition = paramYObject.composition;\n      animatableParams[yProp] = animatableYParams;\n    } else if (paramY === false) {\n      animatableParams[yProp] = 0;\n      this.disabled[1] = 1;\n    }\n    /** @type {AnimatableObject} */\n    this.animate = /** @type {AnimatableObject} */(new Animatable(this.$target, animatableParams));\n    // Internal props\n    this.xProp = xProp;\n    this.yProp = yProp;\n    this.destX = 0;\n    this.destY = 0;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    this.scroll = {x: 0, y: 0};\n    /** @type {[Number, Number, Number, Number]} */\n    this.coords = [this.x, this.y, 0, 0]; // x, y, temp x, temp y\n    /** @type {[Number, Number]} */\n    this.snapped = [0, 0]; // x, y\n    /** @type {[Number, Number, Number, Number, Number, Number, Number, Number]} */\n    this.pointer = [0, 0, 0, 0, 0, 0, 0, 0]; // x1, y1, x2, y2, temp x1, temp y1, temp x2, temp y2\n    /** @type {[Number, Number]} */\n    this.scrollView = [0, 0]; // w, h\n    /** @type {[Number, Number, Number, Number]} */\n    this.dragArea = [0, 0, 0, 0]; // x, y, w, h\n    /** @type {[Number, Number, Number, Number]} */\n    this.containerBounds = [-1e12, maxValue, maxValue, -1e12]; // t, r, b, l\n    /** @type {[Number, Number, Number, Number]} */\n    this.scrollBounds = [0, 0, 0, 0]; // t, r, b, l\n    /** @type {[Number, Number, Number, Number]} */\n    this.targetBounds = [0, 0, 0, 0]; // t, r, b, l\n    /** @type {[Number, Number]} */\n    this.window = [0, 0]; // w, h\n    /** @type {[Number, Number, Number]} */\n    this.velocityStack = [0, 0, 0];\n    /** @type {Number} */\n    this.velocityStackIndex = 0;\n    /** @type {Number} */\n    this.velocityTime = now();\n    /** @type {Number} */\n    this.velocity = 0;\n    /** @type {Number} */\n    this.angle = 0;\n    /** @type {JSAnimation} */\n    this.cursorStyles = null;\n    /** @type {JSAnimation} */\n    this.triggerStyles = null;\n    /** @type {JSAnimation} */\n    this.bodyStyles = null;\n    /** @type {JSAnimation} */\n    this.targetStyles = null;\n    /** @type {JSAnimation} */\n    this.touchActionStyles = null;\n    this.transforms = new Transforms(this.$target);\n    this.overshootCoords = { x: 0, y: 0 };\n    this.overshootXTicker = new Timer({ autoplay: false }, null, 0).init();\n    this.overshootYTicker = new Timer({ autoplay: false }, null, 0).init();\n    this.updateTicker = new Timer({ autoplay: false }, null, 0).init();\n    this.overshootXTicker.onUpdate = () => {\n      if (this.disabled[0]) return;\n      this.updated = true;\n      this.manual = true;\n      this.animate[this.xProp](this.overshootCoords.x, 0);\n    };\n    this.overshootXTicker.onComplete = () => {\n      if (this.disabled[0]) return;\n      this.manual = false;\n      this.animate[this.xProp](this.overshootCoords.x, 0);\n    };\n    this.overshootYTicker.onUpdate = () => {\n      if (this.disabled[1]) return;\n      this.updated = true;\n      this.manual = true;\n      this.animate[this.yProp](this.overshootCoords.y, 0);\n    };\n    this.overshootYTicker.onComplete = () => {\n      if (this.disabled[1]) return;\n      this.manual = false;\n      this.animate[this.yProp](this.overshootCoords.y, 0);\n    };\n    this.updateTicker.onUpdate = () => this.update();\n    this.contained = !isUnd(container);\n    this.manual = false;\n    this.grabbed = false;\n    this.dragged = false;\n    this.updated = false;\n    this.released = false;\n    this.canScroll = false;\n    this.enabled = false;\n    this.initialized = false;\n    this.activeProp = this.disabled[1] ? xProp : yProp;\n    this.animate.animations[this.activeProp].onRender = () => {\n      const hasUpdated = this.updated;\n      const hasMoved = this.grabbed && hasUpdated;\n      const hasReleased = !hasMoved && this.released;\n      const x = this.x;\n      const y = this.y;\n      const dx = x - this.coords[2];\n      const dy = y - this.coords[3];\n      this.deltaX = dx;\n      this.deltaY = dy;\n      this.coords[2] = x;\n      this.coords[3] = y;\n      // Check if dx or dy are not 0 to check if the draggable has actually moved https://github.com/juliangarnier/anime/issues/1032\n      if (hasUpdated && (dx || dy)) {\n        this.onUpdate(this);\n      }\n      if (!hasReleased) {\n        this.updated = false;\n      } else {\n        this.computeVelocity(dx, dy);\n        this.angle = atan2(dy, dx);\n      }\n    };\n    this.animate.animations[this.activeProp].onComplete = () => {\n      if ((!this.grabbed && this.released)) {\n        // Set eleased to false before calling onSettle to avoid recursion\n        this.released = false;\n      }\n      if (!this.manual) {\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.velocity = 0;\n        this.velocityStack[0] = 0;\n        this.velocityStack[1] = 0;\n        this.velocityStack[2] = 0;\n        this.velocityStackIndex = 0;\n        this.onSettle(this);\n      }\n    };\n    this.resizeTicker = new Timer({\n      autoplay: false,\n      duration: 150 * globals.timeScale,\n      onComplete: () => {\n        this.onResize(this);\n        this.refresh();\n        this.onAfterResize(this);\n      },\n    }).init();\n    this.parameters = parameters;\n    this.resizeObserver = new ResizeObserver(() => {\n      if (this.initialized) {\n        this.resizeTicker.restart();\n      } else {\n        this.initialized = true;\n      }\n    });\n    this.enable();\n    this.refresh();\n    this.resizeObserver.observe(this.$container);\n    if (!isObj(target)) this.resizeObserver.observe(this.$target);\n  }\n\n  /**\n   * @param  {Number} dx\n   * @param  {Number} dy\n   * @return {Number}\n   */\n  computeVelocity(dx, dy) {\n    const prevTime = this.velocityTime;\n    const curTime = now();\n    const elapsed = curTime - prevTime;\n    if (elapsed < 17) return this.velocity;\n    this.velocityTime = curTime;\n    const velocityStack = this.velocityStack;\n    const vMul = this.velocityMultiplier;\n    const minV = this.minVelocity;\n    const maxV = this.maxVelocity;\n    const vi = this.velocityStackIndex;\n    velocityStack[vi] = round(clamp((sqrt(dx * dx + dy * dy) / elapsed) * vMul, minV, maxV), 5);\n    const velocity = max(velocityStack[0], velocityStack[1], velocityStack[2]);\n    this.velocity = velocity;\n    this.velocityStackIndex = (vi + 1) % 3;\n    return velocity;\n  }\n\n  /**\n   * @param {Number}  x\n   * @param {Boolean} [muteUpdateCallback]\n   * @return {this}\n   */\n  setX(x, muteUpdateCallback = false) {\n    if (this.disabled[0]) return;\n    const v = round(x, 5);\n    this.overshootXTicker.pause();\n    this.manual = true;\n    this.updated = !muteUpdateCallback;\n    this.destX = v;\n    this.snapped[0] = snap(v, this.snapX);\n    this.animate[this.xProp](v, 0);\n    this.manual = false;\n    return this;\n  }\n\n  /**\n   * @param {Number}  y\n   * @param {Boolean} [muteUpdateCallback]\n   * @return {this}\n   */\n  setY(y, muteUpdateCallback = false) {\n    if (this.disabled[1]) return;\n    const v = round(y, 5);\n    this.overshootYTicker.pause();\n    this.manual = true;\n    this.updated = !muteUpdateCallback;\n    this.destY = v;\n    this.snapped[1] = snap(v, this.snapY);\n    this.animate[this.yProp](v, 0);\n    this.manual = false;\n    return this;\n  }\n\n  get x() {\n    return round(/** @type {Number} */(this.animate[this.xProp]()), globals.precision);\n  }\n\n  set x(x) {\n    this.setX(x, false);\n  }\n\n  get y() {\n    return round(/** @type {Number} */(this.animate[this.yProp]()), globals.precision);\n  }\n\n  set y(y) {\n    this.setY(y, false);\n  }\n\n  get progressX() {\n    return mapRange(this.x, this.containerBounds[3], this.containerBounds[1], 0, 1);\n  }\n\n  set progressX(x) {\n    this.setX(mapRange(x, 0, 1, this.containerBounds[3], this.containerBounds[1]), false);\n  }\n\n  get progressY() {\n    return mapRange(this.y, this.containerBounds[0], this.containerBounds[2], 0, 1);\n  }\n\n  set progressY(y) {\n    this.setY(mapRange(y, 0, 1, this.containerBounds[0], this.containerBounds[2]), false);\n  }\n\n  updateScrollCoords() {\n    const sx = round(this.useWin ? win.scrollX : this.$container.scrollLeft, 0);\n    const sy = round(this.useWin ? win.scrollY : this.$container.scrollTop, 0);\n    const [ cpt, cpr, cpb, cpl ] = this.containerPadding;\n    const threshold = this.scrollThreshold;\n    this.scroll.x = sx;\n    this.scroll.y = sy;\n    this.scrollBounds[0] = sy - this.targetBounds[0] + cpt - threshold;\n    this.scrollBounds[1] = sx - this.targetBounds[1] - cpr + threshold;\n    this.scrollBounds[2] = sy - this.targetBounds[2] - cpb + threshold;\n    this.scrollBounds[3] = sx - this.targetBounds[3] + cpl - threshold;\n  }\n\n  updateBoundingValues() {\n    const $container = this.$container;\n    const cx = this.x;\n    const cy = this.y;\n    const cx2 = this.coords[2];\n    const cy2 =  this.coords[3];\n    // Prevents interfering with the scroll area in cases the target is outside of the container\n    // Make sure the temp coords are also adjuset to prevents wrong delta calculation on updates\n    this.coords[2] = 0;\n    this.coords[3] = 0;\n    this.setX(0, true);\n    this.setY(0, true);\n    this.transforms.remove();\n    const iw = this.window[0] = win.innerWidth;\n    const ih = this.window[1] = win.innerHeight;\n    const uw = this.useWin;\n    const sw = $container.scrollWidth;\n    const sh = $container.scrollHeight;\n    const fx = this.fixed;\n    const transformContainerRect = $container.getBoundingClientRect();\n    const [ cpt, cpr, cpb, cpl ] = this.containerPadding;\n    this.dragArea[0] = uw ? 0 : transformContainerRect.left;\n    this.dragArea[1] = uw ? 0 : transformContainerRect.top;\n    this.scrollView[0] = uw ? clamp(sw, iw, sw) : sw;\n    this.scrollView[1] = uw ? clamp(sh, ih, sh) : sh;\n    this.updateScrollCoords();\n    const { width, height, left, top, right, bottom } = $container.getBoundingClientRect();\n    this.dragArea[2] = round(uw ? clamp(width, iw, iw) : width, 0);\n    this.dragArea[3] = round(uw ? clamp(height, ih, ih) : height, 0);\n    const containerOverflow = getTargetValue($container, 'overflow');\n    const visibleOverflow = containerOverflow === 'visible';\n    const hiddenOverflow = containerOverflow === 'hidden';\n    this.canScroll = fx ? false :\n      this.contained &&\n      (($container === doc.body && visibleOverflow) || (!hiddenOverflow && !visibleOverflow)) &&\n      (sw > this.dragArea[2] + cpl - cpr || sh > this.dragArea[3] + cpt - cpb) &&\n      (!this.containerArray || (this.containerArray && !isArr(this.containerArray)));\n    if (this.contained) {\n      const sx = this.scroll.x;\n      const sy = this.scroll.y;\n      const canScroll = this.canScroll;\n      const targetRect = this.$target.getBoundingClientRect();\n      const hiddenLeft = canScroll ? uw ? 0 : $container.scrollLeft : 0;\n      const hiddenTop = canScroll ? uw ? 0 : $container.scrollTop : 0;\n      const hiddenRight = canScroll ? this.scrollView[0] - hiddenLeft - width : 0;\n      const hiddenBottom = canScroll ? this.scrollView[1] - hiddenTop - height : 0;\n      this.targetBounds[0] = round((targetRect.top + sy) - (uw ? 0 : top), 0);\n      this.targetBounds[1] = round((targetRect.right + sx) - (uw ? iw : right), 0);\n      this.targetBounds[2] = round((targetRect.bottom + sy) - (uw ? ih : bottom), 0);\n      this.targetBounds[3] = round((targetRect.left + sx) - (uw ? 0 : left), 0);\n      if (this.containerArray) {\n        this.containerBounds[0] = this.containerArray[0] + cpt;\n        this.containerBounds[1] = this.containerArray[1] - cpr;\n        this.containerBounds[2] = this.containerArray[2] - cpb;\n        this.containerBounds[3] = this.containerArray[3] + cpl;\n      } else {\n        this.containerBounds[0] = -round(targetRect.top - (fx ? clamp(top, 0, ih) : top) + hiddenTop - cpt, 0);\n        this.containerBounds[1] = -round(targetRect.right - (fx ? clamp(right, 0, iw) : right) - hiddenRight + cpr, 0);\n        this.containerBounds[2] = -round(targetRect.bottom - (fx ? clamp(bottom, 0, ih) : bottom) - hiddenBottom + cpb, 0);\n        this.containerBounds[3] = -round(targetRect.left - (fx ? clamp(left, 0, iw) : left) + hiddenLeft - cpl, 0);\n      }\n    }\n    this.transforms.revert();\n    // Restore coordinates\n    this.coords[2] = cx2;\n    this.coords[3] = cy2;\n    this.setX(cx, true);\n    this.setY(cy, true);\n  }\n\n  /**\n   * Returns 0 if not OB, 1 if x is OB, 2 if y is OB, 3 if both x and y are OB\n   *\n   * @param  {Array} bounds\n   * @param  {Number} x\n   * @param  {Number} y\n   * @return {Number}\n   */\n  isOutOfBounds(bounds, x, y) {\n    if (!this.contained) return 0;\n    const [ bt, br, bb, bl ] = bounds;\n    const [ dx, dy ] = this.disabled;\n    const obx = !dx && x < bl || !dx && x > br;\n    const oby = !dy && y < bt || !dy && y > bb;\n    return obx && !oby ? 1 : !obx && oby ? 2 : obx && oby ? 3 : 0;\n  }\n\n  refresh() {\n    const params = this.parameters;\n    const paramX = params.x;\n    const paramY = params.y;\n    const container = parseDraggableFunctionParameter(params.container, this);\n    const cp = parseDraggableFunctionParameter(params.containerPadding, this) || 0;\n    const containerPadding = /** @type {[Number, Number, Number, Number]} */(isArr(cp) ? cp : [cp, cp, cp, cp]);\n    const cx = this.x;\n    const cy = this.y;\n    const parsedCursorStyles = parseDraggableFunctionParameter(params.cursor, this);\n    const cursorStyles = { onHover: 'grab', onGrab: 'grabbing' };\n    if (parsedCursorStyles) {\n      const { onHover, onGrab } = /** @type {DraggableCursorParams} */(parsedCursorStyles);\n      if (onHover) cursorStyles.onHover = onHover;\n      if (onGrab) cursorStyles.onGrab = onGrab;\n    }\n    this.containerArray = isArr(container) ? container : null;\n    this.$container = /** @type {HTMLElement} */(container && !this.containerArray ? parseTargets(/** @type {DOMTarget} */(container))[0] : doc.body);\n    this.useWin = this.$container === doc.body;\n    /** @type {Window | HTMLElement} */\n    this.$scrollContainer = this.useWin ? win : this.$container;\n    this.isFinePointer = matchMedia('(pointer:fine)').matches;\n    this.containerPadding = setValue(containerPadding, [0, 0, 0, 0]);\n    this.containerFriction = clamp(setValue(parseDraggableFunctionParameter(params.containerFriction, this), .8), 0, 1);\n    this.releaseContainerFriction = clamp(setValue(parseDraggableFunctionParameter(params.releaseContainerFriction, this), this.containerFriction), 0, 1);\n    this.snapX = parseDraggableFunctionParameter(isObj(paramX) && !isUnd(paramX.snap) ? paramX.snap : params.snap, this);\n    this.snapY = parseDraggableFunctionParameter(isObj(paramY) && !isUnd(paramY.snap) ? paramY.snap : params.snap, this);\n    this.scrollSpeed = setValue(parseDraggableFunctionParameter(params.scrollSpeed, this), 1.5);\n    this.scrollThreshold = setValue(parseDraggableFunctionParameter(params.scrollThreshold, this), 20);\n    this.dragSpeed = setValue(parseDraggableFunctionParameter(params.dragSpeed, this), 1);\n    this.minVelocity = setValue(parseDraggableFunctionParameter(params.minVelocity, this), 0);\n    this.maxVelocity = setValue(parseDraggableFunctionParameter(params.maxVelocity, this), 50);\n    this.velocityMultiplier = setValue(parseDraggableFunctionParameter(params.velocityMultiplier, this), 1);\n    this.cursor = parsedCursorStyles === false ? false : cursorStyles;\n    this.updateBoundingValues();\n\n    // const ob = this.isOutOfBounds(this.containerBounds, this.x, this.y);\n    // if (ob === 1 || ob === 3) this.progressX = px;\n    // if (ob === 2 || ob === 3) this.progressY = py;\n\n    // if (this.initialized && this.contained) {\n    //   if (this.progressX !== px) this.progressX = px;\n    //   if (this.progressY !== py) this.progressY = py;\n    // }\n\n    const [ bt, br, bb, bl ] = this.containerBounds;\n    this.setX(clamp(cx, bl, br), true);\n    this.setY(clamp(cy, bt, bb), true);\n  }\n\n  update() {\n    this.updateScrollCoords();\n    if (this.canScroll) {\n      const [ cpt, cpr, cpb, cpl ] = this.containerPadding;\n      const [ sw, sh ] = this.scrollView;\n      const daw = this.dragArea[2];\n      const dah = this.dragArea[3];\n      const csx = this.scroll.x;\n      const csy = this.scroll.y;\n      const nsw = this.$container.scrollWidth;\n      const nsh = this.$container.scrollHeight;\n      const csw = this.useWin ? clamp(nsw, this.window[0], nsw) : nsw;\n      const csh = this.useWin ? clamp(nsh, this.window[1], nsh) : nsh;\n      const swd = sw - csw;\n      const shd = sh - csh;\n      // Handle cases where the scrollarea dimensions changes during drag\n      if (this.dragged && swd > 0) {\n        this.coords[0] -= swd;\n        this.scrollView[0] = csw;\n      }\n      if (this.dragged && shd > 0) {\n        this.coords[1] -= shd;\n        this.scrollView[1] = csh;\n      }\n      // Handle autoscroll when target is at the edges of the scroll bounds\n      const s = this.scrollSpeed * 10;\n      const threshold = this.scrollThreshold;\n      const [ x, y ] = this.coords;\n      const [ st, sr, sb, sl ] = this.scrollBounds;\n      const t = round(clamp((y - st + cpt) / threshold, -1, 0) * s, 0);\n      const r = round(clamp((x - sr - cpr) / threshold, 0, 1) * s, 0);\n      const b = round(clamp((y - sb - cpb) / threshold, 0, 1) * s, 0);\n      const l = round(clamp((x - sl + cpl) / threshold, -1, 0) * s, 0);\n      if (t || b || l || r) {\n        const [nx, ny] = this.disabled;\n        let scrollX = csx;\n        let scrollY = csy;\n        if (!nx) {\n          scrollX = round(clamp(csx + (l || r), 0, sw - daw), 0);\n          this.coords[0] -= csx - scrollX;\n        }\n        if (!ny) {\n          scrollY = round(clamp(csy + (t || b), 0, sh - dah), 0);\n          this.coords[1] -= csy - scrollY;\n        }\n        // Note: Safari mobile requires to use different scroll methods depending if using the window or not\n        if (this.useWin) {\n          this.$scrollContainer.scrollBy(-(csx - scrollX), -(csy - scrollY));\n        } else {\n          this.$scrollContainer.scrollTo(scrollX, scrollY);\n        }\n      }\n    }\n    const [ ct, cr, cb, cl ] = this.containerBounds;\n    const [ px1, py1, px2, py2, px3, py3 ] = this.pointer;\n    this.coords[0] += (px1 - px3) * this.dragSpeed;\n    this.coords[1] += (py1 - py3) * this.dragSpeed;\n    this.pointer[4] = px1;\n    this.pointer[5] = py1;\n    const [ cx, cy ] = this.coords;\n    const [ sx, sy ] = this.snapped;\n    const cf = (1 - this.containerFriction) * this.dragSpeed;\n    this.setX(cx > cr ? cr + (cx - cr) * cf : cx < cl ? cl + (cx - cl) * cf : cx, false);\n    this.setY(cy > cb ? cb + (cy - cb) * cf : cy < ct ? ct + (cy - ct) * cf : cy, false);\n    this.computeVelocity(px1 - px3, py1 - py3);\n    this.angle = atan2(py1 - py2, px1 - px2);\n    const [ nsx, nsy ] = this.snapped;\n    if (nsx !== sx && this.snapX || nsy !== sy && this.snapY) {\n      this.onSnap(this);\n    }\n  }\n\n  stop() {\n    this.updateTicker.pause();\n    this.overshootXTicker.pause();\n    this.overshootYTicker.pause();\n    // Pauses the in bounds onRelease animations\n    for (let prop in this.animate.animations) this.animate.animations[prop].pause();\n    remove(this, null, 'x');\n    remove(this, null, 'y');\n    remove(this, null, 'progressX');\n    remove(this, null, 'progressY');\n    remove(this.scroll); // Removes any active animations on the container scroll\n    remove(this.overshootCoords); // Removes active overshoot animations\n    return this;\n  }\n\n  /**\n   * @param {Number} [duration]\n   * @param {Number} [gap]\n   * @param {EasingParam} [ease]\n   * @return {this}\n   */\n  scrollInView(duration, gap = 0, ease = eases.inOutQuad) {\n    this.updateScrollCoords();\n    const x = this.destX;\n    const y = this.destY;\n    const scroll = this.scroll;\n    const scrollBounds = this.scrollBounds;\n    const canScroll = this.canScroll;\n    if (!this.containerArray && this.isOutOfBounds(scrollBounds, x, y)) {\n      const [ st, sr, sb, sl ] = scrollBounds;\n      const t = round(clamp(y - st, -1e12, 0), 0);\n      const r = round(clamp(x - sr, 0, maxValue), 0);\n      const b = round(clamp(y - sb, 0, maxValue), 0);\n      const l = round(clamp(x - sl, -1e12, 0), 0);\n      new JSAnimation(scroll, {\n        x: round(scroll.x + (l ? l - gap : r ? r + gap : 0), 0),\n        y: round(scroll.y + (t ? t - gap : b ? b + gap : 0), 0),\n        duration: isUnd(duration) ? 350 * globals.timeScale : duration,\n        ease,\n        onUpdate: () => {\n          this.canScroll = false;\n          this.$scrollContainer.scrollTo(scroll.x, scroll.y);\n        }\n      }).init().then(() => {\n        this.canScroll = canScroll;\n      });\n    }\n    return this;\n  }\n\n  handleHover() {\n    if (this.isFinePointer && this.cursor && !this.cursorStyles) {\n      this.cursorStyles = setTargetValues(this.$trigger, {\n        cursor: /** @type {DraggableCursorParams} */(this.cursor).onHover\n      });\n    }\n  }\n\n  /**\n   * @param  {Number} [duration]\n   * @param  {Number} [gap]\n   * @param  {EasingParam} [ease]\n   * @return {this}\n   */\n  animateInView(duration, gap = 0, ease = eases.inOutQuad) {\n    this.stop();\n    this.updateBoundingValues();\n    const x = this.x;\n    const y = this.y;\n    const [ cpt, cpr, cpb, cpl ] = this.containerPadding;\n    const bt = this.scroll.y - this.targetBounds[0] + cpt + gap;\n    const br = this.scroll.x - this.targetBounds[1] - cpr - gap;\n    const bb = this.scroll.y - this.targetBounds[2] - cpb - gap;\n    const bl = this.scroll.x - this.targetBounds[3] + cpl + gap;\n    const ob = this.isOutOfBounds([bt, br, bb, bl], x, y);\n    if (ob) {\n      const [ disabledX, disabledY ] = this.disabled;\n      const destX = clamp(snap(x, this.snapX), bl, br);\n      const destY = clamp(snap(y, this.snapY), bt, bb);\n      const dur = isUnd(duration) ? 350 * globals.timeScale : duration;\n      if (!disabledX && (ob === 1 || ob === 3)) this.animate[this.xProp](destX, dur, ease);\n      if (!disabledY && (ob === 2 || ob === 3)) this.animate[this.yProp](destY, dur, ease);\n    }\n    return this;\n  }\n\n  /**\n   * @param {MouseEvent|TouchEvent} e\n   */\n  handleDown(e) {\n    const $eTarget = /** @type {HTMLElement} */(e.target);\n    if (this.grabbed || /** @type {HTMLInputElement}  */($eTarget).type === 'range') return;\n\n    e.stopPropagation();\n\n    this.grabbed = true;\n    this.released = false;\n    this.stop();\n    this.updateBoundingValues();\n    const touches = /** @type {TouchEvent} */(e).changedTouches;\n    const eventX = touches ? touches[0].clientX : /** @type {MouseEvent} */(e).clientX;\n    const eventY = touches ? touches[0].clientY : /** @type {MouseEvent} */(e).clientY;\n    const { x, y } = this.transforms.normalizePoint(eventX, eventY);\n    const [ ct, cr, cb, cl ] = this.containerBounds;\n    const cf = (1 - this.containerFriction) * this.dragSpeed;\n    const cx = this.x;\n    const cy = this.y;\n    this.coords[0] = this.coords[2] = !cf ? cx : cx > cr ? cr + (cx - cr) / cf : cx < cl ? cl + (cx - cl) / cf : cx;\n    this.coords[1] = this.coords[3] = !cf ? cy : cy > cb ? cb + (cy - cb) / cf : cy < ct ? ct + (cy - ct) / cf : cy;\n    this.pointer[0] = x;\n    this.pointer[1] = y;\n    this.pointer[2] = x;\n    this.pointer[3] = y;\n    this.pointer[4] = x;\n    this.pointer[5] = y;\n    this.pointer[6] = x;\n    this.pointer[7] = y;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    this.velocity = 0;\n    this.velocityStack[0] = 0;\n    this.velocityStack[1] = 0;\n    this.velocityStack[2] = 0;\n    this.velocityStackIndex = 0;\n    this.angle = 0;\n    if (this.targetStyles) {\n      this.targetStyles.revert();\n      this.targetStyles = null;\n    }\n    const z = /** @type {Number} */(getTargetValue(this.$target, 'zIndex', false));\n    zIndex = (z > zIndex ? z : zIndex) + 1;\n    this.targetStyles = setTargetValues(this.$target, { zIndex });\n    if (this.triggerStyles) {\n      this.triggerStyles.revert();\n      this.triggerStyles = null;\n    }\n    if (this.cursorStyles) {\n      this.cursorStyles.revert();\n      this.cursorStyles = null;\n    }\n    if (this.isFinePointer && this.cursor) {\n      this.bodyStyles = setTargetValues(doc.body, {\n        cursor: /** @type {DraggableCursorParams} */(this.cursor).onGrab\n      });\n    }\n    this.scrollInView(100, 0, eases.out(3));\n    this.onGrab(this);\n\n    doc.addEventListener('touchmove', this);\n    doc.addEventListener('touchend', this);\n    doc.addEventListener('touchcancel', this);\n    doc.addEventListener('mousemove', this);\n    doc.addEventListener('mouseup', this);\n    doc.addEventListener('selectstart', this);\n  }\n\n  /**\n   * @param {MouseEvent|TouchEvent} e\n   */\n  handleMove(e) {\n    if (!this.grabbed) return;\n    const touches = /** @type {TouchEvent} */(e).changedTouches;\n    const eventX = touches ? touches[0].clientX : /** @type {MouseEvent} */(e).clientX;\n    const eventY = touches ? touches[0].clientY : /** @type {MouseEvent} */(e).clientY;\n    const { x, y } = this.transforms.normalizePoint(eventX, eventY);\n    const movedX = x - this.pointer[6];\n    const movedY = y - this.pointer[7];\n\n    let $parent = /** @type {HTMLElement} */(e.target);\n    let isAtTop = false;\n    let isAtBottom = false;\n    let canTouchScroll = false;\n\n    while (touches && $parent && $parent !== this.$trigger) {\n      const overflowY = getTargetValue($parent, 'overflow-y');\n      if (overflowY !== 'hidden' && overflowY !== 'visible') {\n        const { scrollTop, scrollHeight, clientHeight } = $parent;\n        if (scrollHeight > clientHeight) {\n          canTouchScroll = true;\n          isAtTop = scrollTop <= 3;\n          isAtBottom = scrollTop >= (scrollHeight - clientHeight) - 3;\n          break;\n        }\n      }\n      $parent = /** @type {HTMLElement} */($parent.parentNode);\n    }\n\n    if (canTouchScroll && ((!isAtTop && !isAtBottom) || (isAtTop && movedY < 0) || (isAtBottom && movedY > 0))) {\n\n      this.pointer[0] = x;\n      this.pointer[1] = y;\n      this.pointer[2] = x;\n      this.pointer[3] = y;\n      this.pointer[4] = x;\n      this.pointer[5] = y;\n      this.pointer[6] = x;\n      this.pointer[7] = y;\n\n    } else {\n\n      preventDefault(e);\n\n      // Needed to prevents click on handleUp\n      if (!this.triggerStyles) this.triggerStyles = setTargetValues(this.$trigger, { pointerEvents: 'none' });\n      // Needed to prevent page scroll while dragging on touch devvice\n      this.$trigger.addEventListener('touchstart', preventDefault, { passive: false });\n      this.$trigger.addEventListener('touchmove', preventDefault, { passive: false });\n      this.$trigger.addEventListener('touchend', preventDefault);\n\n\n      if ((!this.disabled[0] && abs(movedX) > 3) || (!this.disabled[1] && abs(movedY) > 3)) {\n\n        this.updateTicker.resume();\n        this.pointer[2] = this.pointer[0];\n        this.pointer[3] = this.pointer[1];\n        this.pointer[0] = x;\n        this.pointer[1] = y;\n        this.dragged = true;\n        this.released = false;\n        this.onDrag(this);\n      }\n    }\n  }\n\n  handleUp() {\n\n    if (!this.grabbed) return;\n\n    this.updateTicker.pause();\n\n    if (this.triggerStyles) {\n      this.triggerStyles.revert();\n      this.triggerStyles = null;\n    }\n\n    if (this.bodyStyles) {\n      this.bodyStyles.revert();\n      this.bodyStyles = null;\n    }\n\n    const [ disabledX, disabledY ] = this.disabled;\n    const [ px1, py1, px2, py2, px3, py3 ] = this.pointer;\n    const [ ct, cr, cb, cl ] = this.containerBounds;\n    const [ sx, sy ] = this.snapped;\n    const springX = this.releaseXSpring;\n    const springY = this.releaseYSpring;\n    const releaseEase = this.releaseEase;\n    const hasReleaseSpring = this.hasReleaseSpring;\n    const overshootCoords = this.overshootCoords;\n    const cx = this.x;\n    const cy = this.y;\n    const pv = this.computeVelocity(px1 - px3, py1 - py3);\n    const pa = this.angle = atan2(py1 - py2, px1 - px2);\n    const ds = pv * 150;\n    const cf = (1 - this.releaseContainerFriction) * this.dragSpeed;\n    const nx = cx + (cos(pa) * ds);\n    const ny = cy + (sin(pa) * ds);\n    const bx = nx > cr ? cr + (nx - cr) * cf : nx < cl ? cl + (nx - cl) * cf : nx;\n    const by = ny > cb ? cb + (ny - cb) * cf : ny < ct ? ct + (ny - ct) * cf : ny;\n    const dx = this.destX = clamp(round(snap(bx, this.snapX), 5), cl, cr);\n    const dy = this.destY = clamp(round(snap(by, this.snapY), 5), ct, cb);\n    const ob = this.isOutOfBounds(this.containerBounds, nx, ny);\n\n    let durationX = 0;\n    let durationY = 0;\n    let easeX = releaseEase;\n    let easeY = releaseEase;\n    let longestReleaseDuration = 0;\n\n    overshootCoords.x = cx;\n    overshootCoords.y = cy;\n\n    if (!disabledX) {\n      const directionX = dx === cr ? cx > cr ? -1 : 1 : cx < cl ? -1 : 1;\n      const distanceX = round(cx - dx, 0);\n      springX.velocity = disabledY && hasReleaseSpring ? distanceX ? (ds * directionX) / abs(distanceX) : 0 : pv;\n      const { ease, duration, restDuration } = springX;\n      durationX = cx === dx ? 0 : hasReleaseSpring ? duration : duration - (restDuration * globals.timeScale);\n      if (hasReleaseSpring) easeX = ease;\n      if (durationX > longestReleaseDuration) longestReleaseDuration = durationX;\n    }\n\n    if (!disabledY) {\n      const directionY = dy === cb ? cy > cb ? -1 : 1 : cy < ct ? -1 : 1;\n      const distanceY = round(cy - dy, 0);\n      springY.velocity = disabledX && hasReleaseSpring ? distanceY ? (ds * directionY) / abs(distanceY) : 0 : pv;\n      const { ease, duration, restDuration } = springY;\n      durationY = cy === dy ? 0 : hasReleaseSpring ? duration : duration - (restDuration * globals.timeScale);\n      if (hasReleaseSpring) easeY = ease;\n      if (durationY > longestReleaseDuration) longestReleaseDuration = durationY;\n    }\n\n    if (!hasReleaseSpring && ob && cf && (durationX || durationY)) {\n\n        const composition = compositionTypes.blend;\n\n        new JSAnimation(overshootCoords, {\n          x: { to: bx, duration: durationX * .65 },\n          y: { to: by, duration: durationY * .65 },\n          ease: releaseEase,\n          composition,\n        }).init();\n\n        new JSAnimation(overshootCoords, {\n          x: { to: dx, duration: durationX },\n          y: { to: dy, duration: durationY },\n          ease: releaseEase,\n          composition,\n        }).init();\n\n        this.overshootXTicker.stretch(durationX).restart();\n        this.overshootYTicker.stretch(durationY).restart();\n\n    } else {\n\n      if (!disabledX) this.animate[this.xProp](dx, durationX, easeX);\n      if (!disabledY) this.animate[this.yProp](dy, durationY, easeY);\n\n    }\n\n    this.scrollInView(longestReleaseDuration, this.scrollThreshold, releaseEase);\n\n    let hasSnapped = false;\n\n    if (dx !== sx) {\n      this.snapped[0] = dx;\n      if (this.snapX) hasSnapped = true;\n    }\n\n    if (dy !== sy && this.snapY) {\n      this.snapped[1] = dy;\n      if (this.snapY) hasSnapped = true;\n    }\n\n    if (hasSnapped) this.onSnap(this);\n\n    this.grabbed = false;\n    this.dragged = false;\n    this.updated = true;\n    this.released = true;\n\n    // It's important to trigger the callback after the release animations to be able to cancel them\n    this.onRelease(this);\n\n    this.$trigger.removeEventListener('touchstart', preventDefault);\n    this.$trigger.removeEventListener('touchmove', preventDefault);\n    this.$trigger.removeEventListener('touchend', preventDefault);\n\n    doc.removeEventListener('touchmove', this);\n    doc.removeEventListener('touchend', this);\n    doc.removeEventListener('touchcancel', this);\n    doc.removeEventListener('mousemove', this);\n    doc.removeEventListener('mouseup', this);\n    doc.removeEventListener('selectstart', this);\n  }\n\n  reset() {\n    this.stop();\n    this.resizeTicker.pause();\n    this.grabbed = false;\n    this.dragged = false;\n    this.updated = false;\n    this.released = false;\n    this.canScroll = false;\n    this.setX(0, true);\n    this.setY(0, true);\n    this.coords[0] = 0;\n    this.coords[1] = 0;\n    this.pointer[0] = 0;\n    this.pointer[1] = 0;\n    this.pointer[2] = 0;\n    this.pointer[3] = 0;\n    this.pointer[4] = 0;\n    this.pointer[5] = 0;\n    this.pointer[6] = 0;\n    this.pointer[7] = 0;\n    this.velocity = 0;\n    this.velocityStack[0] = 0;\n    this.velocityStack[1] = 0;\n    this.velocityStack[2] = 0;\n    this.velocityStackIndex = 0;\n    this.angle = 0;\n    return this;\n  }\n\n  enable() {\n    if (!this.enabled) {\n      this.enabled = true;\n      this.$target.classList.remove('is-disabled');\n      this.touchActionStyles = setTargetValues(this.$trigger, {\n        touchAction: this.disabled[0] ? 'pan-x' : this.disabled[1] ? 'pan-y' : 'none'\n      });\n      this.$trigger.addEventListener('touchstart', this, { passive: true });\n      this.$trigger.addEventListener('mousedown', this, { passive: true });\n      this.$trigger.addEventListener('mouseenter', this);\n    }\n    return this;\n  }\n\n  disable() {\n    this.enabled = false;\n    this.grabbed = false;\n    this.dragged = false;\n    this.updated = false;\n    this.released = false;\n    this.canScroll = false;\n    this.touchActionStyles.revert();\n    if (this.cursorStyles) {\n      this.cursorStyles.revert();\n      this.cursorStyles = null;\n    }\n    if (this.triggerStyles) {\n      this.triggerStyles.revert();\n      this.triggerStyles = null;\n    }\n    if (this.bodyStyles) {\n      this.bodyStyles.revert();\n      this.bodyStyles = null;\n    }\n    if (this.targetStyles) {\n      this.targetStyles.revert();\n      this.targetStyles = null;\n    }\n    this.$target.classList.add('is-disabled');\n    this.$trigger.removeEventListener('touchstart', this);\n    this.$trigger.removeEventListener('mousedown', this);\n    this.$trigger.removeEventListener('mouseenter', this);\n    doc.removeEventListener('touchmove', this);\n    doc.removeEventListener('touchend', this);\n    doc.removeEventListener('touchcancel', this);\n    doc.removeEventListener('mousemove', this);\n    doc.removeEventListener('mouseup', this);\n    doc.removeEventListener('selectstart', this);\n    return this;\n  }\n\n  revert() {\n    this.reset();\n    this.disable();\n    this.$target.classList.remove('is-disabled');\n    this.updateTicker.revert();\n    this.overshootXTicker.revert();\n    this.overshootYTicker.revert();\n    this.resizeTicker.revert();\n    this.animate.revert();\n    this.resizeObserver.disconnect();\n    return this;\n  }\n\n  /**\n   * @param {Event} e\n   */\n  handleEvent(e) {\n    switch (e.type) {\n      case 'mousedown':\n        this.handleDown(/** @type {MouseEvent} */(e));\n        break;\n      case 'touchstart':\n        this.handleDown(/** @type {TouchEvent} */(e));\n        break;\n      case 'mousemove':\n        this.handleMove(/** @type {MouseEvent} */(e));\n        break;\n      case 'touchmove':\n        this.handleMove(/** @type {TouchEvent} */(e));\n        break;\n      case 'mouseup':\n        this.handleUp();\n        break;\n      case 'touchend':\n        this.handleUp();\n        break;\n      case 'touchcancel':\n        this.handleUp();\n        break;\n      case 'mouseenter':\n        this.handleHover();\n        break;\n      case 'selectstart':\n        preventDefault(e);\n        break;\n    }\n  }\n}\n\n/**\n * @param {TargetsParam} target\n * @param {DraggableParams} [parameters]\n * @return {Draggable}\n */\nconst createDraggable = (target, parameters) => new Draggable(target, parameters);\n\n\n\n\nclass Scope {\n  /** @param {ScopeParams} [parameters] */\n  constructor(parameters = {}) {\n    if (scope.current) scope.current.register(this);\n    const rootParam = parameters.root;\n    /** @type {Document|DOMTarget} */\n    let root = doc;\n    if (rootParam) {\n      root = /** @type {ReactRef} */(rootParam).current ||\n             /** @type {AngularRef} */(rootParam).nativeElement ||\n             parseTargets(/** @type {DOMTargetSelector} */(rootParam))[0] ||\n             doc;\n    }\n    const scopeDefaults = parameters.defaults;\n    const globalDefault = globals.defaults;\n    const mediaQueries = parameters.mediaQueries;\n    /** @type {DefaultsParams} */\n    this.defaults = scopeDefaults ? mergeObjects(scopeDefaults, globalDefault) : globalDefault;\n    /** @type {Document|DOMTarget} */\n    this.root = root;\n    /** @type {Array<ScopeConstructorCallback>} */\n    this.constructors = [];\n    /** @type {Array<ScopeCleanupCallback>} */\n    this.revertConstructors = [];\n    /** @type {Array<Revertible>} */\n    this.revertibles = [];\n    /** @type {Array<ScopeConstructorCallback | ((scope: this) => Tickable)>} */\n    this.constructorsOnce = [];\n    /** @type {Array<ScopeCleanupCallback>} */\n    this.revertConstructorsOnce = [];\n    /** @type {Array<Revertible>} */\n    this.revertiblesOnce = [];\n    /** @type {Boolean} */\n    this.once = false;\n    /** @type {Number} */\n    this.onceIndex = 0;\n    /** @type {Record<String, ScopeMethod>} */\n    this.methods = {};\n    /** @type {Record<String, Boolean>} */\n    this.matches = {};\n    /** @type {Record<String, MediaQueryList>} */\n    this.mediaQueryLists = {};\n    /** @type {Record<String, any>} */\n    this.data = {};\n    if (mediaQueries) {\n      for (let mq in mediaQueries) {\n        const _mq = win.matchMedia(mediaQueries[mq]);\n        this.mediaQueryLists[mq] = _mq;\n        _mq.addEventListener('change', this);\n      }\n    }\n  }\n\n  /**\n   * @param {Revertible} revertible\n   */\n  register(revertible) {\n    const store = this.once ? this.revertiblesOnce : this.revertibles;\n    store.push(revertible);\n  }\n\n  /**\n   * @template T\n   * @param {ScopedCallback<T>} cb\n   * @return {T}\n   */\n  execute(cb) {\n    let activeScope = scope.current;\n    let activeRoot = scope.root;\n    let activeDefaults = globals.defaults;\n    scope.current = this;\n    scope.root = this.root;\n    globals.defaults = this.defaults;\n    const mqs = this.mediaQueryLists;\n    for (let mq in mqs) this.matches[mq] = mqs[mq].matches;\n    const returned = cb(this);\n    scope.current = activeScope;\n    scope.root = activeRoot;\n    globals.defaults = activeDefaults;\n    return returned;\n  }\n\n  /**\n   * @return {this}\n   */\n  refresh() {\n    this.onceIndex = 0;\n    this.execute(() => {\n      let i = this.revertibles.length;\n      let y = this.revertConstructors.length;\n      while (i--) this.revertibles[i].revert();\n      while (y--) this.revertConstructors[y](this);\n      this.revertibles.length = 0;\n      this.revertConstructors.length = 0;\n      this.constructors.forEach((/** @type {ScopeConstructorCallback} */constructor) => {\n        const revertConstructor = constructor(this);\n        if (isFnc(revertConstructor)) {\n          this.revertConstructors.push(revertConstructor);\n        }\n      });\n    });\n    return this;\n  }\n\n  /**\n   * @overload\n   * @param {String} a1\n   * @param {ScopeMethod} a2\n   * @return {this}\n   *\n   * @overload\n   * @param {ScopeConstructorCallback} a1\n   * @return {this}\n   *\n   * @param {String|ScopeConstructorCallback} a1\n   * @param {ScopeMethod} [a2]\n   */\n  add(a1, a2) {\n    this.once = false;\n    if (isFnc(a1)) {\n      const constructor = /** @type {ScopeConstructorCallback} */(a1);\n      this.constructors.push(constructor);\n      this.execute(() => {\n        const revertConstructor = constructor(this);\n        if (isFnc(revertConstructor)) {\n          this.revertConstructors.push(revertConstructor);\n        }\n      });\n    } else {\n      this.methods[/** @type {String} */(a1)] = (/** @type {any} */...args) => this.execute(() => a2(...args));\n    }\n    return this;\n  }\n\n  /**\n   * @param {ScopeConstructorCallback} scopeConstructorCallback\n   * @return {this}\n   */\n  addOnce(scopeConstructorCallback) {\n    this.once = true;\n    if (isFnc(scopeConstructorCallback)) {\n      const currentIndex = this.onceIndex++;\n      const tracked = this.constructorsOnce[currentIndex];\n      if (tracked) return this;\n      const constructor = /** @type {ScopeConstructorCallback} */(scopeConstructorCallback);\n      this.constructorsOnce[currentIndex] = constructor;\n      this.execute(() => {\n        const revertConstructor = constructor(this);\n        if (isFnc(revertConstructor)) {\n          this.revertConstructorsOnce.push(revertConstructor);\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * @param  {(scope: this) => Tickable} cb\n   * @return {Tickable}\n   */\n  keepTime(cb) {\n    this.once = true;\n    const currentIndex = this.onceIndex++;\n    const tracked = /** @type {(scope: this) => Tickable} */(this.constructorsOnce[currentIndex]);\n    if (isFnc(tracked)) return tracked(this);\n    const constructor = /** @type {(scope: this) => Tickable} */(createRefreshable(cb));\n    this.constructorsOnce[currentIndex] = constructor;\n    let trackedTickable;\n    this.execute(() => {\n      trackedTickable = constructor(this);\n    });\n    return trackedTickable;\n  }\n\n  /**\n   * @param {Event} e\n   */\n  handleEvent(e) {\n    switch (e.type) {\n      case 'change':\n        this.refresh();\n        break;\n    }\n  }\n\n  revert() {\n    const revertibles = this.revertibles;\n    const revertConstructors = this.revertConstructors;\n    const revertiblesOnce = this.revertiblesOnce;\n    const revertConstructorsOnce = this.revertConstructorsOnce;\n    const mqs = this.mediaQueryLists;\n    let i = revertibles.length;\n    let j = revertConstructors.length;\n    let k = revertiblesOnce.length;\n    let l = revertConstructorsOnce.length;\n    while (i--) revertibles[i].revert();\n    while (j--) revertConstructors[j](this);\n    while (k--) revertiblesOnce[k].revert();\n    while (l--) revertConstructorsOnce[l](this);\n    for (let mq in mqs) mqs[mq].removeEventListener('change', this);\n    revertibles.length = 0;\n    revertConstructors.length = 0;\n    this.constructors.length = 0;\n    revertiblesOnce.length = 0;\n    revertConstructorsOnce.length = 0;\n    this.constructorsOnce.length = 0;\n    this.onceIndex = 0;\n    this.matches = {};\n    this.methods = {};\n    this.mediaQueryLists = {};\n    this.data = {};\n  }\n}\n\n/**\n * @param {ScopeParams} [params]\n * @return {Scope}\n */\nconst createScope = params => new Scope(params);\n\n/**\n * @typedef {String|Number} ScrollThresholdValue\n */\n\n/**\n * @return {Number}\n */\nconst getMaxViewHeight = () => {\n  const $el = doc.createElement('div');\n  doc.body.appendChild($el);\n  $el.style.height = '100lvh';\n  const height = $el.offsetHeight;\n  doc.body.removeChild($el);\n  return height;\n};\n\n/**\n * @template {ScrollThresholdValue|String|Number|Boolean|Function|Object} T\n * @param {T | ((observer: ScrollObserver) => T)} value\n * @param {ScrollObserver} scroller\n * @return {T}\n */\nconst parseScrollObserverFunctionParameter = (value, scroller) => value && isFnc(value) ? /** @type {Function} */(value)(scroller) : value;\n\nconst scrollContainers = new Map();\n\nclass ScrollContainer {\n  /**\n   * @param {HTMLElement} $el\n   */\n  constructor($el) {\n    /** @type {HTMLElement} */\n    this.element = $el;\n    /** @type {Boolean} */\n    this.useWin = this.element === doc.body;\n    /** @type {Number} */\n    this.winWidth = 0;\n    /** @type {Number} */\n    this.winHeight = 0;\n    /** @type {Number} */\n    this.width = 0;\n    /** @type {Number} */\n    this.height = 0;\n    /** @type {Number} */\n    this.left = 0;\n    /** @type {Number} */\n    this.top = 0;\n    /** @type {Number} */\n    this.zIndex = 0;\n    /** @type {Number} */\n    this.scrollX = 0;\n    /** @type {Number} */\n    this.scrollY = 0;\n    /** @type {Number} */\n    this.prevScrollX = 0;\n    /** @type {Number} */\n    this.prevScrollY = 0;\n    /** @type {Number} */\n    this.scrollWidth = 0;\n    /** @type {Number} */\n    this.scrollHeight = 0;\n    /** @type {Number} */\n    this.velocity = 0;\n    /** @type {Boolean} */\n    this.backwardX = false;\n    /** @type {Boolean} */\n    this.backwardY = false;\n    /** @type {Timer} */\n    this.scrollTicker = new Timer({\n      autoplay: false,\n      onBegin: () => this.dataTimer.resume(),\n      onUpdate: () => {\n        const backwards = this.backwardX || this.backwardY;\n        forEachChildren(this, (/** @type {ScrollObserver} */child) => child.handleScroll(), backwards);\n      },\n      onComplete: () => this.dataTimer.pause()\n    }).init();\n    /** @type {Timer} */\n    this.dataTimer = new Timer({\n      autoplay: false,\n      frameRate: 30,\n      onUpdate: self => {\n        const dt = self.deltaTime;\n        const px = this.prevScrollX;\n        const py = this.prevScrollY;\n        const nx = this.scrollX;\n        const ny = this.scrollY;\n        const dx = px - nx;\n        const dy = py - ny;\n        this.prevScrollX = nx;\n        this.prevScrollY = ny;\n        if (dx) this.backwardX = px > nx;\n        if (dy) this.backwardY = py > ny;\n        this.velocity = round(dt > 0 ? Math.sqrt(dx * dx + dy * dy) / dt : 0, 5);\n      }\n    }).init();\n    /** @type {Timer} */\n    this.resizeTicker = new Timer({\n      autoplay: false,\n      duration: 250 * globals.timeScale,\n      onComplete: () => {\n        this.updateWindowBounds();\n        this.refreshScrollObservers();\n        this.handleScroll();\n      }\n    }).init();\n    /** @type {Timer} */\n    this.wakeTicker = new Timer({\n      autoplay: false,\n      duration: 500 * globals.timeScale,\n      onBegin: () => {\n        this.scrollTicker.resume();\n      },\n      onComplete: () => {\n        this.scrollTicker.pause();\n      }\n    }).init();\n    /** @type {ScrollObserver} */\n    this._head = null;\n    /** @type {ScrollObserver} */\n    this._tail = null;\n    this.updateScrollCoords();\n    this.updateWindowBounds();\n    this.updateBounds();\n    this.refreshScrollObservers();\n    this.handleScroll();\n    this.resizeObserver = new ResizeObserver(() => this.resizeTicker.restart());\n    this.resizeObserver.observe(this.element);\n    (this.useWin ? win : this.element).addEventListener('scroll', this, false);\n  }\n\n  updateScrollCoords() {\n    const useWin = this.useWin;\n    const $el = this.element;\n    this.scrollX = round(useWin ? win.scrollX : $el.scrollLeft, 0);\n    this.scrollY = round(useWin ? win.scrollY : $el.scrollTop, 0);\n  }\n\n  updateWindowBounds() {\n    this.winWidth = win.innerWidth;\n    this.winHeight = getMaxViewHeight();\n  }\n\n  updateBounds() {\n    const style = getComputedStyle(this.element);\n    const $el = this.element;\n    this.scrollWidth = $el.scrollWidth + parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n    this.scrollHeight = $el.scrollHeight + parseFloat(style.marginTop) + parseFloat(style.marginBottom);\n    this.updateWindowBounds();\n    let width, height;\n    if (this.useWin) {\n      width = this.winWidth;\n      height = this.winHeight;\n    } else {\n      const elRect = $el.getBoundingClientRect();\n      width = elRect.width;\n      height = elRect.height;\n      this.top = elRect.top;\n      this.left = elRect.left;\n    }\n    this.width = width;\n    this.height = height;\n  }\n\n  refreshScrollObservers() {\n    forEachChildren(this, (/** @type {ScrollObserver} */child) => {\n      if (child._debug) {\n        child.removeDebug();\n      }\n    });\n    this.updateBounds();\n    forEachChildren(this, (/** @type {ScrollObserver} */child) => {\n      child.refresh();\n      if (child._debug) {\n        child.debug();\n      }\n    });\n  }\n\n  refresh() {\n    this.updateWindowBounds();\n    this.updateBounds();\n    this.refreshScrollObservers();\n    this.handleScroll();\n  }\n\n  handleScroll() {\n    this.updateScrollCoords();\n    this.wakeTicker.restart();\n  }\n\n  /**\n   * @param {Event} e\n   */\n  handleEvent(e) {\n    switch (e.type) {\n      case 'scroll':\n        this.handleScroll();\n        break;\n    }\n  }\n\n  revert() {\n    this.scrollTicker.cancel();\n    this.dataTimer.cancel();\n    this.resizeTicker.cancel();\n    this.wakeTicker.cancel();\n    this.resizeObserver.disconnect();\n    (this.useWin ? win : this.element).removeEventListener('scroll', this);\n    scrollContainers.delete(this.element);\n  }\n}\n\n/**\n * @param {TargetsParam} target\n * @return {ScrollContainer}\n */\nconst registerAndGetScrollContainer = target => {\n  const $el = /** @type {HTMLElement} */(target ? parseTargets(target)[0] || doc.body : doc.body);\n  let scrollContainer = scrollContainers.get($el);\n  if (!scrollContainer) {\n    scrollContainer = new ScrollContainer($el);\n    scrollContainers.set($el, scrollContainer);\n  }\n  return scrollContainer;\n};\n\n/**\n * @param {HTMLElement} $el\n * @param {Number|string} v\n * @param {Number} size\n * @param {Number} [under]\n * @param {Number} [over]\n * @return {Number}\n */\nconst convertValueToPx = ($el, v, size, under, over) => {\n  const clampMin = v === 'min';\n  const clampMax = v === 'max';\n  const value = v === 'top' || v === 'left' || v === 'start' || clampMin ? 0 :\n                v === 'bottom' || v === 'right' || v === 'end' || clampMax ? '100%' :\n                v === 'center' ? '50%' :\n                v;\n  const { n, u } = decomposeRawValue(value, decomposedOriginalValue);\n  let px = n;\n  if (u === '%') {\n    px = (n / 100) * size;\n  } else if (u) {\n    px = convertValueUnit($el, decomposedOriginalValue, 'px', true).n;\n  }\n  if (clampMax && under < 0) px += under;\n  if (clampMin && over > 0) px += over;\n  return px;\n};\n\n/**\n * @param {HTMLElement} $el\n * @param {ScrollThresholdValue} v\n * @param {Number} size\n * @param {Number} [under]\n * @param {Number} [over]\n * @return {Number}\n */\nconst parseBoundValue = ($el, v, size, under, over) => {\n  /** @type {Number} */\n  let value;\n  if (isStr(v)) {\n    const matchedOperator = relativeValuesExecRgx.exec(/** @type {String} */(v));\n    if (matchedOperator) {\n      const splitter = matchedOperator[0];\n      const operator = splitter[0];\n      const splitted = /** @type {String} */(v).split(splitter);\n      const clampMin = splitted[0] === 'min';\n      const clampMax = splitted[0] === 'max';\n      const valueAPx = convertValueToPx($el, splitted[0], size, under, over);\n      const valueBPx = convertValueToPx($el, splitted[1], size, under, over);\n      if (clampMin) {\n        const min = getRelativeValue(convertValueToPx($el, 'min', size), valueBPx, operator);\n        value = min < valueAPx ? valueAPx : min;\n      } else if (clampMax) {\n        const max = getRelativeValue(convertValueToPx($el, 'max', size), valueBPx, operator);\n        value = max > valueAPx ? valueAPx : max;\n      } else {\n        value = getRelativeValue(valueAPx, valueBPx, operator);\n      }\n    } else {\n      value = convertValueToPx($el, v, size, under, over);\n    }\n  } else {\n    value = /** @type {Number} */(v);\n  }\n  return round(value, 0);\n};\n\n/**\n * @param {JSAnimation} linked\n * @return {HTMLElement}\n */\nconst getAnimationDomTarget = linked => {\n  let $linkedTarget;\n  const linkedTargets = linked.targets;\n  for (let i = 0, l = linkedTargets.length; i < l; i++) {\n    const target = linkedTargets[i];\n    if (target[isDomSymbol]) {\n      $linkedTarget = /** @type {HTMLElement} */(target);\n      break;\n    }\n  }\n  return $linkedTarget;\n};\n\nlet scrollerIndex = 0;\n\nconst debugColors$1 = ['#FF4B4B','#FF971B','#FFC730','#F9F640','#7AFF5A','#18FF74','#17E09B','#3CFFEC','#05DBE9','#33B3F1','#638CF9','#C563FE','#FF4FCF','#F93F8A'];\n\n/**\n * @typedef {Object} ScrollThresholdParam\n * @property {ScrollThresholdValue} [target]\n * @property {ScrollThresholdValue} [container]\n */\n\n/**\n * @callback ScrollObserverAxisCallback\n * @param {ScrollObserver} self\n * @return {'x'|'y'}\n */\n\n/**\n * @callback ScrollThresholdCallback\n * @param {ScrollObserver} self\n * @return {ScrollThresholdValue|ScrollThresholdParam}\n */\n\n/**\n * @typedef {Object} ScrollObserverParams\n * @property {Number|String} [id]\n * @property {Boolean|Number|String|EasingParam} [sync]\n * @property {TargetsParam} [container]\n * @property {TargetsParam} [target]\n * @property {'x'|'y'|ScrollObserverAxisCallback|((observer: ScrollObserver) => 'x'|'y'|ScrollObserverAxisCallback)} [axis]\n * @property {ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback|((observer: ScrollObserver) => ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback)} [enter]\n * @property {ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback|((observer: ScrollObserver) => ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback)} [leave]\n * @property {Boolean|((observer: ScrollObserver) => Boolean)} [repeat]\n * @property {Boolean} [debug]\n * @property {Callback<ScrollObserver>} [onEnter]\n * @property {Callback<ScrollObserver>} [onLeave]\n * @property {Callback<ScrollObserver>} [onEnterForward]\n * @property {Callback<ScrollObserver>} [onLeaveForward]\n * @property {Callback<ScrollObserver>} [onEnterBackward]\n * @property {Callback<ScrollObserver>} [onLeaveBackward]\n * @property {Callback<ScrollObserver>} [onUpdate]\n * @property {Callback<ScrollObserver>} [onSyncComplete]\n */\n\nclass ScrollObserver {\n  /**\n   * @param {ScrollObserverParams} parameters\n   */\n  constructor(parameters = {}) {\n    if (scope.current) scope.current.register(this);\n    const syncMode = setValue(parameters.sync, 'play pause');\n    const ease = syncMode ? parseEasings(/** @type {EasingParam} */(syncMode)) : null;\n    const isLinear = syncMode && (syncMode === 'linear' || syncMode === none);\n    const isEase = syncMode && !(ease === none && !isLinear);\n    const isSmooth = syncMode && (isNum(syncMode) || syncMode === true || isLinear);\n    const isMethods = syncMode && (isStr(syncMode) && !isEase && !isSmooth);\n    const syncMethods = isMethods ? /** @type {String} */(syncMode).split(' ').map(\n      (/** @type {String} */m) => () => {\n        const linked = this.linked;\n        return linked && linked[m] ? linked[m]() : null;\n      }\n    ) : null;\n    const biDirSync = isMethods && syncMethods.length > 2;\n    /** @type {Number} */\n    this.index = scrollerIndex++;\n    /** @type {String|Number} */\n    this.id = !isUnd(parameters.id) ? parameters.id : this.index;\n    /** @type {ScrollContainer} */\n    this.container = registerAndGetScrollContainer(parameters.container);\n    /** @type {HTMLElement} */\n    this.target = null;\n    /** @type {Tickable|WAAPIAnimation} */\n    this.linked = null;\n    /** @type {Boolean} */\n    this.repeat = null;\n    /** @type {Boolean} */\n    this.horizontal = null;\n    /** @type {ScrollThresholdParam|ScrollThresholdValue|ScrollThresholdCallback} */\n    this.enter = null;\n    /** @type {ScrollThresholdParam|ScrollThresholdValue|ScrollThresholdCallback} */\n    this.leave = null;\n    /** @type {Boolean} */\n    this.sync = isEase || isSmooth || !!syncMethods;\n    /** @type {EasingFunction} */\n    this.syncEase = isEase ? ease : null;\n    /** @type {Number} */\n    this.syncSmooth = isSmooth ? syncMode === true || isLinear ? 1 : /** @type {Number} */(syncMode) : null;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncEnter = syncMethods && !biDirSync && syncMethods[0] ? syncMethods[0] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncLeave = syncMethods && !biDirSync && syncMethods[1] ? syncMethods[1] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncEnterForward = syncMethods && biDirSync && syncMethods[0] ? syncMethods[0] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncLeaveForward = syncMethods && biDirSync && syncMethods[1] ? syncMethods[1] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncEnterBackward = syncMethods && biDirSync && syncMethods[2] ? syncMethods[2] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncLeaveBackward = syncMethods && biDirSync && syncMethods[3] ? syncMethods[3] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onEnter = parameters.onEnter || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onLeave = parameters.onLeave || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onEnterForward = parameters.onEnterForward || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onLeaveForward = parameters.onLeaveForward || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onEnterBackward = parameters.onEnterBackward || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onLeaveBackward = parameters.onLeaveBackward || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onUpdate = parameters.onUpdate || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncComplete = parameters.onSyncComplete || noop;\n    /** @type {Boolean} */\n    this.reverted = false;\n    /** @type {Boolean} */\n    this.completed = false;\n    /** @type {Boolean} */\n    this.began = false;\n    /** @type {Boolean} */\n    this.isInView = false;\n    /** @type {Boolean} */\n    this.forceEnter = false;\n    /** @type {Boolean} */\n    this.hasEntered = false;\n    // /** @type {Array.<Number>} */\n    // this.offsets = [];\n    /** @type {Number} */\n    this.offset = 0;\n    /** @type {Number} */\n    this.offsetStart = 0;\n    /** @type {Number} */\n    this.offsetEnd = 0;\n    /** @type {Number} */\n    this.distance = 0;\n    /** @type {Number} */\n    this.prevProgress = 0;\n    /** @type {Array} */\n    this.thresholds = ['start', 'end', 'end', 'start'];\n    /** @type {[Number, Number, Number, Number]} */\n    this.coords = [0, 0, 0, 0];\n    /** @type {JSAnimation} */\n    this.debugStyles = null;\n    /** @type {HTMLElement} */\n    this.$debug = null;\n    /** @type {ScrollObserverParams} */\n    this._params = parameters;\n    /** @type {Boolean} */\n    this._debug = setValue(parameters.debug, false);\n    /** @type {ScrollObserver} */\n    this._next = null;\n    /** @type {ScrollObserver} */\n    this._prev = null;\n    addChild(this.container, this);\n    // Wait for the next frame to add to the container in order to handle calls to link()\n    sync(() => {\n      if (this.reverted) return;\n      if (!this.target) {\n        const target = /** @type {HTMLElement} */(parseTargets(parameters.target)[0]);\n        this.target = target || doc.body;\n        this.refresh();\n      }\n      if (this._debug) this.debug();\n    });\n  }\n\n  /**\n   * @param {Tickable|WAAPIAnimation} linked\n   */\n  link(linked) {\n    if (linked) {\n      // Make sure to pause the linked object in case it's added later\n      linked.pause();\n      this.linked = linked;\n      // Try to use a target of the linked object if no target parameters specified\n      if (!this._params.target) {\n        /** @type {HTMLElement} */\n        let $linkedTarget;\n        if (!isUnd(/** @type {JSAnimation} */(linked).targets)) {\n          $linkedTarget = getAnimationDomTarget(/** @type {JSAnimation} */(linked));\n        } else {\n          forEachChildren(/** @type {Timeline} */(linked), (/** @type {JSAnimation} */child) => {\n            if (child.targets && !$linkedTarget) {\n              $linkedTarget = getAnimationDomTarget(/** @type {JSAnimation} */(child));\n            }\n          });\n        }\n        // Fallback to body if no target found\n        this.target = $linkedTarget || doc.body;\n        this.refresh();\n      }\n    }\n    return this;\n  }\n\n  get velocity() {\n    return this.container.velocity;\n  }\n\n  get backward() {\n    return this.horizontal ? this.container.backwardX : this.container.backwardY;\n  }\n\n  get scroll() {\n    return this.horizontal ? this.container.scrollX : this.container.scrollY;\n  }\n\n  get progress() {\n    const p = (this.scroll - this.offsetStart) / this.distance;\n    return p === Infinity || isNaN(p) ? 0 : round(clamp(p, 0, 1), 6);\n  }\n\n  refresh() {\n    this.reverted = false;\n    const params = this._params;\n    this.repeat = setValue(parseScrollObserverFunctionParameter(params.repeat, this), true);\n    this.horizontal = setValue(parseScrollObserverFunctionParameter(params.axis, this), 'y') === 'x';\n    this.enter = setValue(parseScrollObserverFunctionParameter(params.enter, this), 'end start');\n    this.leave = setValue(parseScrollObserverFunctionParameter(params.leave, this), 'start end');\n    this.updateBounds();\n    this.handleScroll();\n    return this;\n  }\n\n  removeDebug() {\n    if (this.$debug) {\n      this.$debug.parentNode.removeChild(this.$debug);\n      this.$debug = null;\n    }\n    if (this.debugStyles) {\n      this.debugStyles.revert();\n      this.$debug = null;\n    }\n    return this;\n  }\n\n  debug() {\n    this.removeDebug();\n    const container = this.container;\n    const isHori = this.horizontal;\n    const $existingDebug = container.element.querySelector(':scope > .animejs-onscroll-debug');\n    const $debug = doc.createElement('div');\n    const $thresholds = doc.createElement('div');\n    const $triggers = doc.createElement('div');\n    const color = debugColors$1[this.index % debugColors$1.length];\n    const useWin = container.useWin;\n    const containerWidth = useWin ? container.winWidth : container.width;\n    const containerHeight = useWin ? container.winHeight : container.height;\n    const scrollWidth = container.scrollWidth;\n    const scrollHeight = container.scrollHeight;\n    const size = this.container.width > 360 ? 320 : 260;\n    const offLeft = isHori ? 0 : 10;\n    const offTop = isHori ? 10 : 0;\n    const half = isHori ? 24 : size / 2;\n    const labelHeight = isHori ? half : 15;\n    const labelWidth = isHori ? 60 : half;\n    const labelSize = isHori ? labelWidth : labelHeight;\n    const repeat = isHori ? 'repeat-x' : 'repeat-y';\n    /**\n     * @param {Number} v\n     * @return {String}\n     */\n    const gradientOffset = v => isHori ? '0px '+(v)+'px' : (v)+'px'+' 2px';\n    /**\n     * @param {String} c\n     * @return {String}\n     */\n    const lineCSS = (c) => `linear-gradient(${isHori ? 90 : 0}deg, ${c} 2px, transparent 1px)`;\n    /**\n     * @param {String} p\n     * @param {Number} l\n     * @param {Number} t\n     * @param {Number} w\n     * @param {Number} h\n     * @return {String}\n     */\n    const baseCSS = (p, l, t, w, h) => `position:${p};left:${l}px;top:${t}px;width:${w}px;height:${h}px;`;\n    $debug.style.cssText = `${baseCSS('absolute', offLeft, offTop, isHori ? scrollWidth : size, isHori ? size : scrollHeight)}\n      pointer-events: none;\n      z-index: ${this.container.zIndex++};\n      display: flex;\n      flex-direction: ${isHori ? 'column' : 'row'};\n      filter: drop-shadow(0px 1px 0px rgba(0,0,0,.75));\n    `;\n    $thresholds.style.cssText = `${baseCSS('sticky', 0, 0, isHori ? containerWidth : half, isHori ? half : containerHeight)}`;\n    if (!$existingDebug) {\n      $thresholds.style.cssText += `background:\n        ${lineCSS('#FFFF')}${gradientOffset(half-10)} / ${isHori ? '100px 100px' : '100px 100px'} ${repeat},\n        ${lineCSS('#FFF8')}${gradientOffset(half-10)} / ${isHori ? '10px 10px' : '10px 10px'} ${repeat};\n      `;\n    }\n    $triggers.style.cssText = `${baseCSS('relative', 0, 0, isHori ? scrollWidth : half, isHori ? half : scrollHeight)}`;\n    if (!$existingDebug) {\n      $triggers.style.cssText += `background:\n        ${lineCSS('#FFFF')}${gradientOffset(0)} / ${isHori ? '100px 10px' : '10px 100px'} ${repeat},\n        ${lineCSS('#FFF8')}${gradientOffset(0)} / ${isHori ? '10px 0px' : '0px 10px'} ${repeat};\n      `;\n    }\n    const labels = [' enter: ', ' leave: '];\n    this.coords.forEach((v, i) => {\n      const isView = i > 1;\n      const value = (isView ? 0 : this.offset) + v;\n      const isTail = i % 2;\n      const isFirst = value < labelSize;\n      const isOver = value > (isView ? isHori ? containerWidth : containerHeight : isHori ? scrollWidth : scrollHeight) - labelSize;\n      const isFlip = (isView ? isTail && !isFirst : !isTail && !isFirst) || isOver;\n      const $label = doc.createElement('div');\n      const $text = doc.createElement('div');\n      const dirProp = isHori ? isFlip ? 'right' : 'left' : isFlip ? 'bottom' : 'top';\n      const flipOffset = isFlip ? (isHori ? labelWidth : labelHeight) + (!isView ? isHori ? -1 : -2 : isHori ? -1 : isOver ? 0 : -2) : !isView ? isHori ? 1 : 0 : isHori ? 1 : 0;\n      // $text.innerHTML = `${!isView ? '' : labels[isTail] + ' '}${this.id}: ${this.thresholds[i]} ${isView ? '' : labels[isTail]}`;\n      $text.innerHTML = `${this.id}${labels[isTail]}${this.thresholds[i]}`;\n      $label.style.cssText = `${baseCSS('absolute', 0, 0, labelWidth, labelHeight)}\n        display: flex;\n        flex-direction: ${isHori ? 'column' : 'row'};\n        justify-content: flex-${isView ? 'start' : 'end'};\n        align-items: flex-${isFlip ? 'end' : 'start'};\n        border-${dirProp}: 2px ${isTail ? 'solid' : 'solid'} ${color};\n      `;\n      $text.style.cssText = `\n        overflow: hidden;\n        max-width: ${(size / 2) - 10}px;\n        height: ${labelHeight};\n        margin-${isHori ? isFlip ? 'right' : 'left' : isFlip ? 'bottom' : 'top'}: -2px;\n        padding: 1px;\n        font-family: ui-monospace, monospace;\n        font-size: 10px;\n        letter-spacing: -.025em;\n        line-height: 9px;\n        font-weight: 600;\n        text-align: ${isHori && isFlip || !isHori && !isView ? 'right' : 'left'};\n        white-space: pre;\n        text-overflow: ellipsis;\n        color: ${isTail ? color : 'rgba(0,0,0,.75)'};\n        background-color: ${isTail ? 'rgba(0,0,0,.65)' : color};\n        border: 2px solid ${isTail ? color : 'transparent'};\n        border-${isHori ? isFlip ? 'top-left' : 'top-right' : isFlip ? 'top-left' : 'bottom-left'}-radius: 5px;\n        border-${isHori ? isFlip ? 'bottom-left' : 'bottom-right' : isFlip ? 'top-right' : 'bottom-right'}-radius: 5px;\n      `;\n      $label.appendChild($text);\n      let position = value - flipOffset + (isHori ? 1 : 0);\n      $label.style[isHori ? 'left' : 'top'] = `${position}px`;\n      // $label.style[isHori ? 'left' : 'top'] = value - flipOffset + (!isFlip && isFirst && !isView ? 1 : isFlip ? 0 : -2) + 'px';\n      (isView ? $thresholds : $triggers).appendChild($label);\n    });\n\n    $debug.appendChild($thresholds);\n    $debug.appendChild($triggers);\n    container.element.appendChild($debug);\n\n    if (!$existingDebug) $debug.classList.add('animejs-onscroll-debug');\n    this.$debug = $debug;\n    const containerPosition = getTargetValue(container.element, 'position');\n    if (containerPosition === 'static') {\n      this.debugStyles = setTargetValues(container.element, { position: 'relative '});\n    }\n\n  }\n\n  updateBounds() {\n    if (this._debug) {\n      this.removeDebug();\n    }\n    let stickys;\n    const $target = this.target;\n    const container = this.container;\n    const isHori = this.horizontal;\n    const linked = this.linked;\n    let linkedTime;\n    let $el = $target;\n    // let offsetX = 0;\n    // let offsetY = 0;\n    // let $offsetParent = $el;\n    /** @type {Element} */\n    if (linked) {\n      linkedTime = linked.currentTime;\n      linked.seek(0, true);\n    }\n    /* Old implementation to get offset and targetSize before fixing https://github.com/juliangarnier/anime/issues/1021\n    // const isContainerStatic = getTargetValue(container.element, 'position') === 'static' ? setTargetValues(container.element, { position: 'relative '}) : false;\n    // while ($el && $el !== container.element && $el !== doc.body) {\n    //   const isSticky = getTargetValue($el, 'position') === 'sticky' ?\n    //                    setTargetValues($el, { position: 'static' }) :\n    //                    false;\n    //   if ($el === $offsetParent) {\n    //     offsetX += $el.offsetLeft || 0;\n    //     offsetY += $el.offsetTop || 0;\n    //     $offsetParent = $el.offsetParent;\n    //   }\n    //   $el = /** @type {HTMLElement} */($el.parentElement);\n    //   if (isSticky) {\n    //     if (!stickys) stickys = [];\n    //     stickys.push(isSticky);\n    //   }\n    // }\n    // if (isContainerStatic) isContainerStatic.revert();\n    // const offset = isHori ? offsetX : offsetY;\n    // const targetSize = isHori ? $target.offsetWidth : $target.offsetHeight;\n\n    while ($el && $el !== container.element && $el !== doc.body) {\n      const isSticky = getTargetValue($el, 'position') === 'sticky' ? setTargetValues($el, { position: 'static' }) : false;\n      $el = $el.parentElement;\n      if (isSticky) {\n        if (!stickys) stickys = [];\n        stickys.push(isSticky);\n      }\n    }\n    const rect = $target.getBoundingClientRect();\n    const offset = isHori ? rect.left + container.scrollX - container.left : rect.top + container.scrollY - container.top;\n    const targetSize = isHori ? rect.width : rect.height;\n    const containerSize = isHori ? container.width : container.height;\n    const scrollSize = isHori ? container.scrollWidth : container.scrollHeight;\n    const maxScroll = scrollSize - containerSize;\n    const enter = this.enter;\n    const leave = this.leave;\n\n    /** @type {ScrollThresholdValue} */\n    let enterTarget = 'start';\n    /** @type {ScrollThresholdValue} */\n    let leaveTarget = 'end';\n    /** @type {ScrollThresholdValue} */\n    let enterContainer = 'end';\n    /** @type {ScrollThresholdValue} */\n    let leaveContainer = 'start';\n\n    if (isStr(enter)) {\n      const splitted = /** @type {String} */(enter).split(' ');\n      enterContainer = splitted[0];\n      enterTarget = splitted.length > 1 ? splitted[1] : enterTarget;\n    } else if (isObj(enter)) {\n      const e = /** @type {ScrollThresholdParam} */(enter);\n      if (!isUnd(e.container)) enterContainer = e.container;\n      if (!isUnd(e.target)) enterTarget = e.target;\n    } else if (isNum(enter)) {\n      enterContainer = /** @type {Number} */(enter);\n    }\n\n    if (isStr(leave)) {\n      const splitted = /** @type {String} */(leave).split(' ');\n      leaveContainer = splitted[0];\n      leaveTarget = splitted.length > 1 ? splitted[1] : leaveTarget;\n    } else if (isObj(leave)) {\n      const t = /** @type {ScrollThresholdParam} */(leave);\n      if (!isUnd(t.container)) leaveContainer = t.container;\n      if (!isUnd(t.target)) leaveTarget = t.target;\n    } else if (isNum(leave)) {\n      leaveContainer = /** @type {Number} */(leave);\n    }\n\n    const parsedEnterTarget = parseBoundValue($target, enterTarget, targetSize);\n    const parsedLeaveTarget = parseBoundValue($target, leaveTarget, targetSize);\n    const under = (parsedEnterTarget + offset) - containerSize;\n    const over = (parsedLeaveTarget + offset) - maxScroll;\n    const parsedEnterContainer = parseBoundValue($target, enterContainer, containerSize, under, over);\n    const parsedLeaveContainer = parseBoundValue($target, leaveContainer, containerSize, under, over);\n    const offsetStart = parsedEnterTarget + offset - parsedEnterContainer;\n    const offsetEnd = parsedLeaveTarget + offset - parsedLeaveContainer;\n    const scrollDelta = offsetEnd - offsetStart;\n    // this.offsets[0] = offsetX;\n    // this.offsets[1] = offsetY;\n    this.offset = offset;\n    this.offsetStart = offsetStart;\n    this.offsetEnd = offsetEnd;\n    this.distance = scrollDelta <= 0 ? 0 : scrollDelta;\n    this.thresholds = [enterTarget, leaveTarget, enterContainer, leaveContainer];\n    this.coords = [parsedEnterTarget, parsedLeaveTarget, parsedEnterContainer, parsedLeaveContainer];\n    if (stickys) {\n      stickys.forEach(sticky => sticky.revert());\n    }\n    if (linked) {\n      linked.seek(linkedTime, true);\n    }\n    if (this._debug) {\n      this.debug();\n    }\n  }\n\n  handleScroll() {\n    const linked = this.linked;\n    const sync = this.sync;\n    const syncEase = this.syncEase;\n    const syncSmooth = this.syncSmooth;\n    const shouldSeek = linked && (syncEase || syncSmooth);\n    const isHori = this.horizontal;\n    const container = this.container;\n    const scroll = this.scroll;\n    const isBefore = scroll <= this.offsetStart;\n    const isAfter = scroll >= this.offsetEnd;\n    const isInView = !isBefore && !isAfter;\n    const isOnTheEdge = scroll === this.offsetStart || scroll === this.offsetEnd;\n    const forceEnter = !this.hasEntered && isOnTheEdge;\n    const $debug = this._debug && this.$debug;\n    let hasUpdated = false;\n    let syncCompleted = false;\n    let p = this.progress;\n\n    if (isBefore && this.began) {\n      this.began = false;\n    }\n\n    if (p > 0 && !this.began) {\n      this.began = true;\n    }\n\n    if (shouldSeek) {\n      const lp = linked.progress;\n      if (syncSmooth && isNum(syncSmooth)) {\n        if (/** @type {Number} */(syncSmooth) < 1) {\n          const step = 0.0001;\n          const snap = lp < p && p === 1 ? step : lp > p && !p ? -1e-4 : 0;\n          p = round(lerp(lp, p, interpolate(.01, .2, /** @type {Number} */(syncSmooth)), false) + snap, 6);\n        }\n      } else if (syncEase) {\n        p = syncEase(p);\n      }\n      hasUpdated = p !== this.prevProgress;\n      syncCompleted = lp === 1;\n      if (hasUpdated && !syncCompleted && (syncSmooth && lp)) {\n        container.wakeTicker.restart();\n      }\n    }\n\n    if ($debug) {\n      const sticky = isHori ? container.scrollY : container.scrollX;\n      $debug.style[isHori ? 'top' : 'left'] = sticky + 10 + 'px';\n    }\n\n    // Trigger enter callbacks if already in view or when entering the view\n    if ((isInView && !this.isInView) || (forceEnter && !this.forceEnter && !this.hasEntered)) {\n      if (isInView) this.isInView = true;\n      if (!this.forceEnter || !this.hasEntered) {\n        if ($debug && isInView) $debug.style.zIndex = `${this.container.zIndex++}`;\n        this.onSyncEnter(this);\n        this.onEnter(this);\n        if (this.backward) {\n          this.onSyncEnterBackward(this);\n          this.onEnterBackward(this);\n        } else {\n          this.onSyncEnterForward(this);\n          this.onEnterForward(this);\n        }\n        this.hasEntered = true;\n        if (forceEnter) this.forceEnter = true;\n      } else if (isInView) {\n        this.forceEnter = false;\n      }\n    }\n\n    if (isInView || !isInView && this.isInView) {\n      hasUpdated = true;\n    }\n\n    if (hasUpdated) {\n      if (shouldSeek) linked.seek(linked.duration * p);\n      this.onUpdate(this);\n    }\n\n    if (!isInView && this.isInView) {\n      this.isInView = false;\n      this.onSyncLeave(this);\n      this.onLeave(this);\n      if (this.backward) {\n        this.onSyncLeaveBackward(this);\n        this.onLeaveBackward(this);\n      } else {\n        this.onSyncLeaveForward(this);\n        this.onLeaveForward(this);\n      }\n      if (sync && !syncSmooth) {\n        syncCompleted = true;\n      }\n    }\n\n    if (p >= 1 && this.began && !this.completed && (sync && syncCompleted || !sync)) {\n      if (sync) {\n        this.onSyncComplete(this);\n      }\n      this.completed = true;\n      if ((!this.repeat && !linked) || (!this.repeat && linked && linked.completed)) {\n        this.revert();\n      }\n    }\n\n    if (p < 1 && this.completed) {\n      this.completed = false;\n    }\n\n    this.prevProgress = p;\n  }\n\n  revert() {\n    if (this.reverted) return;\n    const container = this.container;\n    removeChild(container, this);\n    if (!container._head) {\n      container.revert();\n    }\n    if (this._debug) {\n      this.removeDebug();\n    }\n    this.reverted = true;\n    return this;\n  }\n\n}\n\n/**\n * @param {ScrollObserverParams} [parameters={}]\n * @return {ScrollObserver}\n */\nconst onScroll = (parameters = {}) => new ScrollObserver(parameters);\n\n\n\n\nconst segmenter = !isUnd(Intl) && Intl.Segmenter;\nconst valueRgx = /\\{value\\}/g;\nconst indexRgx = /\\{i\\}/g;\nconst whiteSpaceGroupRgx = /(\\s+)/;\nconst whiteSpaceRgx = /^\\s+$/;\nconst lineType = 'line';\nconst wordType = 'word';\nconst charType = 'char';\nconst dataLine = `data-line`;\n\n/**\n * @typedef {Object} Segment\n * @property {String} segment\n * @property {Boolean} [isWordLike]\n */\n\n/**\n * @typedef {Object} Segmenter\n * @property {function(String): Iterable<Segment>} segment\n */\n\n/** @type {Segmenter} */\nlet wordSegmenter = null;\n/** @type {Segmenter} */\nlet graphemeSegmenter = null;\nlet $splitTemplate = null;\n\n/**\n * @param  {Segment} seg\n * @return {Boolean}\n */\nconst isSegmentWordLike = seg => {\n  return seg.isWordLike ||\n         seg.segment === ' ' || // Consider spaces as words first, then handle them diffrently later\n         isNum(+seg.segment); // Safari doesn't considers numbers as words\n};\n\n/**\n * @param {HTMLElement} $el\n */\nconst setAriaHidden = $el => $el.setAttribute('aria-hidden', 'true');\n\n/**\n * @param {DOMTarget} $el\n * @param {String} type\n * @return {Array<HTMLElement>}\n */\nconst getAllTopLevelElements = ($el, type) => [.../** @type {*} */($el.querySelectorAll(`[data-${type}]:not([data-${type}] [data-${type}])`))];\n\nconst debugColors = { line: '#00D672', word: '#FF4B4B', char: '#5A87FF' };\n\n/**\n * @param {HTMLElement} $el\n */\nconst filterEmptyElements = $el => {\n  if (!$el.childElementCount && !$el.textContent.trim()) {\n    const $parent = $el.parentElement;\n    $el.remove();\n    if ($parent) filterEmptyElements($parent);\n  }\n};\n\n/**\n * @param {HTMLElement} $el\n * @param {Number} lineIndex\n * @param {Set<HTMLElement>} bin\n * @returns {Set<HTMLElement>}\n */\nconst filterLineElements = ($el, lineIndex, bin) => {\n  const dataLineAttr = $el.getAttribute(dataLine);\n  if (dataLineAttr !== null && +dataLineAttr !== lineIndex || $el.tagName === 'BR') bin.add($el);\n  let i = $el.childElementCount;\n  while (i--) filterLineElements(/** @type {HTMLElement} */($el.children[i]), lineIndex, bin);\n  return bin;\n};\n\n/**\n * @param  {'line'|'word'|'char'} type\n * @param  {splitTemplateParams} params\n * @return {String}\n */\nconst generateTemplate = (type, params = {}) => {\n  let template = ``;\n  const classString = isStr(params.class) ? ` class=\"${params.class}\"` : '';\n  const cloneType = setValue(params.clone, false);\n  const wrapType = setValue(params.wrap, false);\n  const overflow = wrapType ? wrapType === true ? 'clip' : wrapType : cloneType ? 'clip' : false;\n  if (wrapType) template += `<span${overflow ? ` style=\"overflow:${overflow};\"` : ''}>`;\n  template += `<span${classString}${cloneType ? ` style=\"position:relative;\"` : ''} data-${type}=\"{i}\">`;\n  if (cloneType) {\n    const left = cloneType === 'left' ? '-100%' : cloneType === 'right' ? '100%' : '0';\n    const top = cloneType === 'top' ? '-100%' : cloneType === 'bottom' ? '100%' : '0';\n    template += `<span>{value}</span>`;\n    template += `<span inert style=\"position:absolute;top:${top};left:${left};white-space:nowrap;\">{value}</span>`;\n  } else {\n    template += `{value}`;\n  }\n  template += `</span>`;\n  if (wrapType) template += `</span>`;\n  return template;\n};\n\n/**\n * @param  {String|SplitFunctionValue} htmlTemplate\n * @param  {Array<HTMLElement>} store\n * @param  {Node|HTMLElement} node\n * @param  {DocumentFragment} $parentFragment\n * @param  {'line'|'word'|'char'} type\n * @param  {Boolean} debug\n * @param  {Number} lineIndex\n * @param  {Number} [wordIndex]\n * @param  {Number} [charIndex]\n * @return {HTMLElement}\n */\nconst processHTMLTemplate = (htmlTemplate, store, node, $parentFragment, type, debug, lineIndex, wordIndex, charIndex) => {\n  const isLine = type === lineType;\n  const isChar = type === charType;\n  const className = `_${type}_`;\n  const template = isFnc(htmlTemplate) ? htmlTemplate(node) : htmlTemplate;\n  const displayStyle = isLine ? 'block' : 'inline-block';\n  $splitTemplate.innerHTML = template\n    .replace(valueRgx, `<i class=\"${className}\"></i>`)\n    .replace(indexRgx, `${isChar ? charIndex : isLine ? lineIndex : wordIndex}`);\n  const $content = $splitTemplate.content;\n  const $highestParent = /** @type {HTMLElement} */($content.firstElementChild);\n  const $split = /** @type {HTMLElement} */($content.querySelector(`[data-${type}]`)) || $highestParent;\n  const $replacables = /** @type {NodeListOf<HTMLElement>} */($content.querySelectorAll(`i.${className}`));\n  const replacablesLength = $replacables.length;\n  if (replacablesLength) {\n    $highestParent.style.display = displayStyle;\n    $split.style.display = displayStyle;\n    $split.setAttribute(dataLine, `${lineIndex}`);\n    if (!isLine) {\n      $split.setAttribute('data-word', `${wordIndex}`);\n      if (isChar) $split.setAttribute('data-char', `${charIndex}`);\n    }\n    let i = replacablesLength;\n    while (i--) {\n      const $replace = $replacables[i];\n      const $closestParent = $replace.parentElement;\n      $closestParent.style.display = displayStyle;\n      if (isLine) {\n        $closestParent.innerHTML = /** @type {HTMLElement} */(node).innerHTML;\n      } else {\n        $closestParent.replaceChild(node.cloneNode(true), $replace);\n      }\n    }\n    store.push($split);\n    $parentFragment.appendChild($content);\n  } else {\n    console.warn(`The expression \"{value}\" is missing from the provided template.`);\n  }\n  if (debug) $highestParent.style.outline = `1px dotted ${debugColors[type]}`;\n  return $highestParent;\n};\n\n/**\n * A class that splits text into words and wraps them in span elements while preserving the original HTML structure.\n * @class\n */\nclass TextSplitter {\n  /**\n   * @param  {HTMLElement|NodeList|String|Array<HTMLElement>} target\n   * @param  {TextSplitterParams} [parameters]\n   */\n  constructor(target, parameters = {}) {\n    // Only init segmenters when needed\n    if (!wordSegmenter) wordSegmenter = segmenter ? new segmenter([], { granularity: wordType }) : {\n      segment: (text) => {\n        const segments = [];\n        const words = text.split(whiteSpaceGroupRgx);\n        for (let i = 0, l = words.length; i < l; i++) {\n          const segment = words[i];\n          segments.push({\n            segment,\n            isWordLike: !whiteSpaceRgx.test(segment), // Consider non-whitespace as word-like\n          });\n        }\n        return segments;\n      }\n    };\n    if (!graphemeSegmenter) graphemeSegmenter = segmenter ? new segmenter([], { granularity: 'grapheme' }) : {\n      segment: text => [...text].map(char => ({ segment: char }))\n    };\n    if (!$splitTemplate && isBrowser) $splitTemplate = doc.createElement('template');\n    if (scope.current) scope.current.register(this);\n    const { words, chars, lines, accessible, includeSpaces, debug } = parameters;\n    const $target = /** @type {HTMLElement} */((target = isArr(target) ? target[0] : target) && /** @type {Node} */(target).nodeType ? target : (getNodeList(target) || [])[0]);\n    const lineParams = lines === true ? {} : lines;\n    const wordParams = words === true || isUnd(words) ? {} : words;\n    const charParams = chars === true ? {} : chars;\n    this.debug = setValue(debug, false);\n    this.includeSpaces = setValue(includeSpaces, false);\n    this.accessible = setValue(accessible, true);\n    this.linesOnly = lineParams && (!wordParams && !charParams);\n    /** @type {String|false|SplitFunctionValue} */\n    this.lineTemplate = isObj(lineParams) ? generateTemplate(lineType, /** @type {splitTemplateParams} */(lineParams)) : lineParams;\n    /** @type {String|false|SplitFunctionValue} */\n    this.wordTemplate = isObj(wordParams) || this.linesOnly ? generateTemplate(wordType, /** @type {splitTemplateParams} */(wordParams)) : wordParams;\n    /** @type {String|false|SplitFunctionValue} */\n    this.charTemplate = isObj(charParams) ? generateTemplate(charType, /** @type {splitTemplateParams} */(charParams)) : charParams;\n    this.$target = $target;\n    this.html = $target && $target.innerHTML;\n    this.lines = [];\n    this.words = [];\n    this.chars = [];\n    this.effects = [];\n    this.effectsCleanups = [];\n    this.cache = null;\n    this.ready = false;\n    this.width = 0;\n    this.resizeTimeout = null;\n    const handleSplit = () => this.html && (lineParams || wordParams || charParams) && this.split();\n    // Make sure this is declared before calling handleSplit() in case revert() is called inside an effect callback\n    this.resizeObserver = new ResizeObserver(() => {\n      // Use a setTimeout instead of a Timer for better tree shaking\n      clearTimeout(this.resizeTimeout);\n      this.resizeTimeout = setTimeout(() => {\n        const currentWidth = /** @type {HTMLElement} */($target).offsetWidth;\n        if (currentWidth === this.width) return;\n        this.width = currentWidth;\n        handleSplit();\n      }, 150);\n    });\n    // Only declare the font ready promise when splitting by lines and not alreay split\n    if (this.lineTemplate && !this.ready) {\n      doc.fonts.ready.then(handleSplit);\n    } else {\n      handleSplit();\n    }\n    $target ? this.resizeObserver.observe($target) : console.warn('No Text Splitter target found.');\n  }\n\n  /**\n   * @param  {(...args: any[]) => Tickable | (() => void)} effect\n   * @return this\n   */\n  addEffect(effect) {\n    if (!isFnc(effect)) return console.warn('Effect must return a function.');\n    const refreshableEffect = createRefreshable(effect);\n    this.effects.push(refreshableEffect);\n    if (this.ready) this.effectsCleanups[this.effects.length - 1] = refreshableEffect(this);\n    return this;\n  }\n\n  revert() {\n    clearTimeout(this.resizeTimeout);\n    this.lines.length = this.words.length = this.chars.length = 0;\n    this.resizeObserver.disconnect();\n    // Make sure to revert the effects after disconnecting the resizeObserver to avoid triggering it in the process\n    this.effectsCleanups.forEach(cleanup => isFnc(cleanup) ? cleanup(this) : cleanup.revert && cleanup.revert());\n    this.$target.innerHTML = this.html;\n    return this;\n  }\n\n  /**\n   * Recursively processes a node and its children\n   * @param {Node} node\n   */\n  splitNode(node) {\n    const wordTemplate = this.wordTemplate;\n    const charTemplate = this.charTemplate;\n    const includeSpaces = this.includeSpaces;\n    const debug = this.debug;\n    const nodeType = node.nodeType;\n    if (nodeType === 3) {\n      const nodeText = node.nodeValue;\n      // If the nodeText is only whitespace, leave it as is\n      if (nodeText.trim()) {\n        const tempWords = [];\n        const words = this.words;\n        const chars = this.chars;\n        const wordSegments = wordSegmenter.segment(nodeText);\n        const $wordsFragment = doc.createDocumentFragment();\n        let prevSeg = null;\n        for (const wordSegment of wordSegments) {\n          const segment = wordSegment.segment;\n          const isWordLike = isSegmentWordLike(wordSegment);\n          // Determine if this segment should be a new word, first segment always becomes a new word\n          if (!prevSeg || (isWordLike && (prevSeg && (isSegmentWordLike(prevSeg))))) {\n            tempWords.push(segment);\n          } else {\n            // Only concatenate if both current and previous are non-word-like and don't contain spaces\n            const lastWordIndex = tempWords.length - 1;\n            const lastWord = tempWords[lastWordIndex];\n            if (!lastWord.includes(' ') && !segment.includes(' ')) {\n              tempWords[lastWordIndex] += segment;\n            } else {\n              tempWords.push(segment);\n            }\n          }\n          prevSeg = wordSegment;\n        }\n\n        for (let i = 0, l = tempWords.length; i < l; i++) {\n          const word = tempWords[i];\n          if (!word.trim()) {\n            // Preserve whitespace only if includeSpaces is false and if the current space is not the first node\n            if (i && includeSpaces) continue;\n            $wordsFragment.appendChild(doc.createTextNode(word));\n          } else {\n            const nextWord = tempWords[i + 1];\n            const hasWordFollowingSpace = includeSpaces && nextWord && !nextWord.trim();\n            const wordToProcess = word;\n            const charSegments = charTemplate ? graphemeSegmenter.segment(wordToProcess) : null;\n            const $charsFragment = charTemplate ? doc.createDocumentFragment() : doc.createTextNode(hasWordFollowingSpace ? word + '\\xa0' : word);\n            if (charTemplate) {\n              const charSegmentsArray = [...charSegments];\n              for (let j = 0, jl = charSegmentsArray.length; j < jl; j++) {\n                const charSegment = charSegmentsArray[j];\n                const isLastChar = j === jl - 1;\n                // If this is the last character and includeSpaces is true with a following space, append the space\n                const charText = isLastChar && hasWordFollowingSpace ? charSegment.segment + '\\xa0' : charSegment.segment;\n                const $charNode = doc.createTextNode(charText);\n                processHTMLTemplate(charTemplate, chars, $charNode, /** @type {DocumentFragment} */($charsFragment), charType, debug, -1, words.length, chars.length);\n              }\n            }\n            if (wordTemplate) {\n              processHTMLTemplate(wordTemplate, words, $charsFragment, $wordsFragment, wordType, debug, -1, words.length, chars.length);\n              // Chars elements must be re-parsed in the split() method if both words and chars are parsed\n            } else if (charTemplate) {\n              $wordsFragment.appendChild($charsFragment);\n            } else {\n              $wordsFragment.appendChild(doc.createTextNode(word));\n            }\n            // Skip the next iteration if we included a space\n            if (hasWordFollowingSpace) i++;\n          }\n        }\n        node.parentNode.replaceChild($wordsFragment, node);\n      }\n    } else if (nodeType === 1) {\n      // Converting to an array is necessary to work around childNodes pottential mutation\n      const childNodes = /** @type {Array<Node>} */([.../** @type {*} */(node.childNodes)]);\n      for (let i = 0, l = childNodes.length; i < l; i++) this.splitNode(childNodes[i]);\n    }\n  }\n\n  /**\n   * @param {Boolean} clearCache\n   * @return {this}\n   */\n  split(clearCache = false) {\n    const $el = this.$target;\n    const isCached = !!this.cache && !clearCache;\n    const lineTemplate = this.lineTemplate;\n    const wordTemplate = this.wordTemplate;\n    const charTemplate = this.charTemplate;\n    const fontsReady = doc.fonts.status !== 'loading';\n    const canSplitLines = lineTemplate && fontsReady;\n    this.ready = !lineTemplate || fontsReady;\n    if (canSplitLines || clearCache) {\n      // No need to revert effects animations here since it's already taken care by the refreshable\n      this.effectsCleanups.forEach(cleanup => isFnc(cleanup) && cleanup(this));\n    }\n    if (!isCached) {\n      if (clearCache) {\n        $el.innerHTML = this.html;\n        this.words.length = this.chars.length = 0;\n      }\n      this.splitNode($el);\n      this.cache = $el.innerHTML;\n    }\n    if (canSplitLines) {\n      if (isCached) $el.innerHTML = this.cache;\n      this.lines.length = 0;\n      if (wordTemplate) this.words = getAllTopLevelElements($el, wordType);\n    }\n    // Always reparse characters after a line reset or if both words and chars are activated\n    if (charTemplate && (canSplitLines || wordTemplate)) {\n      this.chars = getAllTopLevelElements($el, charType);\n    }\n    // Words are used when lines only and prioritized over chars\n    const elementsArray = this.words.length ? this.words : this.chars;\n    let y, linesCount = 0;\n    for (let i = 0, l = elementsArray.length; i < l; i++) {\n      const $el = elementsArray[i];\n      const { top, height } = $el.getBoundingClientRect();\n      if (y && top - y > height * .5) linesCount++;\n      $el.setAttribute(dataLine, `${linesCount}`);\n      const nested = $el.querySelectorAll(`[${dataLine}]`);\n      let c = nested.length;\n      while (c--) nested[c].setAttribute(dataLine, `${linesCount}`);\n      y = top;\n    }\n    if (canSplitLines) {\n      const linesFragment = doc.createDocumentFragment();\n      const parents = new Set();\n      const clones = [];\n      for (let lineIndex = 0; lineIndex < linesCount + 1; lineIndex++) {\n        const $clone = /** @type {HTMLElement} */($el.cloneNode(true));\n        filterLineElements($clone, lineIndex, new Set()).forEach($el => {\n          const $parent = $el.parentElement;\n          if ($parent) parents.add($parent);\n          $el.remove();\n        });\n        clones.push($clone);\n      }\n      parents.forEach(filterEmptyElements);\n      for (let cloneIndex = 0, clonesLength = clones.length; cloneIndex < clonesLength; cloneIndex++) {\n        processHTMLTemplate(lineTemplate, this.lines, clones[cloneIndex], linesFragment, lineType, this.debug, cloneIndex);\n      }\n      $el.innerHTML = '';\n      $el.appendChild(linesFragment);\n      if (wordTemplate) this.words = getAllTopLevelElements($el, wordType);\n      if (charTemplate) this.chars = getAllTopLevelElements($el, charType);\n    }\n    // Remove the word wrappers and clear the words array if lines split only\n    if (this.linesOnly) {\n      const words = this.words;\n      let w = words.length;\n      while (w--) {\n        const $word = words[w];\n        $word.replaceWith($word.textContent);\n      }\n      words.length = 0;\n    }\n    if (this.accessible && (canSplitLines || !isCached)) {\n      const $accessible = doc.createElement('span');\n      // Make the accessible element visually-hidden (https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html)\n      $accessible.style.cssText = `position:absolute;overflow:hidden;clip:rect(0 0 0 0);clip-path:inset(50%);width:1px;height:1px;white-space:nowrap;`;\n      // $accessible.setAttribute('tabindex', '-1');\n      $accessible.innerHTML = this.html;\n      $el.insertBefore($accessible, $el.firstChild);\n      this.lines.forEach(setAriaHidden);\n      this.words.forEach(setAriaHidden);\n      this.chars.forEach(setAriaHidden);\n    }\n    this.width = /** @type {HTMLElement} */($el).offsetWidth;\n    if (canSplitLines || clearCache) {\n      this.effects.forEach((effect, i) => this.effectsCleanups[i] = effect(this));\n    }\n    return this;\n  }\n\n  refresh() {\n    this.split(true);\n  }\n}\n\n/**\n * @param  {HTMLElement|NodeList|String|Array<HTMLElement>} target\n * @param  {TextSplitterParams} [parameters]\n * @return {TextSplitter}\n */\nconst split = (target, parameters) => new TextSplitter(target, parameters);\n\nconst text = {\n  split,\n};\n\n\n\n\n/**\n * @param  {Number|String|[Number|String,Number|String]} val\n * @param  {StaggerParams} params\n * @return {StaggerFunction}\n */\nconst stagger = (val, params = {}) => {\n  let values = [];\n  let maxValue = 0;\n  const from = params.from;\n  const reversed = params.reversed;\n  const ease = params.ease;\n  const hasEasing = !isUnd(ease);\n  const hasSpring = hasEasing && !isUnd(/** @type {Spring} */(ease).ease);\n  const staggerEase = hasSpring ? /** @type {Spring} */(ease).ease : hasEasing ? parseEasings(ease) : null;\n  const grid = params.grid;\n  const axis = params.axis;\n  const customTotal = params.total;\n  const fromFirst = isUnd(from) || from === 0 || from === 'first';\n  const fromCenter = from === 'center';\n  const fromLast = from === 'last';\n  const fromRandom = from === 'random';\n  const isRange = isArr(val);\n  const useProp = params.use;\n  const val1 = isRange ? parseNumber(val[0]) : parseNumber(val);\n  const val2 = isRange ? parseNumber(val[1]) : 0;\n  const unitMatch = unitsExecRgx.exec((isRange ? val[1] : val) + emptyString);\n  const start = params.start || 0 + (isRange ? val1 : 0);\n  let fromIndex = fromFirst ? 0 : isNum(from) ? from : 0;\n  return (target, i, t, tl) => {\n    const [ registeredTarget ] = registerTargets(target);\n    const total = isUnd(customTotal) ? t : customTotal;\n    const customIndex = !isUnd(useProp) ? isFnc(useProp) ? useProp(registeredTarget, i, total) : getOriginalAnimatableValue(registeredTarget, useProp) : false;\n    const staggerIndex = isNum(customIndex) || isStr(customIndex) && isNum(+customIndex) ? +customIndex : i;\n    if (fromCenter) fromIndex = (total - 1) / 2;\n    if (fromLast) fromIndex = total - 1;\n    if (!values.length) {\n      for (let index = 0; index < total; index++) {\n        if (!grid) {\n          values.push(abs(fromIndex - index));\n        } else {\n          const fromX = !fromCenter ? fromIndex % grid[0] : (grid[0] - 1) / 2;\n          const fromY = !fromCenter ? floor(fromIndex / grid[0]) : (grid[1] - 1) / 2;\n          const toX = index % grid[0];\n          const toY = floor(index / grid[0]);\n          const distanceX = fromX - toX;\n          const distanceY = fromY - toY;\n          let value = sqrt(distanceX * distanceX + distanceY * distanceY);\n          if (axis === 'x') value = -distanceX;\n          if (axis === 'y') value = -distanceY;\n          values.push(value);\n        }\n        maxValue = max(...values);\n      }\n      if (staggerEase) values = values.map(val => staggerEase(val / maxValue) * maxValue);\n      if (reversed) values = values.map(val => axis ? (val < 0) ? val * -1 : -val : abs(maxValue - val));\n      if (fromRandom) values = shuffle(values);\n    }\n    const spacing = isRange ? (val2 - val1) / maxValue : val1;\n    const offset = tl ? parseTimelinePosition(tl, isUnd(params.start) ? tl.iterationDuration : start) : /** @type {Number} */(start);\n    /** @type {String|Number} */\n    let output = offset + ((spacing * round(values[staggerIndex], 2)) || 0);\n    if (params.modifier) output = params.modifier(output);\n    if (unitMatch) output = `${output}${unitMatch[2]}`;\n    return output;\n  }\n};\n\nexport { Animatable, Draggable, JSAnimation, Scope, ScrollObserver, Spring, TextSplitter, Timeline, Timer, WAAPIAnimation, animate, createAnimatable, createDraggable, createScope, createSpring, createTimeline, createTimer, eases, engine, onScroll, scrollContainers, stagger, svg, text, utils, waapi };\n"],"names":["isBrowser","window","win","doc","document","tweenTypes","valueTypes","tickModes","compositionTypes","replace","none","blend","isRegisteredTargetSymbol","Symbol","isDomSymbol","isSvgSymbol","transformsSymbol","proxyTargetSymbol","minValue","maxValue","K","emptyString","shortTransforms","map","Map","set","validTransforms","transformsFragmentStrings","reduce","a","v","noop","hexTestRgx","rgbExecRgx","rgbaExecRgx","hslExecRgx","hslaExecRgx","digitWithExponentRgx","unitsExecRgx","lowerCaseRgx","transformsExecRgx","relativeValuesExecRgx","defaults","id","keyframes","playbackEase","playbackRate","frameRate","loop","reversed","alternate","autoplay","duration","delay","loopDelay","ease","composition","modifier","onBegin","onBeforeUpdate","onUpdate","onLoop","onPause","onComplete","onRender","scope","current","root","globals","precision","timeScale","tickThreshold","globalVersions","version","engine","AnimeJS","push","toLowerCase","str","stringStartsWith","sub","indexOf","now","Date","isArr","Array","isArray","isObj","constructor","Object","isNum","isNaN","isStr","isFnc","isUnd","isNil","isSvg","SVGElement","isHex","test","isRgb","isHsl","isKey","hasOwnProperty","parseNumber","parseFloat","pow","Math","sqrt","sin","cos","abs","ceil","exp","floor","asin","max","PI","atan2","_round","round","clamp","min","powCache","decimalLength","p","snap","increment","closest","cv","interpolate","start","end","progress","random","m","shuffle","items","t","i","length","clampInfinity","Infinity","normalizeTime","cloneArray","mergeObjects","o1","o2","merged","o1p","forEachChildren","parent","callback","reverse","prevProp","arguments","undefined","nextProp","next","_head","adjustedNextProp","_tail","currentNext","removeChild","child","prev","addChild","sortMethod","createRefreshable","tracked","currentIteration","currentIterationProgress","iterationProgress","_alternate","revert","cleanup","Clock","initTime","this","deltaTime","_currentTime","_elapsedTime","_startTime","_lastTime","_scheduledTime","_frameDuration","_fps","_speed","_hasChildren","fps","previousFrameDuration","fr","frameDuration","speed","pbr","requestTick","time","scheduledTime","elapsedTime","frameDelta","computeDeltaTime","delta","render","tickable","muteCallbacks","internalRender","tickMode","completed","iterationDuration","iterationCount","_currentIteration","_loopDelay","_reversed","tickableDelay","_delay","tickablePrevAbsoluteTime","tickableEndTime","tickableAbsoluteTime","tickablePrevTime","tickableCurrentTime","isCurrentTimeAboveZero","isCurrentTimeEqualOrAboveDuration","isSetter","forcedTick","isOdd","iterationElapsedTime","hasRendered","isReversed","_ease","iterationTime","isRunningBackwards","backwards","_iterationTime","began","forcedRender","absoluteTime","_offset","tweenTarget","tweenStyle","tweenTargetTransforms","tweenTargetTransformsProperties","tween","tweenTransformsNeedUpdate","tweenComposition","_composition","tweenCurrentTime","tweenChangeDuration","_changeDuration","tweenAbsEndTime","_absoluteStartTime","tweenNextRep","_nextRep","tweenPrevRep","_prevRep","tweenHasComposition","_isOverridden","_isOverlapped","tweenNewTime","tweenProgress","_updateDuration","tweenModifier","_modifier","tweenValueType","_valueType","tweenType","_tweenType","tweenIsObject","tweenIsNumber","tweenPrecision","value","number","_fromNumber","_toNumber","_unit","fn","_fromNumbers","tn","_toNumbers","r","g","b","ns","_numbers","_strings","j","l","n","s","_number","_value","tweenProperty","property","target","setAttribute","style","setProperty","_renderTransforms","key","transform","_next","paused","_resolve","tick","tl","tlIsRunningBackwards","tlChildrenTime","tlCildrenTickTime","tlChildrenHasRendered","tlChildrenHaveCompleted","tlIterationDuration","childDuration","childStartTime","childTime","childTickMode","additive","animation","update","engineTickMethod","requestAnimationFrame","setImmediate","engineCancelMethod","cancelAnimationFrame","clearImmediate","Engine","super","useDefaultMainLoop","pauseOnDocumentHidden","hidden","reqId","engineSpeed","engineFps","activeTickable","nextTickable","_running","_cancelled","cancel","wake","tickEngine","pause","killEngine","resume","resetTime","timeUnit","unit","isSecond","newScale","scaleFactor","addEventListener","getNodeList","querySelectorAll","NodeList","HTMLCollection","parseTargets","targets","flattened","flat","parsed","item","nodeList","jl","subItem","isDuplicate","k","kl","from","registerTargets","parsedTargetsArray","parsedTargetsLength","isSvgType","nodeType","cssReservedProperties","hue2rgb","q","convertColorStringValuesToRgbaArray","colorString","rgbValue","rgba","exec","rgbToRgba","hexValue","hexLength","isShort","toFixed","hexToRgba","hslValue","hsla","h","hslToRgba","setValue","targetValue","defaultValue","getFunctionValue","index","total","store","func","computed","getTweenType","prop","isValidSVGAttribute","el","propertyName","includes","getAttribute","elParentNode","parentNode","tagName","get","getCSSValue","propName","animationInlineStyles","inlineStyles","getComputedStyle","getPropertyValue","getOriginalAnimatableValue","type","parseInlineTransforms","inlineTransforms","inlinedStylesPropertyValue","cachedTransforms","inlinePropertyName","inlinePropertyValue","slice","trimStart","getRelativeValue","x","y","operator","createDecomposedValueTargetObject","u","o","d","decomposeRawValue","rawValue","targetObject","num","unitMatch","matchedNumbers","match","Number","split","decomposeTweenValue","decomposedOriginalValue","lookups","_rep","WeakMap","_add","getTweenSiblings","lookupMap","targetLookup","addTweenSortMethod","c","overrideTween","composeTween","siblings","tweenCompositionType","tweenAbsStartTime","prevSibling","prevParent","prevAbsEndTime","prevPrevSibling","absoluteUpdateStartTime","prevChangeStartTime","prevTLOffset","pausePrevParentAnimation","prevParentTL","pausePrevParentTL","additiveTweenSiblings","additiveAnimation","forEach","propertyAnimation","tweens","lookupTween","valueType","additiveValues","additiveValue","_prevAdd","addAdditiveAnimation","_prev","toNumber","toNumbers","removeTweenSliblings","tweenReplaceSiblings","addTweensLookup","addTargetProps","shouldClean","delete","resetTimerProperties","timer","reviveTimer","timerId","Timer","parameters","parentPosition","register","timerInitTime","timerDefaults","timerDelay","timerDuration","timerLoop","timerLoopDelay","timerIterationCount","offsetPosition","startTime","_autoplay","_reverse","cancelled","reset","play","currentTime","seek","iterationCurrentTime","init","linked","link","restart","isPaused","count","iterations","stretch","newDuration","currentDuration","normlizedDuration","ap","complete","then","onResolve","Promise","calcBezier","aT","aA1","aA2","cubicBezier","mX1","mY1","mX2","mY2","binarySubdivide","aX","currentX","currentT","aA","aB","steps","roundMethod","linear","argsLength","totalPoints","lastArg","xPoints","yPoints","arg","splitValue","trim","percent","prevX","prevY","irregular","randomness","values","previousValue","spacing","randomValue","halfPI","doublePI","easeInPower","easeInFunctions","Quad","Cubic","Quart","Quint","Sine","Circ","Expo","Bounce","pow2","Back","overshoot","Elastic","period","e","easeTypes","in","easeIn","out","inOut","outIn","parseEaseString","string","easesFunctions","easesLookups","parsedFn","eases","list","name","easeType","JSEasesLookups","parseEasings","propertyNamesCache","sanitizePropertyName","cachedPropertyName","lowerCaseName","angleUnitsMap","convertedValuesCache","convertValueUnit","decomposedValue","force","currentUnit","currentNumber","cachedKey","cached","convertedValue","baseline","tempEl","cloneNode","parentEl","body","appendChild","elStyle","width","currentUnitWidth","offsetWidth","factor","cleanInlineStyles","renderable","targetStyle","originalInlinedValue","_inlineStyles","keys","removeProperty","removeAttribute","fromTargetObject","toTargetObject","toFunctionStore","keyframesTargetArray","fastSetValuesArray","keyObjectTarget","to","tweenId","JSAnimation","fastSet","parsedTargets","targetsLength","kfParams","params","generateKeyframes","properties","propertyNames","concat","filter","propArray","newKey","keyValue","totalDuration","sort","offset","prevKey","keyObj","durProgress","prevEase","currentEase","shift","animDefaults","animaPlaybackEase","animEase","hasSpring","tEasing","tDuration","tDelay","tModifier","tComposition","animInlineStyles","absoluteOffsetTime","NaN","iterationDelay","animationAnimationLength","shouldTriggerRender","targetIndex","ti","lastTransformGroupIndex","lastTransformGroupLength","propValue","isPropValueArray","arrayLength","isNotObjectValue","prevTween","firstTweenChangeStartTime","lastTweenChangeEndTime","tweenIndex","keyframe","computedToValue","tweenToValue","tweenFromValue","keyEasing","tweenEasing","tweenDuration","tweenDelay","computedComposition","hasFromvalue","hasToValue","isFromToArray","isFromToValue","tweenStartTime","absoluteStartTime","nextSibling","complexValue","notComplexValue","unitValue","notUnitValue","colorValue","notColorValue","valueToConvert","longestValue","shortestValue","_","tweenUpdateDuration","_func","_nextAdd","additiveTween","console","warn","refresh","tweenFunc","ogValue","animate","transformsShorthands","WAAPIAnimationsLookups","removeWAAPIAnimation","$el","nextLookup","matchTarget","matchProperty","matchParent","anim","commitStyles","lookupParent","_completed","animations","sync","getTargetValue","targetSelector","normalizePropName","originalValue","setTargetValues","removeTargetsFromAnimation","targetsArray","tweensMatchesTargets","tweenName","remove","waapiAnimation","controlAnimation","removeMatches","childDur","mapRange","inLow","inHigh","outLow","outHigh","lerp","amount","dt","ticker","chain","result","Proxy","apply","__","_ref","nextResult","utils","makeChainable","right","last","_len3","args","_key3","curry","$","randomPick","keepTime","wrap","roundPad","padStart","totalLength","padString","padEnd","degToRad","degrees","radToDeg","radians","parseTimelinePosition","timeline","timePosition","tlDuration","timePosStr","tlLabels","labels","hasLabels","prevOffset","getPrevChildOffset","goToPrevAnimationOffset","prevAnimation","hasSibling","matchedRelativeOperator","fullOperator","labelOffset","parsedOffset","parsedNumericalOffset","addTlChild","childParams","adjustedPosition","tlChild","getTimelineTotalDuration","Timeline","defaultsParams","globalDefaults","tlPlaybackEase","add","a1","a2","a3","isAnim","isTimer","staggeredPosition","parsedLength","staggeredChildParams","synced","position","effect","getTiming","call","label","labelName","createTimeline","Intl","Segmenter","stagger","val","hasEasing","staggerEase","grid","axis","customTotal","fromFirst","fromCenter","fromLast","fromRandom","isRange","useProp","use","val1","val2","fromIndex","registeredTarget","customIndex","staggerIndex","fromX","fromY","distanceX","distanceY","output"],"sourceRoot":""}